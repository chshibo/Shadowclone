	.text
	.file	"bzip2.c"
	.globl	fopen_output_safely     # -- Begin function fopen_output_safely
	.p2align	4, 0x90
	.type	fopen_output_safely,@function
fopen_output_safely:                    # @fopen_output_safely
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_fopen_output_safely.13
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_fopen_output_safely.16
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_fopen_output_safely.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_fopen_output_safely.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_fopen_output_safely.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_fopen_output_safely.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.92
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_fopen_output_safely.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.102
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_fopen_output_safely.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.109
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_fopen_output_safely.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.114
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_fopen_output_safely.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.118
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_fopen_output_safely.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.156
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_fopen_output_safely.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.165
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_fopen_output_safely.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.167
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_fopen_output_safely.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_fopen_output_safely.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.212
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_fopen_output_safely.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.227
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	fopen_output_safely, .Lfunc_end0-fopen_output_safely
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$0, -76(%rbp)
	movl	%edi, -52(%rbp)
	movq	%rsi, -64(%rbp)
	movq	$0, outputHandleJustInCase
	movb	$0, smallMode
	movb	$0, keepInputFiles
	movb	$0, forceOverwrite
	movb	$1, noisy
	movl	$0, verbosity
	movl	$9, blockSize100k
	movb	$0, testFailsExist
	movb	$0, unzFailsExist
	movl	$0, numFileNames
	movl	$0, numFilesProcessed
	movl	$30, workFactor
	movb	$0, deleteOutputOnInterrupt
	movl	$0, exitValue
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$11, %edi
	movabsq	$mySIGSEGVorSIGBUScatcher, %rsi
	callq	signal
	movl	$7, %edi
	movabsq	$mySIGSEGVorSIGBUScatcher, %rsi
	callq	signal
	movabsq	$inName, %rdi
	movabsq	$.L.str, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str, %rsi
	callq	copyFileName
	movq	-64(%rbp), %rax
	movq	(%rax), %rsi
	movabsq	$progNameReally, %rdi
	callq	copyFileName
	movabsq	$progNameReally, %rax
	movq	%rax, progName
	movq	%rax, -48(%rbp)
.LBB1_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB1_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$47, %eax
	jne	.LBB1_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, progName
.LBB1_4:                                # %if.end
                                        #   in Loop: Header=BB1_1 Depth=1
	jmp	.LBB1_5
.LBB1_5:                                # %for.inc
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB1_1
.LBB1_6:                                # %for.end
	movq	$0, -32(%rbp)
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.1, %rsi
	callq	addFlagsFromEnvVar
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.2, %rsi
	callq	addFlagsFromEnvVar
	movl	$1, -40(%rbp)
.LBB1_7:                                # %for.cond6
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB1_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB1_7 Depth=1
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	snocString
	movq	%rax, -32(%rbp)
# %bb.9:                                # %for.inc12
                                        #   in Loop: Header=BB1_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB1_7
.LBB1_10:                               # %for.end13
	movl	$7, longestFileName
	movl	$0, numFileNames
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_11:                               # %for.cond14
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_21
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_14
# %bb.13:                               # %if.then21
                                        #   in Loop: Header=BB1_11 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_20
.LBB1_14:                               # %if.end22
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_17
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB1_11 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_17
# %bb.16:                               # %if.then29
                                        #   in Loop: Header=BB1_11 Depth=1
	jmp	.LBB1_20
.LBB1_17:                               # %if.end30
                                        #   in Loop: Header=BB1_11 Depth=1
	movl	numFileNames, %eax
	addl	$1, %eax
	movl	%eax, numFileNames
	movl	longestFileName, %ebx
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	cmpl	%eax, %ebx
	jge	.LBB1_19
# %bb.18:                               # %if.then37
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	movl	%eax, longestFileName
.LBB1_19:                               # %if.end41
                                        #   in Loop: Header=BB1_11 Depth=1
	jmp	.LBB1_20
.LBB1_20:                               # %for.inc42
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_11
.LBB1_21:                               # %for.end43
	cmpl	$0, numFileNames
	jne	.LBB1_23
# %bb.22:                               # %if.then46
	movl	$1, srcMode
	jmp	.LBB1_24
.LBB1_23:                               # %if.else
	movl	$3, srcMode
.LBB1_24:                               # %if.end47
	movl	$1, opMode
	movq	progName, %rdi
	movabsq	$.L.str.4, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_26
# %bb.25:                               # %lor.lhs.false
	movq	progName, %rdi
	movabsq	$.L.str.5, %rsi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB1_27
.LBB1_26:                               # %if.then54
	movl	$2, opMode
.LBB1_27:                               # %if.end55
	movq	progName, %rdi
	movabsq	$.L.str.6, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.28:                               # %lor.lhs.false59
	movq	progName, %rdi
	movabsq	$.L.str.7, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.29:                               # %lor.lhs.false63
	movq	progName, %rdi
	movabsq	$.L.str.8, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.30:                               # %lor.lhs.false67
	movq	progName, %rdi
	movabsq	$.L.str.9, %rsi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB1_32
.LBB1_31:                               # %if.then71
	movl	$2, opMode
	movl	numFileNames, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, srcMode
.LBB1_32:                               # %if.end74
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_33:                               # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_39 Depth 2
	cmpq	$0, -24(%rbp)
	je	.LBB1_68
# %bb.34:                               # %for.body78
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_36
# %bb.35:                               # %if.then83
	jmp	.LBB1_69
.LBB1_36:                               # %if.end84
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_66
# %bb.37:                               # %land.lhs.true90
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	1(%rax), %eax
	cmpl	$45, %eax
	je	.LBB1_66
# %bb.38:                               # %if.then96
                                        #   in Loop: Header=BB1_33 Depth=1
	movl	$1, -36(%rbp)
.LBB1_39:                               # %for.cond97
                                        #   Parent Loop BB1_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB1_65
# %bb.40:                               # %for.body104
                                        #   in Loop: Header=BB1_39 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-49, %eax
	movl	%eax, %ecx
	subl	$73, %ecx
	ja	.LBB1_62
# %bb.41:                               # %for.body104
                                        #   in Loop: Header=BB1_39 Depth=2
	movq	.LJTI1_0(,%rax,8), %rax
	jmpq	*%rax
.LBB1_42:                               # %sw.bb
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, srcMode
	jmp	.LBB1_63
.LBB1_43:                               # %sw.bb109
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, opMode
	jmp	.LBB1_63
.LBB1_44:                               # %sw.bb110
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$1, opMode
	jmp	.LBB1_63
.LBB1_45:                               # %sw.bb111
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, forceOverwrite
	jmp	.LBB1_63
.LBB1_46:                               # %sw.bb112
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$3, opMode
	jmp	.LBB1_63
.LBB1_47:                               # %sw.bb113
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, keepInputFiles
	jmp	.LBB1_63
.LBB1_48:                               # %sw.bb114
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, smallMode
	jmp	.LBB1_63
.LBB1_49:                               # %sw.bb115
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$0, noisy
	jmp	.LBB1_63
.LBB1_50:                               # %sw.bb116
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$1, blockSize100k
	jmp	.LBB1_63
.LBB1_51:                               # %sw.bb117
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, blockSize100k
	jmp	.LBB1_63
.LBB1_52:                               # %sw.bb118
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$3, blockSize100k
	jmp	.LBB1_63
.LBB1_53:                               # %sw.bb119
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$4, blockSize100k
	jmp	.LBB1_63
.LBB1_54:                               # %sw.bb120
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$5, blockSize100k
	jmp	.LBB1_63
.LBB1_55:                               # %sw.bb121
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$6, blockSize100k
	jmp	.LBB1_63
.LBB1_56:                               # %sw.bb122
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$7, blockSize100k
	jmp	.LBB1_63
.LBB1_57:                               # %sw.bb123
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$8, blockSize100k
	jmp	.LBB1_63
.LBB1_58:                               # %sw.bb124
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$9, blockSize100k
	jmp	.LBB1_63
.LBB1_59:                               # %sw.bb125
                                        #   in Loop: Header=BB1_39 Depth=2
	callq	license
	jmp	.LBB1_63
.LBB1_60:                               # %sw.bb126
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	verbosity, %eax
	addl	$1, %eax
	movl	%eax, verbosity
	jmp	.LBB1_63
.LBB1_61:                               # %sw.bb128
	movq	progName, %rdi
	callq	usage
	xorl	%edi, %edi
	callq	exit
.LBB1_62:                               # %sw.default
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movabsq	$.L.str.10, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	usage
	movl	$1, %edi
	callq	exit
.LBB1_63:                               # %sw.epilog
                                        #   in Loop: Header=BB1_39 Depth=2
	jmp	.LBB1_64
.LBB1_64:                               # %for.inc131
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB1_39
.LBB1_65:                               # %for.end133
                                        #   in Loop: Header=BB1_33 Depth=1
	jmp	.LBB1_66
.LBB1_66:                               # %if.end134
                                        #   in Loop: Header=BB1_33 Depth=1
	jmp	.LBB1_67
.LBB1_67:                               # %for.inc135
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_33
.LBB1_68:                               # %for.end137.loopexit
	jmp	.LBB1_69
.LBB1_69:                               # %for.end137
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_70:                               # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_128
# %bb.71:                               # %for.body141
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_73
# %bb.72:                               # %if.then146
	jmp	.LBB1_129
.LBB1_73:                               # %if.end147
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.11, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_75
# %bb.74:                               # %if.then152
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$2, srcMode
	jmp	.LBB1_126
.LBB1_75:                               # %if.else153
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.12, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_77
# %bb.76:                               # %if.then158
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$2, opMode
	jmp	.LBB1_125
.LBB1_77:                               # %if.else159
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.13, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_79
# %bb.78:                               # %if.then164
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, opMode
	jmp	.LBB1_124
.LBB1_79:                               # %if.else165
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.14, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_81
# %bb.80:                               # %if.then170
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, forceOverwrite
	jmp	.LBB1_123
.LBB1_81:                               # %if.else171
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.15, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_83
# %bb.82:                               # %if.then176
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$3, opMode
	jmp	.LBB1_122
.LBB1_83:                               # %if.else177
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.16, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_85
# %bb.84:                               # %if.then182
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, keepInputFiles
	jmp	.LBB1_121
.LBB1_85:                               # %if.else183
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.17, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_87
# %bb.86:                               # %if.then188
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, smallMode
	jmp	.LBB1_120
.LBB1_87:                               # %if.else189
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.18, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_89
# %bb.88:                               # %if.then194
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$0, noisy
	jmp	.LBB1_119
.LBB1_89:                               # %if.else195
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.19, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_91
# %bb.90:                               # %if.then200
                                        #   in Loop: Header=BB1_70 Depth=1
	callq	license
	jmp	.LBB1_118
.LBB1_91:                               # %if.else201
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.20, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_93
# %bb.92:                               # %if.then206
                                        #   in Loop: Header=BB1_70 Depth=1
	callq	license
	jmp	.LBB1_117
.LBB1_93:                               # %if.else207
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.21, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_95
# %bb.94:                               # %if.then212
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, workFactor
	jmp	.LBB1_116
.LBB1_95:                               # %if.else213
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.22, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_97
# %bb.96:                               # %if.then218
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	redundant
	jmp	.LBB1_115
.LBB1_97:                               # %if.else220
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.23, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_99
# %bb.98:                               # %if.then225
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	redundant
	jmp	.LBB1_114
.LBB1_99:                               # %if.else227
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.24, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_101
# %bb.100:                              # %if.then232
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, blockSize100k
	jmp	.LBB1_113
.LBB1_101:                              # %if.else233
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.25, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_103
# %bb.102:                              # %if.then238
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$9, blockSize100k
	jmp	.LBB1_112
.LBB1_103:                              # %if.else239
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.26, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_105
# %bb.104:                              # %if.then244
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	verbosity, %eax
	addl	$1, %eax
	movl	%eax, verbosity
	jmp	.LBB1_111
.LBB1_105:                              # %if.else246
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.27, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_107
# %bb.106:                              # %if.then251
	movq	progName, %rdi
	callq	usage
	xorl	%edi, %edi
	callq	exit
.LBB1_107:                              # %if.else252
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$.L.str.3, %rsi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB1_109
# %bb.108:                              # %if.then257
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movabsq	$.L.str.10, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	usage
	movl	$1, %edi
	callq	exit
.LBB1_109:                              # %if.end260
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_110
.LBB1_110:                              # %if.end261
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_111
.LBB1_111:                              # %if.end262
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_112
.LBB1_112:                              # %if.end263
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_113
.LBB1_113:                              # %if.end264
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_114
.LBB1_114:                              # %if.end265
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_115
.LBB1_115:                              # %if.end266
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_116
.LBB1_116:                              # %if.end267
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_117
.LBB1_117:                              # %if.end268
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_118
.LBB1_118:                              # %if.end269
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_119
.LBB1_119:                              # %if.end270
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_120
.LBB1_120:                              # %if.end271
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_121
.LBB1_121:                              # %if.end272
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_122
.LBB1_122:                              # %if.end273
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_123
.LBB1_123:                              # %if.end274
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_124
.LBB1_124:                              # %if.end275
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_125
.LBB1_125:                              # %if.end276
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_126
.LBB1_126:                              # %if.end277
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_127
.LBB1_127:                              # %for.inc278
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_70
.LBB1_128:                              # %for.end280.loopexit
	jmp	.LBB1_129
.LBB1_129:                              # %for.end280
	cmpl	$4, verbosity
	jle	.LBB1_131
# %bb.130:                              # %if.then283
	movl	$4, verbosity
.LBB1_131:                              # %if.end284
	cmpl	$1, opMode
	jne	.LBB1_135
# %bb.132:                              # %land.lhs.true287
	movzbl	smallMode, %eax
	cmpl	$0, %eax
	je	.LBB1_135
# %bb.133:                              # %land.lhs.true290
	cmpl	$2, blockSize100k
	jle	.LBB1_135
# %bb.134:                              # %if.then293
	movl	$2, blockSize100k
.LBB1_135:                              # %if.end294
	cmpl	$3, opMode
	jne	.LBB1_138
# %bb.136:                              # %land.lhs.true297
	cmpl	$2, srcMode
	jne	.LBB1_138
# %bb.137:                              # %if.then300
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.28, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	exit
.LBB1_138:                              # %if.end302
	cmpl	$2, srcMode
	jne	.LBB1_141
# %bb.139:                              # %land.lhs.true305
	cmpl	$0, numFileNames
	jne	.LBB1_141
# %bb.140:                              # %if.then308
	movl	$1, srcMode
.LBB1_141:                              # %if.end309
	cmpl	$1, opMode
	je	.LBB1_143
# %bb.142:                              # %if.then312
	movl	$0, blockSize100k
.LBB1_143:                              # %if.end313
	cmpl	$3, srcMode
	jne	.LBB1_145
# %bb.144:                              # %if.then316
	movl	$2, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
	movl	$15, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
	movl	$1, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
.LBB1_145:                              # %if.end320
	cmpl	$1, opMode
	jne	.LBB1_159
# %bb.146:                              # %if.then323
	cmpl	$1, srcMode
	jne	.LBB1_148
# %bb.147:                              # %if.then326
	xorl	%edi, %edi
	callq	compress
	jmp	.LBB1_158
.LBB1_148:                              # %if.else327
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_149:                              # %for.cond328
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_157
# %bb.150:                              # %for.body331
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_152
# %bb.151:                              # %if.then336
                                        #   in Loop: Header=BB1_149 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_156
.LBB1_152:                              # %if.end337
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_155
# %bb.153:                              # %land.lhs.true343
                                        #   in Loop: Header=BB1_149 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_155
# %bb.154:                              # %if.then346
                                        #   in Loop: Header=BB1_149 Depth=1
	jmp	.LBB1_156
.LBB1_155:                              # %if.end347
                                        #   in Loop: Header=BB1_149 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	compress
.LBB1_156:                              # %for.inc350
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_149
.LBB1_157:                              # %for.end352
	jmp	.LBB1_158
.LBB1_158:                              # %if.end353
	jmp	.LBB1_192
.LBB1_159:                              # %if.else354
	cmpl	$2, opMode
	jne	.LBB1_175
# %bb.160:                              # %if.then357
	movb	$0, unzFailsExist
	cmpl	$1, srcMode
	jne	.LBB1_162
# %bb.161:                              # %if.then360
	xorl	%edi, %edi
	callq	uncompress
	jmp	.LBB1_172
.LBB1_162:                              # %if.else361
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_163:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_171
# %bb.164:                              # %for.body365
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_166
# %bb.165:                              # %if.then370
                                        #   in Loop: Header=BB1_163 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_170
.LBB1_166:                              # %if.end371
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_169
# %bb.167:                              # %land.lhs.true377
                                        #   in Loop: Header=BB1_163 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_169
# %bb.168:                              # %if.then380
                                        #   in Loop: Header=BB1_163 Depth=1
	jmp	.LBB1_170
.LBB1_169:                              # %if.end381
                                        #   in Loop: Header=BB1_163 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	uncompress
.LBB1_170:                              # %for.inc384
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_163
.LBB1_171:                              # %for.end386
	jmp	.LBB1_172
.LBB1_172:                              # %if.end387
	cmpb	$0, unzFailsExist
	je	.LBB1_174
# %bb.173:                              # %if.then389
	movl	$2, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB1_174:                              # %if.end390
	jmp	.LBB1_191
.LBB1_175:                              # %if.else391
	movb	$0, testFailsExist
	cmpl	$1, srcMode
	jne	.LBB1_177
# %bb.176:                              # %if.then394
	xorl	%edi, %edi
	callq	testf
	jmp	.LBB1_187
.LBB1_177:                              # %if.else395
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_178:                              # %for.cond396
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_186
# %bb.179:                              # %for.body399
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_181
# %bb.180:                              # %if.then404
                                        #   in Loop: Header=BB1_178 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_185
.LBB1_181:                              # %if.end405
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_184
# %bb.182:                              # %land.lhs.true411
                                        #   in Loop: Header=BB1_178 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_184
# %bb.183:                              # %if.then414
                                        #   in Loop: Header=BB1_178 Depth=1
	jmp	.LBB1_185
.LBB1_184:                              # %if.end415
                                        #   in Loop: Header=BB1_178 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	testf
.LBB1_185:                              # %for.inc418
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_178
.LBB1_186:                              # %for.end420
	jmp	.LBB1_187
.LBB1_187:                              # %if.end421
	movzbl	testFailsExist, %eax
	cmpl	$0, %eax
	je	.LBB1_190
# %bb.188:                              # %land.lhs.true424
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB1_190
# %bb.189:                              # %if.then427
	movq	stderr, %rdi
	movabsq	$.L.str.29, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$2, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB1_190:                              # %if.end429
	jmp	.LBB1_191
.LBB1_191:                              # %if.end430
	jmp	.LBB1_192
.LBB1_192:                              # %if.end431
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_193:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_197
# %bb.194:                              # %while.body
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB1_196
# %bb.195:                              # %if.then438
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB1_196:                              # %if.end440
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_193
.LBB1_197:                              # %while.end
	movl	exitValue, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	main, .Lfunc_end1-main
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI1_0:
	.quad	.LBB1_50
	.quad	.LBB1_51
	.quad	.LBB1_52
	.quad	.LBB1_53
	.quad	.LBB1_54
	.quad	.LBB1_55
	.quad	.LBB1_56
	.quad	.LBB1_57
	.quad	.LBB1_58
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_59
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_59
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_42
	.quad	.LBB1_43
	.quad	.LBB1_62
	.quad	.LBB1_45
	.quad	.LBB1_62
	.quad	.LBB1_61
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_47
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_49
	.quad	.LBB1_62
	.quad	.LBB1_48
	.quad	.LBB1_46
	.quad	.LBB1_62
	.quad	.LBB1_60
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_44
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mySIGSEGVorSIGBUScatcher
	.type	mySIGSEGVorSIGBUScatcher,@function
mySIGSEGVorSIGBUScatcher:               # @mySIGSEGVorSIGBUScatcher
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	cmpl	$1, opMode
	jne	.LBB2_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.36, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB2_3
.LBB2_2:                                # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.37, %rsi
	movb	$0, %al
	callq	fprintf
.LBB2_3:                                # %if.end
	callq	showFileNames
	cmpl	$1, opMode
	jne	.LBB2_5
# %bb.4:                                # %if.then3
	movl	$3, %edi
	callq	cleanUpAndFail
.LBB2_5:                                # %if.else4
	callq	cadvise
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end2:
	.size	mySIGSEGVorSIGBUScatcher, .Lfunc_end2-mySIGSEGVorSIGBUScatcher
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copyFileName
	.type	copyFileName,@function
copyFileName:                           # @copyFileName
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_2
# %bb.1:                                # %func_copyFileName.2
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyFileName.2
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_copyFileName.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyFileName.11
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	copyFileName, .Lfunc_end3-copyFileName
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar
	.type	addFlagsFromEnvVar,@function
addFlagsFromEnvVar:                     # @addFlagsFromEnvVar
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_addFlagsFromEnvVar.29
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.29
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_addFlagsFromEnvVar.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.66
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_addFlagsFromEnvVar.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.82
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_addFlagsFromEnvVar.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_addFlagsFromEnvVar.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.113
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_addFlagsFromEnvVar.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.121
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_addFlagsFromEnvVar.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_addFlagsFromEnvVar.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.133
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_addFlagsFromEnvVar.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_addFlagsFromEnvVar.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_addFlagsFromEnvVar.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.145
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_addFlagsFromEnvVar.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.158
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_addFlagsFromEnvVar.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.174
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_addFlagsFromEnvVar.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.181
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_addFlagsFromEnvVar.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_addFlagsFromEnvVar.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.231
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	addFlagsFromEnvVar, .Lfunc_end4-addFlagsFromEnvVar
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString
	.type	snocString,@function
snocString:                             # @snocString
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_snocString.9
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_snocString.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_snocString.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.155
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_snocString.159
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.159
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_snocString.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.162
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_snocString.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.168
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_snocString.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.183
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_snocString.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.189
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_snocString.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.210
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_snocString.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.224
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_snocString.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.247
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_snocString.273
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.273
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_snocString.275
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.275
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_snocString.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.281
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_snocString.283
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.283
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_snocString.293
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.293
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	snocString, .Lfunc_end5-snocString
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function license
	.type	license,@function
license:                                # @license
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	stderr, %rbx
	callq	BZ2_bzlibVersion
	movq	%rbx, %rdi
	movabsq	$.L.str.49, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	license, .Lfunc_end6-license
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function usage
	.type	usage,@function
usage:                                  # @usage
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	stderr, %rbx
	callq	BZ2_bzlibVersion
	movq	-16(%rbp), %rcx
	movq	%rbx, %rdi
	movabsq	$.L.str.50, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	usage, .Lfunc_end7-usage
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function redundant
	.type	redundant,@function
redundant:                              # @redundant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-8(%rbp), %rcx
	movabsq	$.L.str.51, %rsi
	movb	$0, %al
	callq	fprintf
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	redundant, .Lfunc_end8-redundant
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mySignalCatcher
	.type	mySignalCatcher,@function
mySignalCatcher:                        # @mySignalCatcher
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.52, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end9:
	.size	mySignalCatcher, .Lfunc_end9-mySignalCatcher
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress
	.type	compress,@function
compress:                               # @compress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_compress.3
	movq	%rbx, %rdi
	callq	compress.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_compress.18
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_compress.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.54
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_compress.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_compress.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_compress.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_compress.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.146
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_compress.151
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.151
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_compress.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_compress.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.164
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_compress.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.176
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_compress.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.197
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_compress.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.236
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_compress.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.249
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_compress.251
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.251
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_compress.269
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.269
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	compress, .Lfunc_end10-compress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress
	.type	uncompress,@function
uncompress:                             # @uncompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_17
# %bb.1:                                # %func_uncompress.21
	movq	%rbx, %rdi
	callq	uncompress.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_uncompress.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.108
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_uncompress.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.112
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_uncompress.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_uncompress.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_uncompress.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.171
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_uncompress.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.193
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_uncompress.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.221
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %func_uncompress.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.229
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_10:                              # %func_uncompress.242
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.242
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_11:                              # %func_uncompress.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.245
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_12:                              # %func_uncompress.255
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.255
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_13:                              # %func_uncompress.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.261
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_14:                              # %func_uncompress.271
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.271
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_15:                              # %func_uncompress.276
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.276
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_16:                              # %func_uncompress.278
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.278
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB11_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB11_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB11_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB11_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB11_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB11_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB11_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB11_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB11_15
	jmp	.LBB11_16
.Lfunc_end11:
	.size	uncompress, .Lfunc_end11-uncompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function setExit
	.type	setExit,@function
setExit:                                # @setExit
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	exitValue, %eax
	jle	.LBB12_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %eax
	movl	%eax, exitValue
.LBB12_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end12:
	.size	setExit, .Lfunc_end12-setExit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf
	.type	testf,@function
testf:                                  # @testf
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_17
# %bb.1:                                # %func_testf.32
	movq	%rbx, %rdi
	callq	testf.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_testf.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_testf.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.49
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_testf.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_testf.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.119
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_testf.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_testf.132
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.132
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_testf.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.138
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %func_testf.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.147
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_testf.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_11:                              # %func_testf.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.178
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_12:                              # %func_testf.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.206
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_13:                              # %func_testf.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.211
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_14:                              # %func_testf.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.222
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_15:                              # %func_testf.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.241
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_16:                              # %func_testf.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.243
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB13_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB13_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB13_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB13_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB13_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB13_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB13_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB13_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB13_15
	jmp	.LBB13_16
.Lfunc_end13:
	.size	testf, .Lfunc_end13-testf
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function showFileNames
	.type	showFileNames,@function
showFileNames:                          # @showFileNames
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB14_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movabsq	$.L.str.38, %rsi
	movabsq	$inName, %rdx
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB14_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	showFileNames, .Lfunc_end14-showFileNames
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail
	.type	cleanUpAndFail,@function
cleanUpAndFail:                         # @cleanUpAndFail
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_cleanUpAndFail.15
	movl	%ebx, %edi
	callq	cleanUpAndFail.15
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_cleanUpAndFail.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_cleanUpAndFail.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_cleanUpAndFail.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_cleanUpAndFail.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.83
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_cleanUpAndFail.98
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	cleanUpAndFail, .Lfunc_end15-cleanUpAndFail
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cadvise
	.type	cadvise,@function
cadvise:                                # @cadvise
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB16_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movabsq	$.L.str.46, %rsi
	movb	$0, %al
	callq	fprintf
.LBB16_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	cadvise, .Lfunc_end16-cadvise
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mkCell
	.type	mkCell,@function
mkCell:                                 # @mkCell
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$16, %edi
	callq	myMalloc
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	mkCell, .Lfunc_end17-mkCell
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc
	.type	myMalloc,@function
myMalloc:                               # @myMalloc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB18_2
# %bb.1:                                # %func_myMalloc.57
	movl	%ebx, %edi
	callq	myMalloc.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_myMalloc.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	myMalloc.65
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	myMalloc, .Lfunc_end18-myMalloc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function outOfMemory
	.type	outOfMemory,@function
outOfMemory:                            # @outOfMemory
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.48, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end19:
	.size	outOfMemory, .Lfunc_end19-outOfMemory
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function panic
	.type	panic,@function
panic:                                  # @panic
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-8(%rbp), %rcx
	movabsq	$.L.str.71, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	movl	$3, %edi
	callq	cleanUpAndFail
.Lfunc_end20:
	.size	panic, .Lfunc_end20-panic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function containsDubiousChars
	.type	containsDubiousChars,@function
containsDubiousChars:                   # @containsDubiousChars
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	containsDubiousChars, .Lfunc_end21-containsDubiousChars
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists
	.type	fileExists,@function
fileExists:                             # @fileExists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB22_7
# %bb.1:                                # %func_fileExists.20
	movq	%rbx, %rdi
	callq	fileExists.20
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_fileExists.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.33
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_fileExists.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.47
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_fileExists.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.50
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_fileExists.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.61
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_fileExists.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.70
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
	jmp	.LBB22_6
.Lfunc_end22:
	.size	fileExists, .Lfunc_end22-fileExists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix
	.type	hasSuffix,@function
hasSuffix:                              # @hasSuffix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_17
# %bb.1:                                # %func_hasSuffix.7
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.7
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_hasSuffix.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.58
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_hasSuffix.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.67
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_hasSuffix.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.73
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_hasSuffix.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.124
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_hasSuffix.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.129
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_hasSuffix.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.154
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_hasSuffix.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.157
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %func_hasSuffix.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.169
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              # %func_hasSuffix.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.184
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_11:                              # %func_hasSuffix.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.219
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_12:                              # %func_hasSuffix.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.246
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_13:                              # %func_hasSuffix.256
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.256
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_14:                              # %func_hasSuffix.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.258
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_15:                              # %func_hasSuffix.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.259
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_16:                              # %func_hasSuffix.272
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.272
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB23_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB23_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB23_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB23_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB23_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB23_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB23_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB23_15
	jmp	.LBB23_16
.Lfunc_end23:
	.size	hasSuffix, .Lfunc_end23-hasSuffix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile
	.type	notAStandardFile,@function
notAStandardFile:                       # @notAStandardFile
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_17
# %bb.1:                                # %func_notAStandardFile.26
	movq	%rbx, %rdi
	callq	notAStandardFile.26
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_notAStandardFile.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.38
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_notAStandardFile.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.39
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_notAStandardFile.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.68
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_notAStandardFile.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.93
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_notAStandardFile.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.99
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_notAStandardFile.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.127
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_notAStandardFile.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.135
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %func_notAStandardFile.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.150
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_10:                              # %func_notAStandardFile.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.173
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_11:                              # %func_notAStandardFile.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.175
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_12:                              # %func_notAStandardFile.185
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.185
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_13:                              # %func_notAStandardFile.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.208
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_14:                              # %func_notAStandardFile.232
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.232
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_15:                              # %func_notAStandardFile.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.260
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_16:                              # %func_notAStandardFile.263
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.263
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB24_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB24_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB24_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB24_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB24_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB24_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB24_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB24_15
	jmp	.LBB24_16
.Lfunc_end24:
	.size	notAStandardFile, .Lfunc_end24-notAStandardFile
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks
	.type	countHardLinks,@function
countHardLinks:                         # @countHardLinks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_17
# %bb.1:                                # %func_countHardLinks.27
	movq	%rbx, %rdi
	callq	countHardLinks.27
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_countHardLinks.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_countHardLinks.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_countHardLinks.140
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.140
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_countHardLinks.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.186
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_countHardLinks.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.195
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_countHardLinks.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.199
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_countHardLinks.201
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.201
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %func_countHardLinks.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.218
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_10:                              # %func_countHardLinks.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.257
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_11:                              # %func_countHardLinks.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.262
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_12:                              # %func_countHardLinks.268
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_13:                              # %func_countHardLinks.274
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.274
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_14:                              # %func_countHardLinks.279
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.279
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_15:                              # %func_countHardLinks.280
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.280
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_16:                              # %func_countHardLinks.286
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.286
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB25_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB25_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB25_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB25_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB25_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB25_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB25_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB25_15
	jmp	.LBB25_16
.Lfunc_end25:
	.size	countHardLinks, .Lfunc_end25-countHardLinks
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo
	.type	saveInputFileMetaInfo,@function
saveInputFileMetaInfo:                  # @saveInputFileMetaInfo
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_saveInputFileMetaInfo.24
	movq	%rbx, %rdi
	callq	saveInputFileMetaInfo.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_saveInputFileMetaInfo.40
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	saveInputFileMetaInfo.40
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	saveInputFileMetaInfo, .Lfunc_end26-saveInputFileMetaInfo
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad
	.type	pad,@function
pad:                                    # @pad
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_pad.12
	movq	%rbx, %rdi
	callq	pad.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_pad.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	pad.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	pad, .Lfunc_end27-pad
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressStream
	.type	compressStream,@function
compressStream:                         # @compressStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_17
# %bb.1:                                # %func_compressStream.10
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_compressStream.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_compressStream.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_compressStream.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_compressStream.88
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_compressStream.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.110
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_compressStream.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_compressStream.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %func_compressStream.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.163
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_10:                              # %func_compressStream.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.177
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_11:                              # %func_compressStream.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.207
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_12:                              # %func_compressStream.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.214
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_13:                              # %func_compressStream.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_14:                              # %func_compressStream.239
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.239
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_15:                              # %func_compressStream.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.240
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_16:                              # %func_compressStream.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.250
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB28_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB28_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB28_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB28_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB28_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB28_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB28_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB28_15
	jmp	.LBB28_16
.Lfunc_end28:
	.size	compressStream, .Lfunc_end28-compressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile
	.type	applySavedMetaInfoToOutputFile,@function
applySavedMetaInfoToOutputFile:         # @applySavedMetaInfoToOutputFile
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_7
# %bb.1:                                # %func_applySavedMetaInfoToOutputFile.53
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_applySavedMetaInfoToOutputFile.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_applySavedMetaInfoToOutputFile.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.76
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_applySavedMetaInfoToOutputFile.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.116
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %func_applySavedMetaInfoToOutputFile.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_applySavedMetaInfoToOutputFile.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.152
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB29_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB29_5
	jmp	.LBB29_6
.Lfunc_end29:
	.size	applySavedMetaInfoToOutputFile, .Lfunc_end29-applySavedMetaInfoToOutputFile
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ioError
	.type	ioError,@function
ioError:                                # @ioError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.78, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	callq	showFileNames
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end30:
	.size	ioError, .Lfunc_end30-ioError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof
	.type	myfeof,@function
myfeof:                                 # @myfeof
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_7
# %bb.1:                                # %func_myfeof.5
	movq	%rbx, %rdi
	callq	myfeof.5
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_myfeof.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.22
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_myfeof.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.44
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_myfeof.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.56
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_myfeof.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.87
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_myfeof.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.111
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
	jmp	.LBB31_6
.Lfunc_end31:
	.size	myfeof, .Lfunc_end31-myfeof
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s
	.type	uInt64_from_UInt32s,@function
uInt64_from_UInt32s:                    # @uInt64_from_UInt32s
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB32_7
# %bb.1:                                # %func_uInt64_from_UInt32s.34
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_uInt64_from_UInt32s.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_uInt64_from_UInt32s.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.85
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_uInt64_from_UInt32s.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_uInt64_from_UInt32s.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.139
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_uInt64_from_UInt32s.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.191
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
	jmp	.LBB32_6
.Lfunc_end32:
	.size	uInt64_from_UInt32s, .Lfunc_end32-uInt64_from_UInt32s
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_to_double
	.type	uInt64_to_double,@function
uInt64_to_double:                       # @uInt64_to_double
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB33_17
# %bb.1:                                # %func_uInt64_to_double.8
	movq	%rbx, %rdi
	callq	uInt64_to_double.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_uInt64_to_double.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_uInt64_to_double.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_uInt64_to_double.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_uInt64_to_double.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_uInt64_to_double.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.75
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_uInt64_to_double.104
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.104
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_uInt64_to_double.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %func_uInt64_to_double.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.166
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_10:                              # %func_uInt64_to_double.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.196
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_11:                              # %func_uInt64_to_double.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.223
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_12:                              # %func_uInt64_to_double.235
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.235
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_13:                              # %func_uInt64_to_double.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.244
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_14:                              # %func_uInt64_to_double.290
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.290
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_15:                              # %func_uInt64_to_double.295
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.295
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_16:                              # %func_uInt64_to_double.296
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.296
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB33_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB33_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB33_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB33_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB33_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB33_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB33_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB33_15
	jmp	.LBB33_16
.Lfunc_end33:
	.size	uInt64_to_double, .Lfunc_end33-uInt64_to_double
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii
	.type	uInt64_toAscii,@function
uInt64_toAscii:                         # @uInt64_toAscii
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB34_17
# %bb.1:                                # %func_uInt64_toAscii.14
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_uInt64_toAscii.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_uInt64_toAscii.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.80
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_uInt64_toAscii.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.106
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_uInt64_toAscii.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.115
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_uInt64_toAscii.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.153
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_uInt64_toAscii.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_uInt64_toAscii.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.179
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %func_uInt64_toAscii.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.180
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_10:                              # %func_uInt64_toAscii.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_11:                              # %func_uInt64_toAscii.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.230
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_12:                              # %func_uInt64_toAscii.287
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.287
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_13:                              # %func_uInt64_toAscii.289
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.289
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_14:                              # %func_uInt64_toAscii.291
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.291
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_15:                              # %func_uInt64_toAscii.292
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.292
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_16:                              # %func_uInt64_toAscii.294
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.294
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB34_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB34_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB34_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB34_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB34_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB34_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB34_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB34_15
	jmp	.LBB34_16
.Lfunc_end34:
	.size	uInt64_toAscii, .Lfunc_end34-uInt64_toAscii
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function configError
	.type	configError,@function
configError:                            # @configError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movabsq	$.L.str.77, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$3, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end35:
	.size	configError, .Lfunc_end35-configError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10
	.type	uInt64_qrm10,@function
uInt64_qrm10:                           # @uInt64_qrm10
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_17
# %bb.1:                                # %func_uInt64_qrm10.4
	movq	%rbx, %rdi
	callq	uInt64_qrm10.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_uInt64_qrm10.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_uInt64_qrm10.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_uInt64_qrm10.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_uInt64_qrm10.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_uInt64_qrm10.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_uInt64_qrm10.270
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.270
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_uInt64_qrm10.277
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.277
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %func_uInt64_qrm10.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.282
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_10:                              # %func_uInt64_qrm10.284
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.284
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_11:                              # %func_uInt64_qrm10.285
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.285
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_12:                              # %func_uInt64_qrm10.288
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.288
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_13:                              # %func_uInt64_qrm10.297
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.297
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_14:                              # %func_uInt64_qrm10.298
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.298
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_15:                              # %func_uInt64_qrm10.299
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.299
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_16:                              # %func_uInt64_qrm10.300
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.300
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB36_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB36_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB36_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB36_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB36_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB36_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB36_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB36_15
	jmp	.LBB36_16
.Lfunc_end36:
	.size	uInt64_qrm10, .Lfunc_end36-uInt64_qrm10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero
	.type	uInt64_isZero,@function
uInt64_isZero:                          # @uInt64_isZero
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB37_7
# %bb.1:                                # %func_uInt64_isZero.55
	movq	%rbx, %rdi
	callq	uInt64_isZero.55
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_uInt64_isZero.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.79
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_uInt64_isZero.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.91
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_uInt64_isZero.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.95
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_uInt64_isZero.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.137
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_uInt64_isZero.149
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.149
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
	jmp	.LBB37_6
.Lfunc_end37:
	.size	uInt64_isZero, .Lfunc_end37-uInt64_isZero
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix
	.type	mapSuffix,@function
mapSuffix:                              # @mapSuffix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB38_17
# %bb.1:                                # %func_mapSuffix.42
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.42
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_mapSuffix.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.62
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_mapSuffix.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.64
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_mapSuffix.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.101
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_mapSuffix.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.107
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_mapSuffix.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.161
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_mapSuffix.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.192
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_mapSuffix.202
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.202
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %func_mapSuffix.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.213
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_10:                              # %func_mapSuffix.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.226
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_11:                              # %func_mapSuffix.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.228
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_12:                              # %func_mapSuffix.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.234
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_13:                              # %func_mapSuffix.238
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.238
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_14:                              # %func_mapSuffix.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.254
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_15:                              # %func_mapSuffix.265
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.265
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_16:                              # %func_mapSuffix.267
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.267
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB38_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB38_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB38_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB38_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB38_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB38_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB38_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB38_15
	jmp	.LBB38_16
.Lfunc_end38:
	.size	mapSuffix, .Lfunc_end38-mapSuffix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream
	.type	uncompressStream,@function
uncompressStream:                       # @uncompressStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB39_17
# %bb.1:                                # %func_uncompressStream.28
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.28
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_uncompressStream.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.45
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_uncompressStream.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.105
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_uncompressStream.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.182
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_uncompressStream.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.188
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_uncompressStream.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.194
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_uncompressStream.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.215
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_uncompressStream.217
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.217
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %func_uncompressStream.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.220
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_10:                              # %func_uncompressStream.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.225
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_11:                              # %func_uncompressStream.233
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.233
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_12:                              # %func_uncompressStream.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.237
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_13:                              # %func_uncompressStream.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.248
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_14:                              # %func_uncompressStream.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.252
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_15:                              # %func_uncompressStream.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.253
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_16:                              # %func_uncompressStream.266
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.266
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB39_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB39_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB39_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB39_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB39_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB39_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB39_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB39_15
	jmp	.LBB39_16
.Lfunc_end39:
	.size	uncompressStream, .Lfunc_end39-uncompressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function crcError
	.type	crcError,@function
crcError:                               # @crcError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.92, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	callq	cadvise
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end40:
	.size	crcError, .Lfunc_end40-crcError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressedStreamEOF
	.type	compressedStreamEOF,@function
compressedStreamEOF:                    # @compressedStreamEOF
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB41_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.93, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	callq	showFileNames
	callq	cadvise
.LBB41_2:                               # %if.end
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end41:
	.size	compressedStreamEOF, .Lfunc_end41-compressedStreamEOF
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream
	.type	testStream,@function
testStream:                             # @testStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB42_17
# %bb.1:                                # %func_testStream.1
	movq	%rbx, %rdi
	callq	testStream.1
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_testStream.6
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.6
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_3:                               # %func_testStream.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.31
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_4:                               # %func_testStream.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.46
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_5:                               # %func_testStream.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.78
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_6:                               # %func_testStream.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.96
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_7:                               # %func_testStream.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.97
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_8:                               # %func_testStream.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.120
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_9:                               # %func_testStream.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.134
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_10:                              # %func_testStream.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.141
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_11:                              # %func_testStream.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.143
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_12:                              # %func_testStream.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.187
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_13:                              # %func_testStream.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.198
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_14:                              # %func_testStream.203
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.203
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_15:                              # %func_testStream.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.204
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_16:                              # %func_testStream.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.209
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB42_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB42_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB42_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB42_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB42_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB42_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB42_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB42_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB42_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB42_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB42_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB42_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB42_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB42_15
	jmp	.LBB42_16
.Lfunc_end42:
	.size	testStream, .Lfunc_end42-testStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.1
	.type	testStream.1,@function
testStream.1:                           # @testStream.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$682572991, -56(%rbp)   # imm = 0x28AF3CBF
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB43_2
# %bb.1:                                # %if.then
	jmp	.LBB43_38
.LBB43_2:                               # %if.end
	jmp	.LBB43_3
.LBB43_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_7 Depth 2
                                        #     Child Loop BB43_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB43_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB43_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB43_6
.LBB43_5:                               # %if.then5
	jmp	.LBB43_32
.LBB43_6:                               # %if.end6
                                        #   in Loop: Header=BB43_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB43_7:                               # %while.cond7
                                        #   Parent Loop BB43_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB43_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB43_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB43_10
# %bb.9:                                # %if.then15
	jmp	.LBB43_32
.LBB43_10:                              # %if.end16
                                        #   in Loop: Header=BB43_7 Depth=2
	jmp	.LBB43_7
.LBB43_11:                              # %while.end
                                        #   in Loop: Header=BB43_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB43_13
# %bb.12:                               # %if.then19
	jmp	.LBB43_32
.LBB43_13:                              # %if.end20
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB43_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB43_15:                              # %if.end24
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB43_16:                              # %for.cond
                                        #   Parent Loop BB43_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB43_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB43_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_16
.LBB43_19:                              # %for.end
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB43_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB43_21:                              # %if.end33
                                        #   in Loop: Header=BB43_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB43_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB43_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB43_24
# %bb.23:                               # %if.then39
	jmp	.LBB43_25
.LBB43_24:                              # %if.end40
                                        #   in Loop: Header=BB43_3 Depth=1
	jmp	.LBB43_3
.LBB43_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB43_27
# %bb.26:                               # %if.then44
	jmp	.LBB43_38
.LBB43_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB43_29
# %bb.28:                               # %if.then49
	jmp	.LBB43_38
.LBB43_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB43_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB43_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB43_50
.LBB43_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB43_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB43_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB43_49
# %bb.35:                               # %if.end60
	movq	.LJTI43_0(,%rax,8), %rax
	jmpq	*%rax
.LBB43_36:                              # %sw.bb
	callq	configError
.LBB43_37:                              # %sw.bb61
	jmp	.LBB43_38
.LBB43_38:                              # %errhandler_io
	callq	ioError
.LBB43_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB43_50
.LBB43_40:                              # %sw.bb64
	callq	outOfMemory
.LBB43_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB43_50
.LBB43_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB43_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB43_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB43_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB43_50
.LBB43_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB43_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB43_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB43_50
.LBB43_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB43_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$682572991, -56(%rbp)   # imm = 0x28AF3CBF
	jne	.LBB43_52
.LBB43_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_51
.Lfunc_end43:
	.size	testStream.1, .Lfunc_end43-testStream.1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI43_0:
	.quad	.LBB43_36
	.quad	.LBB43_49
	.quad	.LBB43_41
	.quad	.LBB43_37
	.quad	.LBB43_42
	.quad	.LBB43_39
	.quad	.LBB43_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function copyFileName.2
	.type	copyFileName.2,@function
copyFileName.2:                         # @copyFileName.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$537647978, -12(%rbp)   # imm = 0x200BDB6A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpq	$1024, %rax             # imm = 0x400
	jbe	.LBB44_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	-8(%rbp), %rdx
	movabsq	$.L.str.47, %rsi
	movl	$1024, %ecx             # imm = 0x400
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB44_2:                               # %if.end
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$1024, %edx             # imm = 0x400
	callq	strncpy
	movq	-24(%rbp), %rax
	movb	$0, 1024(%rax)
	cmpl	$537647978, -12(%rbp)   # imm = 0x200BDB6A
	jne	.LBB44_4
.LBB44_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_3
.Lfunc_end44:
	.size	copyFileName.2, .Lfunc_end44-copyFileName.2
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.3
	.type	compress.3,@function
compress.3:                             # @compress.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$359514022, -64(%rbp)   # imm = 0x156DBFA6
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB45_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB45_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB45_3:                               # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB45_6
	jmp	.LBB45_4
.LBB45_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB45_8
	jmp	.LBB45_5
.LBB45_5:                               # %if.end
	subl	$3, %eax
	je	.LBB45_7
	jmp	.LBB45_9
.LBB45_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB45_9
.LBB45_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB45_9
.LBB45_8:                               # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB45_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB45_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB45_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB45_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB45_13:                              # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_14:                              # %if.end12
	cmpl	$1, srcMode
	je	.LBB45_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB45_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_17:                              # %if.end22
	movl	$0, -20(%rbp)
.LBB45_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB45_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB45_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB45_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB45_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB45_22:                              # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_23:                              # %if.end34
                                        #   in Loop: Header=BB45_18 Depth=1
	jmp	.LBB45_24
.LBB45_24:                              # %for.inc
                                        #   in Loop: Header=BB45_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_18
.LBB45_25:                              # %for.end
	cmpl	$3, srcMode
	je	.LBB45_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB45_30
.LBB45_27:                              # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB45_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_29:                              # %if.end45
	jmp	.LBB45_30
.LBB45_30:                              # %if.end46
	cmpl	$3, srcMode
	jne	.LBB45_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB45_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB45_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB45_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB45_35:                              # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_36:                              # %if.end60
	cmpl	$3, srcMode
	jne	.LBB45_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB45_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB45_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB45_41
.LBB45_40:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_41:                              # %if.end72
	jmp	.LBB45_42
.LBB45_42:                              # %if.end73
	cmpl	$3, srcMode
	jne	.LBB45_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB45_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB45_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_46:                              # %if.end86
	cmpl	$3, srcMode
	jne	.LBB45_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB45_48:                              # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB45_51
	jmp	.LBB45_49
.LBB45_49:                              # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB45_54
	jmp	.LBB45_50
.LBB45_50:                              # %if.end90
	subl	$3, %eax
	je	.LBB45_61
	jmp	.LBB45_70
.LBB45_51:                              # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB45_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_53:                              # %if.end98
	jmp	.LBB45_71
.LBB45_54:                              # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB45_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB45_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB45_57:                              # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_58:                              # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB45_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_60:                              # %if.end119
	jmp	.LBB45_71
.LBB45_61:                              # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB45_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB45_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB45_64:                              # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_65:                              # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB45_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB45_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB45_68:                              # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB45_80
.LBB45_69:                              # %if.end146
	jmp	.LBB45_71
.LBB45_70:                              # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB45_71:                              # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB45_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB45_73:                              # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB45_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB45_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB45_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB45_77:                              # %if.end163
	jmp	.LBB45_78
.LBB45_78:                              # %if.end164
	jmp	.LBB45_79
.LBB45_79:                              # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB45_80:                              # %return
	cmpl	$359514022, -64(%rbp)   # imm = 0x156DBFA6
	jne	.LBB45_82
.LBB45_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_81
.Lfunc_end45:
	.size	compress.3, .Lfunc_end45-compress.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.4
	.type	uInt64_qrm10.4,@function
uInt64_qrm10.4:                         # @uInt64_qrm10.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1928594548, -24(%rbp)  # imm = 0x72F40474
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1928594548, -24(%rbp)  # imm = 0x72F40474
	jne	.LBB46_6
.LBB46_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_5
.Lfunc_end46:
	.size	uInt64_qrm10.4, .Lfunc_end46-uInt64_qrm10.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.5
	.type	myfeof.5,@function
myfeof.5:                               # @myfeof.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$519294144, -20(%rbp)   # imm = 0x1EF3CCC0
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB47_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB47_3
.LBB47_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB47_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$519294144, -20(%rbp)   # imm = 0x1EF3CCC0
	jne	.LBB47_5
.LBB47_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_4
.Lfunc_end47:
	.size	myfeof.5, .Lfunc_end47-myfeof.5
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.6
	.type	testStream.6,@function
testStream.6:                           # @testStream.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1245765632, -52(%rbp)  # imm = 0x4A40E000
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB48_2
# %bb.1:                                # %if.then
	jmp	.LBB48_38
.LBB48_2:                               # %if.end
	jmp	.LBB48_3
.LBB48_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_7 Depth 2
                                        #     Child Loop BB48_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB48_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB48_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB48_6
.LBB48_5:                               # %if.then5
	jmp	.LBB48_32
.LBB48_6:                               # %if.end6
                                        #   in Loop: Header=BB48_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB48_7:                               # %while.cond7
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB48_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB48_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB48_10
# %bb.9:                                # %if.then15
	jmp	.LBB48_32
.LBB48_10:                              # %if.end16
                                        #   in Loop: Header=BB48_7 Depth=2
	jmp	.LBB48_7
.LBB48_11:                              # %while.end
                                        #   in Loop: Header=BB48_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB48_13
# %bb.12:                               # %if.then19
	jmp	.LBB48_32
.LBB48_13:                              # %if.end20
                                        #   in Loop: Header=BB48_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB48_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB48_15:                              # %if.end24
                                        #   in Loop: Header=BB48_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB48_16:                              # %for.cond
                                        #   Parent Loop BB48_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB48_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB48_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_16
.LBB48_19:                              # %for.end
                                        #   in Loop: Header=BB48_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB48_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB48_21:                              # %if.end33
                                        #   in Loop: Header=BB48_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB48_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB48_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB48_24
# %bb.23:                               # %if.then39
	jmp	.LBB48_25
.LBB48_24:                              # %if.end40
                                        #   in Loop: Header=BB48_3 Depth=1
	jmp	.LBB48_3
.LBB48_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB48_27
# %bb.26:                               # %if.then44
	jmp	.LBB48_38
.LBB48_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB48_29
# %bb.28:                               # %if.then49
	jmp	.LBB48_38
.LBB48_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB48_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB48_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB48_50
.LBB48_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB48_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB48_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB48_49
# %bb.35:                               # %if.end60
	movq	.LJTI48_0(,%rax,8), %rax
	jmpq	*%rax
.LBB48_36:                              # %sw.bb
	callq	configError
.LBB48_37:                              # %sw.bb61
	jmp	.LBB48_38
.LBB48_38:                              # %errhandler_io
	callq	ioError
.LBB48_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB48_50
.LBB48_40:                              # %sw.bb64
	callq	outOfMemory
.LBB48_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB48_50
.LBB48_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB48_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB48_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB48_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB48_50
.LBB48_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB48_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB48_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB48_50
.LBB48_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB48_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1245765632, -52(%rbp)  # imm = 0x4A40E000
	jne	.LBB48_52
.LBB48_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_51
.Lfunc_end48:
	.size	testStream.6, .Lfunc_end48-testStream.6
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI48_0:
	.quad	.LBB48_36
	.quad	.LBB48_49
	.quad	.LBB48_41
	.quad	.LBB48_37
	.quad	.LBB48_42
	.quad	.LBB48_39
	.quad	.LBB48_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function hasSuffix.7
	.type	hasSuffix.7,@function
hasSuffix.7:                            # @hasSuffix.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$210759181, -24(%rbp)   # imm = 0xC8FEE0D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB49_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB49_5
.LBB49_2:                               # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB49_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB49_5
.LBB49_4:                               # %if.end10
	movb	$0, -9(%rbp)
.LBB49_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$210759181, -24(%rbp)   # imm = 0xC8FEE0D
	jne	.LBB49_7
.LBB49_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_6
.Lfunc_end49:
	.size	hasSuffix.7, .Lfunc_end49-hasSuffix.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.8
.LCPI50_0:
	.quad	4607182418800017408     # double 1
.LCPI50_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.8,@function
uInt64_to_double.8:                     # @uInt64_to_double.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1270426248, -28(%rbp)  # imm = 0x4BB92A88
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB50_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1270426248, -28(%rbp)  # imm = 0x4BB92A88
	jne	.LBB50_6
.LBB50_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB50_5
.Lfunc_end50:
	.size	uInt64_to_double.8, .Lfunc_end50-uInt64_to_double.8
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.9
	.type	snocString.9,@function
snocString.9:                           # @snocString.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2077845204, -44(%rbp)  # imm = 0x7BD966D4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB51_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB51_6
.LBB51_2:                               # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB51_3:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB51_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB51_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB51_3
.LBB51_5:                               # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB51_6:                               # %return
	movq	-56(%rbp), %rbx
	cmpl	$2077845204, -44(%rbp)  # imm = 0x7BD966D4
	jne	.LBB51_8
.LBB51_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_7
.Lfunc_end51:
	.size	snocString.9, .Lfunc_end51-snocString.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.10
.LCPI52_0:
	.quad	4636737291354636288     # double 100
.LCPI52_1:
	.quad	4607182418800017408     # double 1
.LCPI52_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.10,@function
compressStream.10:                      # @compressStream.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1058653793, -76(%rbp)  # imm = 0x3F19C661
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB52_2
# %bb.1:                                # %if.then
	jmp	.LBB52_46
.LBB52_2:                               # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB52_4
# %bb.3:                                # %if.then3
	jmp	.LBB52_46
.LBB52_4:                               # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB52_6
# %bb.5:                                # %if.then6
	jmp	.LBB52_40
.LBB52_6:                               # %if.end7
	cmpl	$2, verbosity
	jl	.LBB52_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB52_8:                               # %if.end11
	jmp	.LBB52_9
.LBB52_9:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB52_11
# %bb.10:                               # %if.then14
	jmp	.LBB52_18
.LBB52_11:                              # %if.end15
                                        #   in Loop: Header=BB52_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB52_13
# %bb.12:                               # %if.then19
	jmp	.LBB52_46
.LBB52_13:                              # %if.end20
                                        #   in Loop: Header=BB52_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB52_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB52_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB52_15:                              # %if.end25
                                        #   in Loop: Header=BB52_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB52_17
# %bb.16:                               # %if.then28
	jmp	.LBB52_40
.LBB52_17:                              # %if.end29
                                        #   in Loop: Header=BB52_9 Depth=1
	jmp	.LBB52_9
.LBB52_18:                              # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB52_20
# %bb.19:                               # %if.then32
	jmp	.LBB52_40
.LBB52_20:                              # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB52_22
# %bb.21:                               # %if.then36
	jmp	.LBB52_46
.LBB52_22:                              # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB52_24
# %bb.23:                               # %if.then41
	jmp	.LBB52_46
.LBB52_24:                              # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB52_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB52_27
# %bb.26:                               # %if.then49
	jmp	.LBB52_46
.LBB52_27:                              # %if.end50
	jmp	.LBB52_28
.LBB52_28:                              # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB52_30
# %bb.29:                               # %if.then54
	jmp	.LBB52_46
.LBB52_30:                              # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB52_32
# %bb.31:                               # %if.then59
	jmp	.LBB52_46
.LBB52_32:                              # %if.end60
	cmpl	$1, verbosity
	jl	.LBB52_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB52_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB52_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB52_37
.LBB52_36:                              # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI52_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm3  # xmm3 = mem[0],zero
	vmovsd	.LCPI52_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB52_37:                              # %if.end80
	jmp	.LBB52_38
.LBB52_38:                              # %if.end81
	cmpl	$1058653793, -76(%rbp)  # imm = 0x3F19C661
	jne	.LBB52_48
.LBB52_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_40:                              # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB52_43
	jmp	.LBB52_41
.LBB52_41:                              # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB52_45
	jmp	.LBB52_42
.LBB52_42:                              # %errhandler
	subl	$-3, %eax
	je	.LBB52_44
	jmp	.LBB52_47
.LBB52_43:                              # %sw.bb
	callq	configError
.LBB52_44:                              # %sw.bb82
	callq	outOfMemory
.LBB52_45:                              # %sw.bb83
	jmp	.LBB52_46
.LBB52_46:                              # %errhandler_io
	callq	ioError
.LBB52_47:                              # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB52_48:                              # %func_exit
	callq	detect_breach
	jmp	.LBB52_39
.Lfunc_end52:
	.size	compressStream.10, .Lfunc_end52-compressStream.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copyFileName.11
	.type	copyFileName.11,@function
copyFileName.11:                        # @copyFileName.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1748017879, -12(%rbp)  # imm = 0x6830A2D7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpq	$1024, %rax             # imm = 0x400
	jbe	.LBB53_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	-8(%rbp), %rdx
	movabsq	$.L.str.47, %rsi
	movl	$1024, %ecx             # imm = 0x400
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB53_2:                               # %if.end
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$1024, %edx             # imm = 0x400
	callq	strncpy
	movq	-24(%rbp), %rax
	movb	$0, 1024(%rax)
	cmpl	$1748017879, -12(%rbp)  # imm = 0x6830A2D7
	jne	.LBB53_4
.LBB53_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_3
.Lfunc_end53:
	.size	copyFileName.11, .Lfunc_end53-copyFileName.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad.12
	.type	pad.12,@function
pad.12:                                 # @pad.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1481151217, -24(%rbp)  # imm = 0x584892F1
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	cmpl	longestFileName, %eax
	jl	.LBB54_2
# %bb.1:                                # %if.then
	jmp	.LBB54_7
.LBB54_2:                               # %if.end
	movl	$1, -20(%rbp)
.LBB54_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %r14d
	movl	longestFileName, %ebx
	movq	-32(%rbp), %rdi
	callq	strlen
	subl	%eax, %ebx
	cmpl	%ebx, %r14d
	jg	.LBB54_6
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB54_3 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.72, %rsi
	movb	$0, %al
	callq	fprintf
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB54_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_3
.LBB54_6:                               # %for.end.loopexit
	jmp	.LBB54_7
.LBB54_7:                               # %for.end
	cmpl	$1481151217, -24(%rbp)  # imm = 0x584892F1
	jne	.LBB54_9
.LBB54_8:
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_8
.Lfunc_end54:
	.size	pad.12, .Lfunc_end54-pad.12
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.13  # -- Begin function fopen_output_safely.13
	.p2align	4, 0x90
	.type	fopen_output_safely.13,@function
fopen_output_safely.13:                 # @fopen_output_safely.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$342288604, -16(%rbp)   # imm = 0x1466E8DC
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB55_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB55_5
.LBB55_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB55_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB55_4:                               # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB55_5:                               # %return
	movq	-24(%rbp), %rbx
	cmpl	$342288604, -16(%rbp)   # imm = 0x1466E8DC
	jne	.LBB55_7
.LBB55_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_6
.Lfunc_end55:
	.size	fopen_output_safely.13, .Lfunc_end55-fopen_output_safely.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.14
	.type	uInt64_toAscii.14,@function
uInt64_toAscii.14:                      # @uInt64_toAscii.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1915263157, -12(%rbp)  # imm = 0x722898B5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB56_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB56_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB56_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB56_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB56_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB56_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_4
.LBB56_7:                               # %for.end
	cmpl	$1915263157, -12(%rbp)  # imm = 0x722898B5
	jne	.LBB56_9
.LBB56_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_8
.Lfunc_end56:
	.size	uInt64_toAscii.14, .Lfunc_end56-uInt64_toAscii.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.15
	.type	cleanUpAndFail.15,@function
cleanUpAndFail.15:                      # @cleanUpAndFail.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1292770075, -12(%rbp)  # imm = 0x4D0E1B1B
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB57_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB57_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB57_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB57_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB57_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB57_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB57_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB57_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB57_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB57_10:                              # %if.end19
	jmp	.LBB57_12
.LBB57_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB57_12:                              # %if.end24
	jmp	.LBB57_13
.LBB57_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB57_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB57_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB57_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB57_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end57:
	.size	cleanUpAndFail.15, .Lfunc_end57-cleanUpAndFail.15
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.16  # -- Begin function fopen_output_safely.16
	.p2align	4, 0x90
	.type	fopen_output_safely.16,@function
fopen_output_safely.16:                 # @fopen_output_safely.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$757345396, -16(%rbp)   # imm = 0x2D242C74
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB58_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB58_5
.LBB58_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB58_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB58_4:                               # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB58_5:                               # %return
	movq	-32(%rbp), %rbx
	cmpl	$757345396, -16(%rbp)   # imm = 0x2D242C74
	jne	.LBB58_7
.LBB58_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_6
.Lfunc_end58:
	.size	fopen_output_safely.16, .Lfunc_end58-fopen_output_safely.16
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.17  # -- Begin function fopen_output_safely.17
	.p2align	4, 0x90
	.type	fopen_output_safely.17,@function
fopen_output_safely.17:                 # @fopen_output_safely.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1275998985, -16(%rbp)  # imm = 0x4C0E3309
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB59_5
.LBB59_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB59_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB59_4:                               # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB59_5:                               # %return
	movq	-32(%rbp), %rbx
	cmpl	$1275998985, -16(%rbp)  # imm = 0x4C0E3309
	jne	.LBB59_7
.LBB59_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_6
.Lfunc_end59:
	.size	fopen_output_safely.17, .Lfunc_end59-fopen_output_safely.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.18
	.type	compress.18,@function
compress.18:                            # @compress.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$927990695, -64(%rbp)   # imm = 0x375003A7
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB60_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB60_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB60_3:                               # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB60_6
	jmp	.LBB60_4
.LBB60_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB60_8
	jmp	.LBB60_5
.LBB60_5:                               # %if.end
	subl	$3, %eax
	je	.LBB60_7
	jmp	.LBB60_9
.LBB60_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB60_9
.LBB60_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB60_9
.LBB60_8:                               # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB60_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB60_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB60_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB60_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB60_13:                              # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_14:                              # %if.end12
	cmpl	$1, srcMode
	je	.LBB60_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB60_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_17:                              # %if.end22
	movl	$0, -20(%rbp)
.LBB60_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB60_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB60_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB60_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB60_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB60_22:                              # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_23:                              # %if.end34
                                        #   in Loop: Header=BB60_18 Depth=1
	jmp	.LBB60_24
.LBB60_24:                              # %for.inc
                                        #   in Loop: Header=BB60_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_18
.LBB60_25:                              # %for.end
	cmpl	$3, srcMode
	je	.LBB60_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB60_30
.LBB60_27:                              # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB60_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_29:                              # %if.end45
	jmp	.LBB60_30
.LBB60_30:                              # %if.end46
	cmpl	$3, srcMode
	jne	.LBB60_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB60_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB60_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB60_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB60_35:                              # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_36:                              # %if.end60
	cmpl	$3, srcMode
	jne	.LBB60_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB60_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB60_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB60_41
.LBB60_40:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_41:                              # %if.end72
	jmp	.LBB60_42
.LBB60_42:                              # %if.end73
	cmpl	$3, srcMode
	jne	.LBB60_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB60_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB60_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_46:                              # %if.end86
	cmpl	$3, srcMode
	jne	.LBB60_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB60_48:                              # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB60_51
	jmp	.LBB60_49
.LBB60_49:                              # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB60_54
	jmp	.LBB60_50
.LBB60_50:                              # %if.end90
	subl	$3, %eax
	je	.LBB60_61
	jmp	.LBB60_70
.LBB60_51:                              # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB60_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_53:                              # %if.end98
	jmp	.LBB60_71
.LBB60_54:                              # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB60_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB60_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB60_57:                              # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_58:                              # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB60_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_60:                              # %if.end119
	jmp	.LBB60_71
.LBB60_61:                              # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB60_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB60_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB60_64:                              # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_65:                              # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB60_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB60_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB60_68:                              # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB60_80
.LBB60_69:                              # %if.end146
	jmp	.LBB60_71
.LBB60_70:                              # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB60_71:                              # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB60_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB60_73:                              # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB60_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB60_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB60_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB60_77:                              # %if.end163
	jmp	.LBB60_78
.LBB60_78:                              # %if.end164
	jmp	.LBB60_79
.LBB60_79:                              # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB60_80:                              # %return
	cmpl	$927990695, -64(%rbp)   # imm = 0x375003A7
	jne	.LBB60_82
.LBB60_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_81
.Lfunc_end60:
	.size	compress.18, .Lfunc_end60-compress.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.19
.LCPI61_0:
	.quad	4607182418800017408     # double 1
.LCPI61_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.19,@function
uInt64_to_double.19:                    # @uInt64_to_double.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1231234709, -28(%rbp)  # imm = 0x49632695
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB61_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB61_1
.LBB61_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1231234709, -28(%rbp)  # imm = 0x49632695
	jne	.LBB61_6
.LBB61_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB61_5
.Lfunc_end61:
	.size	uInt64_to_double.19, .Lfunc_end61-uInt64_to_double.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.20
	.type	fileExists.20,@function
fileExists.20:                          # @fileExists.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1221193522, -28(%rbp)  # imm = 0x48C9EF32
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB62_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB62_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$1221193522, -28(%rbp)  # imm = 0x48C9EF32
	jne	.LBB62_4
.LBB62_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_3
.Lfunc_end62:
	.size	fileExists.20, .Lfunc_end62-fileExists.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.21
	.type	uncompress.21,@function
uncompress.21:                          # @uncompress.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$74313888, -64(%rbp)    # imm = 0x46DF0A0
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB63_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB63_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB63_3:                               # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB63_6
	jmp	.LBB63_4
.LBB63_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB63_14
	jmp	.LBB63_5
.LBB63_5:                               # %if.end
	subl	$3, %eax
	je	.LBB63_7
	jmp	.LBB63_15
.LBB63_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB63_15
.LBB63_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB63_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB63_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB63_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB63_11
# %bb.10:                               # %if.then6
	jmp	.LBB63_16
.LBB63_11:                              # %if.end7
                                        #   in Loop: Header=BB63_8 Depth=1
	jmp	.LBB63_12
.LBB63_12:                              # %for.inc
                                        #   in Loop: Header=BB63_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_8
.LBB63_13:                              # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB63_15
.LBB63_14:                              # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB63_15:                              # %sw.epilog
	jmp	.LBB63_16
.LBB63_16:                              # %zzz
	cmpl	$1, srcMode
	je	.LBB63_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB63_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB63_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB63_20:                              # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_21:                              # %if.end19
	cmpl	$1, srcMode
	je	.LBB63_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB63_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_24:                              # %if.end29
	cmpl	$3, srcMode
	je	.LBB63_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB63_29
.LBB63_26:                              # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB63_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_28:                              # %if.end40
	jmp	.LBB63_29
.LBB63_29:                              # %if.end41
	cmpl	$3, srcMode
	jne	.LBB63_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB63_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB63_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB63_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB63_34:                              # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_35:                              # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB63_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB63_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB63_38:                              # %if.end61
	jmp	.LBB63_39
.LBB63_39:                              # %if.end62
	cmpl	$3, srcMode
	jne	.LBB63_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB63_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB63_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB63_44
.LBB63_43:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_44:                              # %if.end74
	jmp	.LBB63_45
.LBB63_45:                              # %if.end75
	cmpl	$3, srcMode
	jne	.LBB63_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB63_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB63_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_49:                              # %if.end88
	cmpl	$3, srcMode
	jne	.LBB63_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB63_51:                              # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB63_54
	jmp	.LBB63_52
.LBB63_52:                              # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB63_57
	jmp	.LBB63_53
.LBB63_53:                              # %if.end92
	subl	$3, %eax
	je	.LBB63_62
	jmp	.LBB63_71
.LBB63_54:                              # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB63_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_56:                              # %if.end100
	jmp	.LBB63_72
.LBB63_57:                              # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB63_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB63_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB63_60:                              # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_61:                              # %if.end114
	jmp	.LBB63_72
.LBB63_62:                              # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB63_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB63_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB63_65:                              # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_66:                              # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB63_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB63_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB63_69:                              # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB63_95
.LBB63_70:                              # %if.end141
	jmp	.LBB63_72
.LBB63_71:                              # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB63_72:                              # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB63_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB63_74:                              # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB63_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB63_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB63_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB63_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB63_79:                              # %if.end161
	jmp	.LBB63_80
.LBB63_80:                              # %if.end162
	jmp	.LBB63_81
.LBB63_81:                              # %if.end163
	jmp	.LBB63_87
.LBB63_82:                              # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB63_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB63_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB63_85:                              # %if.end173
	jmp	.LBB63_86
.LBB63_86:                              # %if.end174
	jmp	.LBB63_87
.LBB63_87:                              # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB63_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB63_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB63_90:                              # %if.end182
	jmp	.LBB63_95
.LBB63_91:                              # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB63_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB63_94
.LBB63_93:                              # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB63_94:                              # %if.end190
	jmp	.LBB63_95
.LBB63_95:                              # %if.end191
	cmpl	$74313888, -64(%rbp)    # imm = 0x46DF0A0
	jne	.LBB63_97
.LBB63_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_97:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_96
.Lfunc_end63:
	.size	uncompress.21, .Lfunc_end63-uncompress.21
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.22
	.type	myfeof.22,@function
myfeof.22:                              # @myfeof.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$701575708, -20(%rbp)   # imm = 0x29D1321C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB64_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB64_3
.LBB64_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB64_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$701575708, -20(%rbp)   # imm = 0x29D1321C
	jne	.LBB64_5
.LBB64_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_4
.Lfunc_end64:
	.size	myfeof.22, .Lfunc_end64-myfeof.22
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.23  # -- Begin function fopen_output_safely.23
	.p2align	4, 0x90
	.type	fopen_output_safely.23,@function
fopen_output_safely.23:                 # @fopen_output_safely.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$814544345, -16(%rbp)   # imm = 0x308CF5D9
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB65_5
.LBB65_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB65_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB65_4:                               # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB65_5:                               # %return
	movq	-32(%rbp), %rbx
	cmpl	$814544345, -16(%rbp)   # imm = 0x308CF5D9
	jne	.LBB65_7
.LBB65_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_6
.Lfunc_end65:
	.size	fopen_output_safely.23, .Lfunc_end65-fopen_output_safely.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo.24
	.type	saveInputFileMetaInfo.24,@function
saveInputFileMetaInfo.24:               # @saveInputFileMetaInfo.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$973742862, -8(%rbp)    # imm = 0x3A0A230E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movabsq	$fileMetaInfo, %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB66_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB66_2:                               # %if.end
	cmpl	$973742862, -8(%rbp)    # imm = 0x3A0A230E
	jne	.LBB66_4
.LBB66_3:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_3
.Lfunc_end66:
	.size	saveInputFileMetaInfo.24, .Lfunc_end66-saveInputFileMetaInfo.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.25
	.type	cleanUpAndFail.25,@function
cleanUpAndFail.25:                      # @cleanUpAndFail.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$916140072, -12(%rbp)   # imm = 0x369B3028
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB67_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB67_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB67_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB67_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB67_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB67_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB67_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB67_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB67_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB67_10:                              # %if.end19
	jmp	.LBB67_12
.LBB67_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB67_12:                              # %if.end24
	jmp	.LBB67_13
.LBB67_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB67_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB67_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB67_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB67_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end67:
	.size	cleanUpAndFail.25, .Lfunc_end67-cleanUpAndFail.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.26
	.type	notAStandardFile.26,@function
notAStandardFile.26:                    # @notAStandardFile.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1242625066, -16(%rbp)  # imm = 0x4A10F42A
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB68_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB68_5
.LBB68_2:                               # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB68_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB68_5
.LBB68_4:                               # %if.end3
	movb	$1, -9(%rbp)
.LBB68_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1242625066, -16(%rbp)  # imm = 0x4A10F42A
	jne	.LBB68_7
.LBB68_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_6
.Lfunc_end68:
	.size	notAStandardFile.26, .Lfunc_end68-notAStandardFile.26
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.27
	.type	countHardLinks.27,@function
countHardLinks.27:                      # @countHardLinks.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$771116383, -20(%rbp)   # imm = 0x2DF64D5F
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB69_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB69_3
.LBB69_2:                               # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB69_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$771116383, -20(%rbp)   # imm = 0x2DF64D5F
	jne	.LBB69_5
.LBB69_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_4
.Lfunc_end69:
	.size	countHardLinks.27, .Lfunc_end69-countHardLinks.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.28
	.type	uncompressStream.28,@function
uncompressStream.28:                    # @uncompressStream.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$763103013, -68(%rbp)   # imm = 0x2D7C0725
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_2
# %bb.1:                                # %if.then
	jmp	.LBB70_66
.LBB70_2:                               # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_4
# %bb.3:                                # %if.then3
	jmp	.LBB70_66
.LBB70_4:                               # %if.end4
	jmp	.LBB70_5
.LBB70_5:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_9 Depth 2
                                        #     Child Loop BB70_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB70_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB70_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB70_8
.LBB70_7:                               # %if.then9
	jmp	.LBB70_62
.LBB70_8:                               # %if.end10
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB70_9:                               # %while.cond11
                                        #   Parent Loop BB70_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB70_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB70_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB70_12
# %bb.11:                               # %if.then19
	jmp	.LBB70_49
.LBB70_12:                              # %if.end20
                                        #   in Loop: Header=BB70_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB70_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB70_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB70_16
.LBB70_14:                              # %land.lhs.true
                                        #   in Loop: Header=BB70_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB70_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB70_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB70_16:                              # %if.end32
                                        #   in Loop: Header=BB70_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_18
# %bb.17:                               # %if.then35
	jmp	.LBB70_66
.LBB70_18:                              # %if.end36
                                        #   in Loop: Header=BB70_9 Depth=2
	jmp	.LBB70_9
.LBB70_19:                              # %while.end
                                        #   in Loop: Header=BB70_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB70_21
# %bb.20:                               # %if.then39
	jmp	.LBB70_62
.LBB70_21:                              # %if.end40
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB70_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB70_23:                              # %if.end44
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -40(%rbp)
.LBB70_24:                              # %for.cond
                                        #   Parent Loop BB70_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB70_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB70_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB70_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB70_24
.LBB70_27:                              # %for.end
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB70_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB70_29:                              # %if.end53
                                        #   in Loop: Header=BB70_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB70_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB70_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB70_32
# %bb.31:                               # %if.then60
	jmp	.LBB70_33
.LBB70_32:                              # %if.end61
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_5
.LBB70_33:                              # %while.end62
	jmp	.LBB70_34
.LBB70_34:                              # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_36
# %bb.35:                               # %if.then65
	jmp	.LBB70_66
.LBB70_36:                              # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB70_38
# %bb.37:                               # %if.then70
	jmp	.LBB70_66
.LBB70_38:                              # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_40
# %bb.39:                               # %if.then74
	jmp	.LBB70_66
.LBB70_40:                              # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB70_42
# %bb.41:                               # %if.then79
	jmp	.LBB70_66
.LBB70_42:                              # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB70_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB70_45
# %bb.44:                               # %if.then87
	jmp	.LBB70_66
.LBB70_45:                              # %if.end88
	jmp	.LBB70_46
.LBB70_46:                              # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB70_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB70_48:                              # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB70_80
.LBB70_49:                              # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB70_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB70_51:                              # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB70_53
# %bb.52:                               # %if.then100
	jmp	.LBB70_60
.LBB70_53:                              # %if.end101
                                        #   in Loop: Header=BB70_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_55
# %bb.54:                               # %if.then107
	jmp	.LBB70_66
.LBB70_55:                              # %if.end108
                                        #   in Loop: Header=BB70_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB70_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB70_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB70_57:                              # %if.end115
                                        #   in Loop: Header=BB70_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB70_59
# %bb.58:                               # %if.then118
	jmp	.LBB70_66
.LBB70_59:                              # %if.end119
                                        #   in Loop: Header=BB70_51 Depth=1
	jmp	.LBB70_51
.LBB70_60:                              # %while.end120
	jmp	.LBB70_34
.LBB70_61:                              # %if.end121
	jmp	.LBB70_62
.LBB70_62:                              # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB70_79
# %bb.63:                               # %errhandler
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_64:                              # %sw.bb
	callq	configError
.LBB70_65:                              # %sw.bb122
	jmp	.LBB70_66
.LBB70_66:                              # %errhandler_io
	callq	ioError
.LBB70_67:                              # %sw.bb123
	callq	crcError
.LBB70_68:                              # %sw.bb124
	callq	outOfMemory
.LBB70_69:                              # %sw.bb125
	callq	compressedStreamEOF
.LBB70_70:                              # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB70_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB70_72:                              # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB70_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB70_74:                              # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB70_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB70_80
.LBB70_76:                              # %if.else
	cmpb	$0, noisy
	je	.LBB70_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB70_78:                              # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB70_80
.LBB70_79:                              # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB70_80:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$763103013, -68(%rbp)   # imm = 0x2D7C0725
	jne	.LBB70_82
.LBB70_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_81
.Lfunc_end70:
	.size	uncompressStream.28, .Lfunc_end70-uncompressStream.28
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_64
	.quad	.LBB70_79
	.quad	.LBB70_69
	.quad	.LBB70_65
	.quad	.LBB70_70
	.quad	.LBB70_67
	.quad	.LBB70_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.29
	.type	addFlagsFromEnvVar.29,@function
addFlagsFromEnvVar.29:                  # @addFlagsFromEnvVar.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1091412563, -24(%rbp)  # imm = 0x410DA253
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB71_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB71_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_5 Depth 2
                                        #     Child Loop BB71_8 Depth 2
                                        #     Child Loop BB71_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB71_4
# %bb.3:                                # %if.then3
	jmp	.LBB71_21
.LBB71_4:                               # %if.end
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB71_5:                               # %while.cond4
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB71_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB71_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB71_5
.LBB71_7:                               # %while.end
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_8
.LBB71_8:                               # %while.cond12
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB71_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB71_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB71_10:                              # %land.end
                                        #   in Loop: Header=BB71_8 Depth=2
	testb	$1, %al
	jne	.LBB71_11
	jmp	.LBB71_12
.LBB71_11:                              # %while.body27
                                        #   in Loop: Header=BB71_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_8
.LBB71_12:                              # %while.end28
                                        #   in Loop: Header=BB71_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB71_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB71_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB71_15:                              # %if.end35
                                        #   in Loop: Header=BB71_2 Depth=1
	movl	$0, -8(%rbp)
.LBB71_16:                              # %for.cond
                                        #   Parent Loop BB71_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB71_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB71_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_16
.LBB71_19:                              # %for.end
                                        #   in Loop: Header=BB71_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB71_20:                              # %if.end46
                                        #   in Loop: Header=BB71_2 Depth=1
	jmp	.LBB71_2
.LBB71_21:                              # %while.end47
	jmp	.LBB71_22
.LBB71_22:                              # %if.end48
	cmpl	$1091412563, -24(%rbp)  # imm = 0x410DA253
	jne	.LBB71_24
.LBB71_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_23
.Lfunc_end71:
	.size	addFlagsFromEnvVar.29, .Lfunc_end71-addFlagsFromEnvVar.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad.30
	.type	pad.30,@function
pad.30:                                 # @pad.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$519956168, -24(%rbp)   # imm = 0x1EFDE6C8
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	cmpl	longestFileName, %eax
	jl	.LBB72_2
# %bb.1:                                # %if.then
	jmp	.LBB72_7
.LBB72_2:                               # %if.end
	movl	$1, -20(%rbp)
.LBB72_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %r14d
	movl	longestFileName, %ebx
	movq	-32(%rbp), %rdi
	callq	strlen
	subl	%eax, %ebx
	cmpl	%ebx, %r14d
	jg	.LBB72_6
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB72_3 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.72, %rsi
	movb	$0, %al
	callq	fprintf
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_3
.LBB72_6:                               # %for.end.loopexit
	jmp	.LBB72_7
.LBB72_7:                               # %for.end
	cmpl	$519956168, -24(%rbp)   # imm = 0x1EFDE6C8
	jne	.LBB72_9
.LBB72_8:
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_8
.Lfunc_end72:
	.size	pad.30, .Lfunc_end72-pad.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.31
	.type	testStream.31,@function
testStream.31:                          # @testStream.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$489151224, -52(%rbp)   # imm = 0x1D27DAF8
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB73_2
# %bb.1:                                # %if.then
	jmp	.LBB73_38
.LBB73_2:                               # %if.end
	jmp	.LBB73_3
.LBB73_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_7 Depth 2
                                        #     Child Loop BB73_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB73_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB73_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB73_6
.LBB73_5:                               # %if.then5
	jmp	.LBB73_32
.LBB73_6:                               # %if.end6
                                        #   in Loop: Header=BB73_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB73_7:                               # %while.cond7
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB73_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB73_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB73_10
# %bb.9:                                # %if.then15
	jmp	.LBB73_32
.LBB73_10:                              # %if.end16
                                        #   in Loop: Header=BB73_7 Depth=2
	jmp	.LBB73_7
.LBB73_11:                              # %while.end
                                        #   in Loop: Header=BB73_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB73_13
# %bb.12:                               # %if.then19
	jmp	.LBB73_32
.LBB73_13:                              # %if.end20
                                        #   in Loop: Header=BB73_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB73_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB73_15:                              # %if.end24
                                        #   in Loop: Header=BB73_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB73_16:                              # %for.cond
                                        #   Parent Loop BB73_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB73_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB73_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB73_16
.LBB73_19:                              # %for.end
                                        #   in Loop: Header=BB73_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB73_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB73_21:                              # %if.end33
                                        #   in Loop: Header=BB73_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB73_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB73_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB73_24
# %bb.23:                               # %if.then39
	jmp	.LBB73_25
.LBB73_24:                              # %if.end40
                                        #   in Loop: Header=BB73_3 Depth=1
	jmp	.LBB73_3
.LBB73_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB73_27
# %bb.26:                               # %if.then44
	jmp	.LBB73_38
.LBB73_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB73_29
# %bb.28:                               # %if.then49
	jmp	.LBB73_38
.LBB73_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB73_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB73_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB73_50
.LBB73_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB73_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB73_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB73_49
# %bb.35:                               # %if.end60
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_36:                              # %sw.bb
	callq	configError
.LBB73_37:                              # %sw.bb61
	jmp	.LBB73_38
.LBB73_38:                              # %errhandler_io
	callq	ioError
.LBB73_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB73_50
.LBB73_40:                              # %sw.bb64
	callq	outOfMemory
.LBB73_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB73_50
.LBB73_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB73_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB73_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB73_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB73_50
.LBB73_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB73_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB73_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB73_50
.LBB73_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB73_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$489151224, -52(%rbp)   # imm = 0x1D27DAF8
	jne	.LBB73_52
.LBB73_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_51
.Lfunc_end73:
	.size	testStream.31, .Lfunc_end73-testStream.31
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_36
	.quad	.LBB73_49
	.quad	.LBB73_41
	.quad	.LBB73_37
	.quad	.LBB73_42
	.quad	.LBB73_39
	.quad	.LBB73_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function testf.32
	.type	testf.32,@function
testf.32:                               # @testf.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2132445986, -44(%rbp)  # imm = 0x7F1A8B22
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB74_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB74_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB74_3:                               # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB74_6
	jmp	.LBB74_4
.LBB74_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB74_8
	jmp	.LBB74_5
.LBB74_5:                               # %if.end
	subl	$3, %eax
	je	.LBB74_7
	jmp	.LBB74_9
.LBB74_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB74_9
.LBB74_7:                               # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB74_9
.LBB74_8:                               # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB74_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB74_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB74_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB74_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB74_13:                              # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB74_37
.LBB74_14:                              # %if.end11
	cmpl	$1, srcMode
	je	.LBB74_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB74_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB74_37
.LBB74_17:                              # %if.end21
	cmpl	$1, srcMode
	je	.LBB74_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB74_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB74_37
.LBB74_20:                              # %if.end30
	jmp	.LBB74_21
.LBB74_21:                              # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB74_23
	jmp	.LBB74_22
.LBB74_22:                              # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB74_26
	jmp	.LBB74_29
.LBB74_23:                              # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB74_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB74_37
.LBB74_25:                              # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB74_30
.LBB74_26:                              # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB74_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB74_37
.LBB74_28:                              # %if.end48
	jmp	.LBB74_30
.LBB74_29:                              # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB74_30:                              # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB74_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB74_32:                              # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB74_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB74_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB74_35:                              # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB74_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB74_37:                              # %if.end67
	cmpl	$2132445986, -44(%rbp)  # imm = 0x7F1A8B22
	jne	.LBB74_39
.LBB74_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_38
.Lfunc_end74:
	.size	testf.32, .Lfunc_end74-testf.32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.33
	.type	fileExists.33,@function
fileExists.33:                          # @fileExists.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1314486664, -28(%rbp)  # imm = 0x4E597988
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB75_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB75_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$1314486664, -28(%rbp)  # imm = 0x4E597988
	jne	.LBB75_4
.LBB75_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_3
.Lfunc_end75:
	.size	fileExists.33, .Lfunc_end75-fileExists.33
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.34
	.type	uInt64_from_UInt32s.34,@function
uInt64_from_UInt32s.34:                 # @uInt64_from_UInt32s.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1829019138, -20(%rbp)  # imm = 0x6D049E02
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$1829019138, -20(%rbp)  # imm = 0x6D049E02
	jne	.LBB76_2
.LBB76_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_1
.Lfunc_end76:
	.size	uInt64_from_UInt32s.34, .Lfunc_end76-uInt64_from_UInt32s.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.35
	.type	cleanUpAndFail.35,@function
cleanUpAndFail.35:                      # @cleanUpAndFail.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$487171357, -12(%rbp)   # imm = 0x1D09A51D
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB77_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB77_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB77_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB77_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB77_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB77_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB77_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB77_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB77_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB77_10:                              # %if.end19
	jmp	.LBB77_12
.LBB77_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB77_12:                              # %if.end24
	jmp	.LBB77_13
.LBB77_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB77_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB77_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB77_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB77_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end77:
	.size	cleanUpAndFail.35, .Lfunc_end77-cleanUpAndFail.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.36
.LCPI78_0:
	.quad	4607182418800017408     # double 1
.LCPI78_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.36,@function
uInt64_to_double.36:                    # @uInt64_to_double.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$719950829, -28(%rbp)   # imm = 0x2AE993ED
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$719950829, -28(%rbp)   # imm = 0x2AE993ED
	jne	.LBB78_6
.LBB78_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB78_5
.Lfunc_end78:
	.size	uInt64_to_double.36, .Lfunc_end78-uInt64_to_double.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.37
	.type	countHardLinks.37,@function
countHardLinks.37:                      # @countHardLinks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1833035895, -20(%rbp)  # imm = 0x6D41E877
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB79_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB79_3
.LBB79_2:                               # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB79_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1833035895, -20(%rbp)  # imm = 0x6D41E877
	jne	.LBB79_5
.LBB79_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_4
.Lfunc_end79:
	.size	countHardLinks.37, .Lfunc_end79-countHardLinks.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.38
	.type	notAStandardFile.38,@function
notAStandardFile.38:                    # @notAStandardFile.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$149734273, -16(%rbp)   # imm = 0x8ECC381
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB80_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB80_5
.LBB80_2:                               # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB80_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB80_5
.LBB80_4:                               # %if.end3
	movb	$1, -9(%rbp)
.LBB80_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$149734273, -16(%rbp)   # imm = 0x8ECC381
	jne	.LBB80_7
.LBB80_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_6
.Lfunc_end80:
	.size	notAStandardFile.38, .Lfunc_end80-notAStandardFile.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.39
	.type	notAStandardFile.39,@function
notAStandardFile.39:                    # @notAStandardFile.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1968615560, -16(%rbp)  # imm = 0x7556B088
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB81_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB81_5
.LBB81_2:                               # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB81_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB81_5
.LBB81_4:                               # %if.end3
	movb	$1, -9(%rbp)
.LBB81_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1968615560, -16(%rbp)  # imm = 0x7556B088
	jne	.LBB81_7
.LBB81_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_6
.Lfunc_end81:
	.size	notAStandardFile.39, .Lfunc_end81-notAStandardFile.39
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo.40
	.type	saveInputFileMetaInfo.40,@function
saveInputFileMetaInfo.40:               # @saveInputFileMetaInfo.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$862636954, -8(%rbp)    # imm = 0x336ACB9A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movabsq	$fileMetaInfo, %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB82_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB82_2:                               # %if.end
	cmpl	$862636954, -8(%rbp)    # imm = 0x336ACB9A
	jne	.LBB82_4
.LBB82_3:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_3
.Lfunc_end82:
	.size	saveInputFileMetaInfo.40, .Lfunc_end82-saveInputFileMetaInfo.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.41
.LCPI83_0:
	.quad	4636737291354636288     # double 100
.LCPI83_1:
	.quad	4607182418800017408     # double 1
.LCPI83_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.41,@function
compressStream.41:                      # @compressStream.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$312513692, -76(%rbp)   # imm = 0x12A0949C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB83_2
# %bb.1:                                # %if.then
	jmp	.LBB83_46
.LBB83_2:                               # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB83_4
# %bb.3:                                # %if.then3
	jmp	.LBB83_46
.LBB83_4:                               # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB83_6
# %bb.5:                                # %if.then6
	jmp	.LBB83_40
.LBB83_6:                               # %if.end7
	cmpl	$2, verbosity
	jl	.LBB83_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB83_8:                               # %if.end11
	jmp	.LBB83_9
.LBB83_9:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB83_11
# %bb.10:                               # %if.then14
	jmp	.LBB83_18
.LBB83_11:                              # %if.end15
                                        #   in Loop: Header=BB83_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB83_13
# %bb.12:                               # %if.then19
	jmp	.LBB83_46
.LBB83_13:                              # %if.end20
                                        #   in Loop: Header=BB83_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB83_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB83_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB83_15:                              # %if.end25
                                        #   in Loop: Header=BB83_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB83_17
# %bb.16:                               # %if.then28
	jmp	.LBB83_40
.LBB83_17:                              # %if.end29
                                        #   in Loop: Header=BB83_9 Depth=1
	jmp	.LBB83_9
.LBB83_18:                              # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB83_20
# %bb.19:                               # %if.then32
	jmp	.LBB83_40
.LBB83_20:                              # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB83_22
# %bb.21:                               # %if.then36
	jmp	.LBB83_46
.LBB83_22:                              # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB83_24
# %bb.23:                               # %if.then41
	jmp	.LBB83_46
.LBB83_24:                              # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB83_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB83_27
# %bb.26:                               # %if.then49
	jmp	.LBB83_46
.LBB83_27:                              # %if.end50
	jmp	.LBB83_28
.LBB83_28:                              # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB83_30
# %bb.29:                               # %if.then54
	jmp	.LBB83_46
.LBB83_30:                              # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB83_32
# %bb.31:                               # %if.then59
	jmp	.LBB83_46
.LBB83_32:                              # %if.end60
	cmpl	$1, verbosity
	jl	.LBB83_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB83_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB83_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB83_37
.LBB83_36:                              # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI83_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm3  # xmm3 = mem[0],zero
	vmovsd	.LCPI83_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB83_37:                              # %if.end80
	jmp	.LBB83_38
.LBB83_38:                              # %if.end81
	cmpl	$312513692, -76(%rbp)   # imm = 0x12A0949C
	jne	.LBB83_48
.LBB83_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_40:                              # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB83_43
	jmp	.LBB83_41
.LBB83_41:                              # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB83_45
	jmp	.LBB83_42
.LBB83_42:                              # %errhandler
	subl	$-3, %eax
	je	.LBB83_44
	jmp	.LBB83_47
.LBB83_43:                              # %sw.bb
	callq	configError
.LBB83_44:                              # %sw.bb82
	callq	outOfMemory
.LBB83_45:                              # %sw.bb83
	jmp	.LBB83_46
.LBB83_46:                              # %errhandler_io
	callq	ioError
.LBB83_47:                              # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB83_48:                              # %func_exit
	callq	detect_breach
	jmp	.LBB83_39
.Lfunc_end83:
	.size	compressStream.41, .Lfunc_end83-compressStream.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.42
	.type	mapSuffix.42,@function
mapSuffix.42:                           # @mapSuffix.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2009909410, -36(%rbp)  # imm = 0x77CCC8A2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB84_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB84_3
.LBB84_2:                               # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB84_3:                               # %return
	movb	-17(%rbp), %bl
	cmpl	$2009909410, -36(%rbp)  # imm = 0x77CCC8A2
	jne	.LBB84_5
.LBB84_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_4
.Lfunc_end84:
	.size	mapSuffix.42, .Lfunc_end84-mapSuffix.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.43
	.type	uInt64_toAscii.43,@function
uInt64_toAscii.43:                      # @uInt64_toAscii.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1441297214, -12(%rbp)  # imm = 0x55E8733E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB85_1:                               # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB85_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB85_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB85_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB85_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB85_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB85_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_4
.LBB85_7:                               # %for.end
	cmpl	$1441297214, -12(%rbp)  # imm = 0x55E8733E
	jne	.LBB85_9
.LBB85_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_8
.Lfunc_end85:
	.size	uInt64_toAscii.43, .Lfunc_end85-uInt64_toAscii.43
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.44
	.type	myfeof.44,@function
myfeof.44:                              # @myfeof.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$869143374, -20(%rbp)   # imm = 0x33CE134E
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB86_3
.LBB86_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB86_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$869143374, -20(%rbp)   # imm = 0x33CE134E
	jne	.LBB86_5
.LBB86_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_4
.Lfunc_end86:
	.size	myfeof.44, .Lfunc_end86-myfeof.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.45
	.type	uncompressStream.45,@function
uncompressStream.45:                    # @uncompressStream.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$44063564, -68(%rbp)    # imm = 0x2A05B4C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_2
# %bb.1:                                # %if.then
	jmp	.LBB87_66
.LBB87_2:                               # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_4
# %bb.3:                                # %if.then3
	jmp	.LBB87_66
.LBB87_4:                               # %if.end4
	jmp	.LBB87_5
.LBB87_5:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_9 Depth 2
                                        #     Child Loop BB87_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB87_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB87_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB87_8
.LBB87_7:                               # %if.then9
	jmp	.LBB87_62
.LBB87_8:                               # %if.end10
                                        #   in Loop: Header=BB87_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB87_9:                               # %while.cond11
                                        #   Parent Loop BB87_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB87_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB87_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB87_12
# %bb.11:                               # %if.then19
	jmp	.LBB87_49
.LBB87_12:                              # %if.end20
                                        #   in Loop: Header=BB87_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB87_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB87_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB87_16
.LBB87_14:                              # %land.lhs.true
                                        #   in Loop: Header=BB87_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB87_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB87_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB87_16:                              # %if.end32
                                        #   in Loop: Header=BB87_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_18
# %bb.17:                               # %if.then35
	jmp	.LBB87_66
.LBB87_18:                              # %if.end36
                                        #   in Loop: Header=BB87_9 Depth=2
	jmp	.LBB87_9
.LBB87_19:                              # %while.end
                                        #   in Loop: Header=BB87_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB87_21
# %bb.20:                               # %if.then39
	jmp	.LBB87_62
.LBB87_21:                              # %if.end40
                                        #   in Loop: Header=BB87_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB87_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB87_23:                              # %if.end44
                                        #   in Loop: Header=BB87_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB87_24:                              # %for.cond
                                        #   Parent Loop BB87_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB87_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB87_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB87_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB87_24
.LBB87_27:                              # %for.end
                                        #   in Loop: Header=BB87_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB87_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB87_29:                              # %if.end53
                                        #   in Loop: Header=BB87_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB87_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB87_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB87_32
# %bb.31:                               # %if.then60
	jmp	.LBB87_33
.LBB87_32:                              # %if.end61
                                        #   in Loop: Header=BB87_5 Depth=1
	jmp	.LBB87_5
.LBB87_33:                              # %while.end62
	jmp	.LBB87_34
.LBB87_34:                              # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_36
# %bb.35:                               # %if.then65
	jmp	.LBB87_66
.LBB87_36:                              # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB87_38
# %bb.37:                               # %if.then70
	jmp	.LBB87_66
.LBB87_38:                              # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_40
# %bb.39:                               # %if.then74
	jmp	.LBB87_66
.LBB87_40:                              # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB87_42
# %bb.41:                               # %if.then79
	jmp	.LBB87_66
.LBB87_42:                              # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB87_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB87_45
# %bb.44:                               # %if.then87
	jmp	.LBB87_66
.LBB87_45:                              # %if.end88
	jmp	.LBB87_46
.LBB87_46:                              # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB87_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB87_48:                              # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB87_80
.LBB87_49:                              # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB87_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB87_51:                              # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB87_53
# %bb.52:                               # %if.then100
	jmp	.LBB87_60
.LBB87_53:                              # %if.end101
                                        #   in Loop: Header=BB87_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_55
# %bb.54:                               # %if.then107
	jmp	.LBB87_66
.LBB87_55:                              # %if.end108
                                        #   in Loop: Header=BB87_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB87_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB87_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB87_57:                              # %if.end115
                                        #   in Loop: Header=BB87_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB87_59
# %bb.58:                               # %if.then118
	jmp	.LBB87_66
.LBB87_59:                              # %if.end119
                                        #   in Loop: Header=BB87_51 Depth=1
	jmp	.LBB87_51
.LBB87_60:                              # %while.end120
	jmp	.LBB87_34
.LBB87_61:                              # %if.end121
	jmp	.LBB87_62
.LBB87_62:                              # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB87_79
# %bb.63:                               # %errhandler
	movq	.LJTI87_0(,%rax,8), %rax
	jmpq	*%rax
.LBB87_64:                              # %sw.bb
	callq	configError
.LBB87_65:                              # %sw.bb122
	jmp	.LBB87_66
.LBB87_66:                              # %errhandler_io
	callq	ioError
.LBB87_67:                              # %sw.bb123
	callq	crcError
.LBB87_68:                              # %sw.bb124
	callq	outOfMemory
.LBB87_69:                              # %sw.bb125
	callq	compressedStreamEOF
.LBB87_70:                              # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB87_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB87_72:                              # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB87_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB87_74:                              # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB87_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB87_80
.LBB87_76:                              # %if.else
	cmpb	$0, noisy
	je	.LBB87_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB87_78:                              # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB87_80
.LBB87_79:                              # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB87_80:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$44063564, -68(%rbp)    # imm = 0x2A05B4C
	jne	.LBB87_82
.LBB87_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_81
.Lfunc_end87:
	.size	uncompressStream.45, .Lfunc_end87-uncompressStream.45
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI87_0:
	.quad	.LBB87_64
	.quad	.LBB87_79
	.quad	.LBB87_69
	.quad	.LBB87_65
	.quad	.LBB87_70
	.quad	.LBB87_67
	.quad	.LBB87_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function testStream.46
	.type	testStream.46,@function
testStream.46:                          # @testStream.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1019511782, -56(%rbp)  # imm = 0x3CC483E6
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB88_2
# %bb.1:                                # %if.then
	jmp	.LBB88_38
.LBB88_2:                               # %if.end
	jmp	.LBB88_3
.LBB88_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
                                        #     Child Loop BB88_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB88_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB88_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB88_6
.LBB88_5:                               # %if.then5
	jmp	.LBB88_32
.LBB88_6:                               # %if.end6
                                        #   in Loop: Header=BB88_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB88_7:                               # %while.cond7
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB88_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB88_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB88_10
# %bb.9:                                # %if.then15
	jmp	.LBB88_32
.LBB88_10:                              # %if.end16
                                        #   in Loop: Header=BB88_7 Depth=2
	jmp	.LBB88_7
.LBB88_11:                              # %while.end
                                        #   in Loop: Header=BB88_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB88_13
# %bb.12:                               # %if.then19
	jmp	.LBB88_32
.LBB88_13:                              # %if.end20
                                        #   in Loop: Header=BB88_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB88_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB88_15:                              # %if.end24
                                        #   in Loop: Header=BB88_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB88_16:                              # %for.cond
                                        #   Parent Loop BB88_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB88_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB88_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB88_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_16
.LBB88_19:                              # %for.end
                                        #   in Loop: Header=BB88_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB88_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB88_21:                              # %if.end33
                                        #   in Loop: Header=BB88_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB88_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB88_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB88_24
# %bb.23:                               # %if.then39
	jmp	.LBB88_25
.LBB88_24:                              # %if.end40
                                        #   in Loop: Header=BB88_3 Depth=1
	jmp	.LBB88_3
.LBB88_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB88_27
# %bb.26:                               # %if.then44
	jmp	.LBB88_38
.LBB88_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB88_29
# %bb.28:                               # %if.then49
	jmp	.LBB88_38
.LBB88_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB88_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB88_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB88_50
.LBB88_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB88_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB88_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB88_49
# %bb.35:                               # %if.end60
	movq	.LJTI88_0(,%rax,8), %rax
	jmpq	*%rax
.LBB88_36:                              # %sw.bb
	callq	configError
.LBB88_37:                              # %sw.bb61
	jmp	.LBB88_38
.LBB88_38:                              # %errhandler_io
	callq	ioError
.LBB88_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB88_50
.LBB88_40:                              # %sw.bb64
	callq	outOfMemory
.LBB88_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB88_50
.LBB88_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB88_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB88_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB88_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB88_50
.LBB88_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB88_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB88_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB88_50
.LBB88_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB88_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1019511782, -56(%rbp)  # imm = 0x3CC483E6
	jne	.LBB88_52
.LBB88_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_51
.Lfunc_end88:
	.size	testStream.46, .Lfunc_end88-testStream.46
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI88_0:
	.quad	.LBB88_36
	.quad	.LBB88_49
	.quad	.LBB88_41
	.quad	.LBB88_37
	.quad	.LBB88_42
	.quad	.LBB88_39
	.quad	.LBB88_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function fileExists.47
	.type	fileExists.47,@function
fileExists.47:                          # @fileExists.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$46127992, -28(%rbp)    # imm = 0x2BFDB78
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB89_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB89_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$46127992, -28(%rbp)    # imm = 0x2BFDB78
	jne	.LBB89_4
.LBB89_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_3
.Lfunc_end89:
	.size	fileExists.47, .Lfunc_end89-fileExists.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.48
	.type	testf.48,@function
testf.48:                               # @testf.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$60861098, -44(%rbp)    # imm = 0x3A0AAAA
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB90_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB90_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB90_3:                               # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB90_6
	jmp	.LBB90_4
.LBB90_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB90_8
	jmp	.LBB90_5
.LBB90_5:                               # %if.end
	subl	$3, %eax
	je	.LBB90_7
	jmp	.LBB90_9
.LBB90_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB90_9
.LBB90_7:                               # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB90_9
.LBB90_8:                               # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB90_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB90_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB90_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB90_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB90_13:                              # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB90_37
.LBB90_14:                              # %if.end11
	cmpl	$1, srcMode
	je	.LBB90_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB90_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB90_37
.LBB90_17:                              # %if.end21
	cmpl	$1, srcMode
	je	.LBB90_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB90_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB90_37
.LBB90_20:                              # %if.end30
	jmp	.LBB90_21
.LBB90_21:                              # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB90_23
	jmp	.LBB90_22
.LBB90_22:                              # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB90_26
	jmp	.LBB90_29
.LBB90_23:                              # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB90_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB90_37
.LBB90_25:                              # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB90_30
.LBB90_26:                              # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB90_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB90_37
.LBB90_28:                              # %if.end48
	jmp	.LBB90_30
.LBB90_29:                              # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB90_30:                              # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB90_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB90_32:                              # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB90_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB90_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB90_35:                              # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB90_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB90_37:                              # %if.end67
	cmpl	$60861098, -44(%rbp)    # imm = 0x3A0AAAA
	jne	.LBB90_39
.LBB90_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_38
.Lfunc_end90:
	.size	testf.48, .Lfunc_end90-testf.48
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.49
	.type	testf.49,@function
testf.49:                               # @testf.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$793637929, -44(%rbp)   # imm = 0x2F4DF429
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB91_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB91_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB91_3:                               # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB91_6
	jmp	.LBB91_4
.LBB91_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB91_8
	jmp	.LBB91_5
.LBB91_5:                               # %if.end
	subl	$3, %eax
	je	.LBB91_7
	jmp	.LBB91_9
.LBB91_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB91_9
.LBB91_7:                               # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB91_9
.LBB91_8:                               # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB91_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB91_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB91_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB91_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB91_13:                              # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB91_37
.LBB91_14:                              # %if.end11
	cmpl	$1, srcMode
	je	.LBB91_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB91_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB91_37
.LBB91_17:                              # %if.end21
	cmpl	$1, srcMode
	je	.LBB91_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB91_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB91_37
.LBB91_20:                              # %if.end30
	jmp	.LBB91_21
.LBB91_21:                              # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB91_23
	jmp	.LBB91_22
.LBB91_22:                              # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB91_26
	jmp	.LBB91_29
.LBB91_23:                              # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB91_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB91_37
.LBB91_25:                              # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB91_30
.LBB91_26:                              # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB91_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB91_37
.LBB91_28:                              # %if.end48
	jmp	.LBB91_30
.LBB91_29:                              # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB91_30:                              # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB91_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB91_32:                              # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB91_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB91_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB91_35:                              # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB91_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB91_37:                              # %if.end67
	cmpl	$793637929, -44(%rbp)   # imm = 0x2F4DF429
	jne	.LBB91_39
.LBB91_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_39:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_38
.Lfunc_end91:
	.size	testf.49, .Lfunc_end91-testf.49
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.50
	.type	fileExists.50,@function
fileExists.50:                          # @fileExists.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$272961210, -28(%rbp)   # imm = 0x10450EBA
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB92_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB92_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$272961210, -28(%rbp)   # imm = 0x10450EBA
	jne	.LBB92_4
.LBB92_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_3
.Lfunc_end92:
	.size	fileExists.50, .Lfunc_end92-fileExists.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.51
.LCPI93_0:
	.quad	4607182418800017408     # double 1
.LCPI93_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.51,@function
uInt64_to_double.51:                    # @uInt64_to_double.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI93_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1633970499, -28(%rbp)  # imm = 0x61646943
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB93_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB93_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB93_1 Depth=1
	vmovsd	.LCPI93_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB93_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_1
.LBB93_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1633970499, -28(%rbp)  # imm = 0x61646943
	jne	.LBB93_6
.LBB93_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB93_5
.Lfunc_end93:
	.size	uInt64_to_double.51, .Lfunc_end93-uInt64_to_double.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.52
	.type	cleanUpAndFail.52,@function
cleanUpAndFail.52:                      # @cleanUpAndFail.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1380734518, -12(%rbp)  # imm = 0x524C5636
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB94_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB94_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB94_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB94_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB94_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB94_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB94_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB94_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB94_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB94_10:                              # %if.end19
	jmp	.LBB94_12
.LBB94_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB94_12:                              # %if.end24
	jmp	.LBB94_13
.LBB94_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB94_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB94_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB94_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB94_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end94:
	.size	cleanUpAndFail.52, .Lfunc_end94-cleanUpAndFail.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.53
	.type	applySavedMetaInfoToOutputFile.53,@function
applySavedMetaInfoToOutputFile.53:      # @applySavedMetaInfoToOutputFile.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$286142535, -20(%rbp)   # imm = 0x110E3047
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB95_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB95_2:                               # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB95_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB95_4:                               # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$286142535, -20(%rbp)   # imm = 0x110E3047
	jne	.LBB95_6
.LBB95_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_5
.Lfunc_end95:
	.size	applySavedMetaInfoToOutputFile.53, .Lfunc_end95-applySavedMetaInfoToOutputFile.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.54
	.type	compress.54,@function
compress.54:                            # @compress.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1537652271, -64(%rbp)  # imm = 0x5BA6B62F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB96_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB96_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB96_3:                               # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB96_6
	jmp	.LBB96_4
.LBB96_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB96_8
	jmp	.LBB96_5
.LBB96_5:                               # %if.end
	subl	$3, %eax
	je	.LBB96_7
	jmp	.LBB96_9
.LBB96_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB96_9
.LBB96_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB96_9
.LBB96_8:                               # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB96_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB96_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB96_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB96_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB96_13:                              # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_14:                              # %if.end12
	cmpl	$1, srcMode
	je	.LBB96_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB96_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_17:                              # %if.end22
	movl	$0, -20(%rbp)
.LBB96_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB96_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB96_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB96_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB96_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB96_22:                              # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_23:                              # %if.end34
                                        #   in Loop: Header=BB96_18 Depth=1
	jmp	.LBB96_24
.LBB96_24:                              # %for.inc
                                        #   in Loop: Header=BB96_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB96_18
.LBB96_25:                              # %for.end
	cmpl	$3, srcMode
	je	.LBB96_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB96_30
.LBB96_27:                              # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB96_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_29:                              # %if.end45
	jmp	.LBB96_30
.LBB96_30:                              # %if.end46
	cmpl	$3, srcMode
	jne	.LBB96_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB96_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB96_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB96_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB96_35:                              # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_36:                              # %if.end60
	cmpl	$3, srcMode
	jne	.LBB96_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB96_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB96_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB96_41
.LBB96_40:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_41:                              # %if.end72
	jmp	.LBB96_42
.LBB96_42:                              # %if.end73
	cmpl	$3, srcMode
	jne	.LBB96_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB96_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB96_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_46:                              # %if.end86
	cmpl	$3, srcMode
	jne	.LBB96_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB96_48:                              # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB96_51
	jmp	.LBB96_49
.LBB96_49:                              # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB96_54
	jmp	.LBB96_50
.LBB96_50:                              # %if.end90
	subl	$3, %eax
	je	.LBB96_61
	jmp	.LBB96_70
.LBB96_51:                              # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB96_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_53:                              # %if.end98
	jmp	.LBB96_71
.LBB96_54:                              # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB96_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB96_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB96_57:                              # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_58:                              # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB96_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_60:                              # %if.end119
	jmp	.LBB96_71
.LBB96_61:                              # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB96_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB96_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB96_64:                              # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_65:                              # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB96_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB96_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB96_68:                              # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB96_80
.LBB96_69:                              # %if.end146
	jmp	.LBB96_71
.LBB96_70:                              # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB96_71:                              # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB96_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB96_73:                              # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB96_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB96_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB96_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB96_77:                              # %if.end163
	jmp	.LBB96_78
.LBB96_78:                              # %if.end164
	jmp	.LBB96_79
.LBB96_79:                              # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB96_80:                              # %return
	cmpl	$1537652271, -64(%rbp)  # imm = 0x5BA6B62F
	jne	.LBB96_82
.LBB96_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_81
.Lfunc_end96:
	.size	compress.54, .Lfunc_end96-compress.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.55
	.type	uInt64_isZero.55,@function
uInt64_isZero.55:                       # @uInt64_isZero.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$547970837, -20(%rbp)   # imm = 0x20A95F15
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB97_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB97_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB97_7
.LBB97_4:                               # %if.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_5
.LBB97_5:                               # %for.inc
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_1
.LBB97_6:                               # %for.end
	movb	$1, -9(%rbp)
.LBB97_7:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$547970837, -20(%rbp)   # imm = 0x20A95F15
	jne	.LBB97_9
.LBB97_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_8
.Lfunc_end97:
	.size	uInt64_isZero.55, .Lfunc_end97-uInt64_isZero.55
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.56
	.type	myfeof.56,@function
myfeof.56:                              # @myfeof.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$484420057, -20(%rbp)   # imm = 0x1CDFA9D9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB98_3
.LBB98_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB98_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$484420057, -20(%rbp)   # imm = 0x1CDFA9D9
	jne	.LBB98_5
.LBB98_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_4
.Lfunc_end98:
	.size	myfeof.56, .Lfunc_end98-myfeof.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc.57
	.type	myMalloc.57,@function
myMalloc.57:                            # @myMalloc.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$855901783, -16(%rbp)   # imm = 0x33040657
	movl	%edi, -12(%rbp)
	movslq	-12(%rbp), %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB99_2
# %bb.1:                                # %if.then
	callq	outOfMemory
.LBB99_2:                               # %if.end
	movq	-24(%rbp), %rbx
	cmpl	$855901783, -16(%rbp)   # imm = 0x33040657
	jne	.LBB99_4
.LBB99_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_3
.Lfunc_end99:
	.size	myMalloc.57, .Lfunc_end99-myMalloc.57
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.58
	.type	hasSuffix.58,@function
hasSuffix.58:                           # @hasSuffix.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$812551682, -24(%rbp)   # imm = 0x306E8E02
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB100_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB100_5
.LBB100_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB100_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB100_5
.LBB100_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB100_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$812551682, -24(%rbp)   # imm = 0x306E8E02
	jne	.LBB100_7
.LBB100_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_6
.Lfunc_end100:
	.size	hasSuffix.58, .Lfunc_end100-hasSuffix.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.59
	.type	applySavedMetaInfoToOutputFile.59,@function
applySavedMetaInfoToOutputFile.59:      # @applySavedMetaInfoToOutputFile.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$621495759, -20(%rbp)   # imm = 0x250B45CF
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB101_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB101_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB101_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB101_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$621495759, -20(%rbp)   # imm = 0x250B45CF
	jne	.LBB101_6
.LBB101_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_5
.Lfunc_end101:
	.size	applySavedMetaInfoToOutputFile.59, .Lfunc_end101-applySavedMetaInfoToOutputFile.59
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.60
.LCPI102_0:
	.quad	4607182418800017408     # double 1
.LCPI102_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.60,@function
uInt64_to_double.60:                    # @uInt64_to_double.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI102_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$761118358, -28(%rbp)   # imm = 0x2D5DBE96
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB102_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB102_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB102_1 Depth=1
	vmovsd	.LCPI102_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB102_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_1
.LBB102_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$761118358, -28(%rbp)   # imm = 0x2D5DBE96
	jne	.LBB102_6
.LBB102_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB102_5
.Lfunc_end102:
	.size	uInt64_to_double.60, .Lfunc_end102-uInt64_to_double.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.61
	.type	fileExists.61,@function
fileExists.61:                          # @fileExists.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1239237718, -28(%rbp)  # imm = 0x49DD4456
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB103_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB103_2:                              # %if.end
	movb	-9(%rbp), %bl
	cmpl	$1239237718, -28(%rbp)  # imm = 0x49DD4456
	jne	.LBB103_4
.LBB103_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_3
.Lfunc_end103:
	.size	fileExists.61, .Lfunc_end103-fileExists.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.62
	.type	mapSuffix.62,@function
mapSuffix.62:                           # @mapSuffix.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$721978430, -36(%rbp)   # imm = 0x2B08843E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB104_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB104_3
.LBB104_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB104_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$721978430, -36(%rbp)   # imm = 0x2B08843E
	jne	.LBB104_5
.LBB104_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_4
.Lfunc_end104:
	.size	mapSuffix.62, .Lfunc_end104-mapSuffix.62
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.63
.LCPI105_0:
	.quad	4636737291354636288     # double 100
.LCPI105_1:
	.quad	4607182418800017408     # double 1
.LCPI105_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.63,@function
compressStream.63:                      # @compressStream.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1003214629, -76(%rbp)  # imm = 0x3BCBD725
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_2
# %bb.1:                                # %if.then
	jmp	.LBB105_46
.LBB105_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_4
# %bb.3:                                # %if.then3
	jmp	.LBB105_46
.LBB105_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB105_6
# %bb.5:                                # %if.then6
	jmp	.LBB105_40
.LBB105_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB105_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB105_8:                              # %if.end11
	jmp	.LBB105_9
.LBB105_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB105_11
# %bb.10:                               # %if.then14
	jmp	.LBB105_18
.LBB105_11:                             # %if.end15
                                        #   in Loop: Header=BB105_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_13
# %bb.12:                               # %if.then19
	jmp	.LBB105_46
.LBB105_13:                             # %if.end20
                                        #   in Loop: Header=BB105_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB105_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB105_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB105_15:                             # %if.end25
                                        #   in Loop: Header=BB105_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB105_17
# %bb.16:                               # %if.then28
	jmp	.LBB105_40
.LBB105_17:                             # %if.end29
                                        #   in Loop: Header=BB105_9 Depth=1
	jmp	.LBB105_9
.LBB105_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB105_20
# %bb.19:                               # %if.then32
	jmp	.LBB105_40
.LBB105_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_22
# %bb.21:                               # %if.then36
	jmp	.LBB105_46
.LBB105_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB105_24
# %bb.23:                               # %if.then41
	jmp	.LBB105_46
.LBB105_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB105_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB105_27
# %bb.26:                               # %if.then49
	jmp	.LBB105_46
.LBB105_27:                             # %if.end50
	jmp	.LBB105_28
.LBB105_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB105_30
# %bb.29:                               # %if.then54
	jmp	.LBB105_46
.LBB105_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB105_32
# %bb.31:                               # %if.then59
	jmp	.LBB105_46
.LBB105_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB105_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB105_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB105_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB105_37
.LBB105_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI105_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI105_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI105_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB105_37:                             # %if.end80
	jmp	.LBB105_38
.LBB105_38:                             # %if.end81
	cmpl	$1003214629, -76(%rbp)  # imm = 0x3BCBD725
	jne	.LBB105_48
.LBB105_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB105_43
	jmp	.LBB105_41
.LBB105_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB105_45
	jmp	.LBB105_42
.LBB105_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB105_44
	jmp	.LBB105_47
.LBB105_43:                             # %sw.bb
	callq	configError
.LBB105_44:                             # %sw.bb82
	callq	outOfMemory
.LBB105_45:                             # %sw.bb83
	jmp	.LBB105_46
.LBB105_46:                             # %errhandler_io
	callq	ioError
.LBB105_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB105_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB105_39
.Lfunc_end105:
	.size	compressStream.63, .Lfunc_end105-compressStream.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.64
	.type	mapSuffix.64,@function
mapSuffix.64:                           # @mapSuffix.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1876573776, -36(%rbp)  # imm = 0x6FDA3E50
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB106_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB106_3
.LBB106_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB106_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1876573776, -36(%rbp)  # imm = 0x6FDA3E50
	jne	.LBB106_5
.LBB106_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_4
.Lfunc_end106:
	.size	mapSuffix.64, .Lfunc_end106-mapSuffix.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc.65
	.type	myMalloc.65,@function
myMalloc.65:                            # @myMalloc.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1636156292, -16(%rbp)  # imm = 0x6185C384
	movl	%edi, -12(%rbp)
	movslq	-12(%rbp), %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB107_2
# %bb.1:                                # %if.then
	callq	outOfMemory
.LBB107_2:                              # %if.end
	movq	-24(%rbp), %rbx
	cmpl	$1636156292, -16(%rbp)  # imm = 0x6185C384
	jne	.LBB107_4
.LBB107_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_3
.Lfunc_end107:
	.size	myMalloc.65, .Lfunc_end107-myMalloc.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.66
	.type	addFlagsFromEnvVar.66,@function
addFlagsFromEnvVar.66:                  # @addFlagsFromEnvVar.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1758118022, -24(%rbp)  # imm = 0x68CAC086
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB108_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB108_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_5 Depth 2
                                        #     Child Loop BB108_8 Depth 2
                                        #     Child Loop BB108_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB108_4
# %bb.3:                                # %if.then3
	jmp	.LBB108_21
.LBB108_4:                              # %if.end
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB108_5:                              # %while.cond4
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB108_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB108_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB108_5
.LBB108_7:                              # %while.end
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_8
.LBB108_8:                              # %while.cond12
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB108_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB108_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB108_10:                             # %land.end
                                        #   in Loop: Header=BB108_8 Depth=2
	testb	$1, %al
	jne	.LBB108_11
	jmp	.LBB108_12
.LBB108_11:                             # %while.body27
                                        #   in Loop: Header=BB108_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_8
.LBB108_12:                             # %while.end28
                                        #   in Loop: Header=BB108_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB108_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB108_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB108_15:                             # %if.end35
                                        #   in Loop: Header=BB108_2 Depth=1
	movl	$0, -8(%rbp)
.LBB108_16:                             # %for.cond
                                        #   Parent Loop BB108_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB108_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB108_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB108_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_16
.LBB108_19:                             # %for.end
                                        #   in Loop: Header=BB108_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB108_20:                             # %if.end46
                                        #   in Loop: Header=BB108_2 Depth=1
	jmp	.LBB108_2
.LBB108_21:                             # %while.end47
	jmp	.LBB108_22
.LBB108_22:                             # %if.end48
	cmpl	$1758118022, -24(%rbp)  # imm = 0x68CAC086
	jne	.LBB108_24
.LBB108_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_23
.Lfunc_end108:
	.size	addFlagsFromEnvVar.66, .Lfunc_end108-addFlagsFromEnvVar.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.67
	.type	hasSuffix.67,@function
hasSuffix.67:                           # @hasSuffix.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$144732287, -24(%rbp)   # imm = 0x8A0707F
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB109_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB109_5
.LBB109_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB109_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB109_5
.LBB109_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB109_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$144732287, -24(%rbp)   # imm = 0x8A0707F
	jne	.LBB109_7
.LBB109_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_6
.Lfunc_end109:
	.size	hasSuffix.67, .Lfunc_end109-hasSuffix.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.68
	.type	notAStandardFile.68,@function
notAStandardFile.68:                    # @notAStandardFile.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1891460276, -20(%rbp)  # imm = 0x70BD64B4
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB110_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB110_5
.LBB110_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB110_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB110_5
.LBB110_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB110_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1891460276, -20(%rbp)  # imm = 0x70BD64B4
	jne	.LBB110_7
.LBB110_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_6
.Lfunc_end110:
	.size	notAStandardFile.68, .Lfunc_end110-notAStandardFile.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.69
.LCPI111_0:
	.quad	4636737291354636288     # double 100
.LCPI111_1:
	.quad	4607182418800017408     # double 1
.LCPI111_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.69,@function
compressStream.69:                      # @compressStream.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$872453502, -76(%rbp)   # imm = 0x3400957E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB111_2
# %bb.1:                                # %if.then
	jmp	.LBB111_46
.LBB111_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB111_4
# %bb.3:                                # %if.then3
	jmp	.LBB111_46
.LBB111_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB111_6
# %bb.5:                                # %if.then6
	jmp	.LBB111_40
.LBB111_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB111_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB111_8:                              # %if.end11
	jmp	.LBB111_9
.LBB111_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB111_11
# %bb.10:                               # %if.then14
	jmp	.LBB111_18
.LBB111_11:                             # %if.end15
                                        #   in Loop: Header=BB111_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB111_13
# %bb.12:                               # %if.then19
	jmp	.LBB111_46
.LBB111_13:                             # %if.end20
                                        #   in Loop: Header=BB111_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB111_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB111_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB111_15:                             # %if.end25
                                        #   in Loop: Header=BB111_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB111_17
# %bb.16:                               # %if.then28
	jmp	.LBB111_40
.LBB111_17:                             # %if.end29
                                        #   in Loop: Header=BB111_9 Depth=1
	jmp	.LBB111_9
.LBB111_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB111_20
# %bb.19:                               # %if.then32
	jmp	.LBB111_40
.LBB111_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB111_22
# %bb.21:                               # %if.then36
	jmp	.LBB111_46
.LBB111_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB111_24
# %bb.23:                               # %if.then41
	jmp	.LBB111_46
.LBB111_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB111_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB111_27
# %bb.26:                               # %if.then49
	jmp	.LBB111_46
.LBB111_27:                             # %if.end50
	jmp	.LBB111_28
.LBB111_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB111_30
# %bb.29:                               # %if.then54
	jmp	.LBB111_46
.LBB111_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB111_32
# %bb.31:                               # %if.then59
	jmp	.LBB111_46
.LBB111_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB111_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB111_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB111_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB111_37
.LBB111_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI111_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI111_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI111_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB111_37:                             # %if.end80
	jmp	.LBB111_38
.LBB111_38:                             # %if.end81
	cmpl	$872453502, -76(%rbp)   # imm = 0x3400957E
	jne	.LBB111_48
.LBB111_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB111_43
	jmp	.LBB111_41
.LBB111_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB111_45
	jmp	.LBB111_42
.LBB111_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB111_44
	jmp	.LBB111_47
.LBB111_43:                             # %sw.bb
	callq	configError
.LBB111_44:                             # %sw.bb82
	callq	outOfMemory
.LBB111_45:                             # %sw.bb83
	jmp	.LBB111_46
.LBB111_46:                             # %errhandler_io
	callq	ioError
.LBB111_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB111_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB111_39
.Lfunc_end111:
	.size	compressStream.69, .Lfunc_end111-compressStream.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.70
	.type	fileExists.70,@function
fileExists.70:                          # @fileExists.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2092266500, -28(%rbp)  # imm = 0x7CB57404
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB112_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB112_2:                              # %if.end
	movb	-9(%rbp), %bl
	cmpl	$2092266500, -28(%rbp)  # imm = 0x7CB57404
	jne	.LBB112_4
.LBB112_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_3
.Lfunc_end112:
	.size	fileExists.70, .Lfunc_end112-fileExists.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.71
	.type	countHardLinks.71,@function
countHardLinks.71:                      # @countHardLinks.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$372516772, -16(%rbp)   # imm = 0x163427A4
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB113_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB113_3
.LBB113_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB113_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$372516772, -16(%rbp)   # imm = 0x163427A4
	jne	.LBB113_5
.LBB113_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_4
.Lfunc_end113:
	.size	countHardLinks.71, .Lfunc_end113-countHardLinks.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.72
	.type	uInt64_qrm10.72,@function
uInt64_qrm10.72:                        # @uInt64_qrm10.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1852216217, -24(%rbp)  # imm = 0x6E669399
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB114_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_1
.LBB114_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1852216217, -24(%rbp)  # imm = 0x6E669399
	jne	.LBB114_6
.LBB114_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_5
.Lfunc_end114:
	.size	uInt64_qrm10.72, .Lfunc_end114-uInt64_qrm10.72
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.73
	.type	hasSuffix.73,@function
hasSuffix.73:                           # @hasSuffix.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2065398280, -24(%rbp)  # imm = 0x7B1B7A08
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB115_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB115_5
.LBB115_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB115_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB115_5
.LBB115_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB115_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2065398280, -24(%rbp)  # imm = 0x7B1B7A08
	jne	.LBB115_7
.LBB115_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_6
.Lfunc_end115:
	.size	hasSuffix.73, .Lfunc_end115-hasSuffix.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.74
	.type	uInt64_from_UInt32s.74,@function
uInt64_from_UInt32s.74:                 # @uInt64_from_UInt32s.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$564831187, -20(%rbp)   # imm = 0x21AAA3D3
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$564831187, -20(%rbp)   # imm = 0x21AAA3D3
	jne	.LBB116_2
.LBB116_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_1
.Lfunc_end116:
	.size	uInt64_from_UInt32s.74, .Lfunc_end116-uInt64_from_UInt32s.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.75
.LCPI117_0:
	.quad	4607182418800017408     # double 1
.LCPI117_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.75,@function
uInt64_to_double.75:                    # @uInt64_to_double.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI117_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1588272554, -28(%rbp)  # imm = 0x5EAB1DAA
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB117_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB117_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB117_1 Depth=1
	vmovsd	.LCPI117_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB117_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_1
.LBB117_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1588272554, -28(%rbp)  # imm = 0x5EAB1DAA
	jne	.LBB117_6
.LBB117_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB117_5
.Lfunc_end117:
	.size	uInt64_to_double.75, .Lfunc_end117-uInt64_to_double.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.76
	.type	applySavedMetaInfoToOutputFile.76,@function
applySavedMetaInfoToOutputFile.76:      # @applySavedMetaInfoToOutputFile.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1283246360, -20(%rbp)  # imm = 0x4C7CC918
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB118_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB118_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB118_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB118_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$1283246360, -20(%rbp)  # imm = 0x4C7CC918
	jne	.LBB118_6
.LBB118_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_5
.Lfunc_end118:
	.size	applySavedMetaInfoToOutputFile.76, .Lfunc_end118-applySavedMetaInfoToOutputFile.76
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.77
	.type	compress.77,@function
compress.77:                            # @compress.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1122057547, -60(%rbp)  # imm = 0x42E13D4B
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB119_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB119_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB119_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB119_6
	jmp	.LBB119_4
.LBB119_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB119_8
	jmp	.LBB119_5
.LBB119_5:                              # %if.end
	subl	$3, %eax
	je	.LBB119_7
	jmp	.LBB119_9
.LBB119_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB119_9
.LBB119_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB119_9
.LBB119_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB119_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB119_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB119_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB119_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB119_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB119_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB119_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB119_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB119_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB119_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB119_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB119_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB119_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_23:                             # %if.end34
                                        #   in Loop: Header=BB119_18 Depth=1
	jmp	.LBB119_24
.LBB119_24:                             # %for.inc
                                        #   in Loop: Header=BB119_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_18
.LBB119_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB119_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB119_30
.LBB119_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB119_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_29:                             # %if.end45
	jmp	.LBB119_30
.LBB119_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB119_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB119_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB119_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB119_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB119_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB119_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB119_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB119_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB119_41
.LBB119_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_41:                             # %if.end72
	jmp	.LBB119_42
.LBB119_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB119_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB119_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB119_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB119_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB119_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB119_51
	jmp	.LBB119_49
.LBB119_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB119_54
	jmp	.LBB119_50
.LBB119_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB119_61
	jmp	.LBB119_70
.LBB119_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB119_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_53:                             # %if.end98
	jmp	.LBB119_71
.LBB119_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB119_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB119_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB119_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB119_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_60:                             # %if.end119
	jmp	.LBB119_71
.LBB119_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB119_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB119_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB119_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB119_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB119_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB119_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB119_80
.LBB119_69:                             # %if.end146
	jmp	.LBB119_71
.LBB119_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB119_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB119_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB119_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB119_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB119_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB119_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB119_77:                             # %if.end163
	jmp	.LBB119_78
.LBB119_78:                             # %if.end164
	jmp	.LBB119_79
.LBB119_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB119_80:                             # %return
	cmpl	$1122057547, -60(%rbp)  # imm = 0x42E13D4B
	jne	.LBB119_82
.LBB119_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_81
.Lfunc_end119:
	.size	compress.77, .Lfunc_end119-compress.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.78
	.type	testStream.78,@function
testStream.78:                          # @testStream.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$2063146873, -56(%rbp)  # imm = 0x7AF91F79
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB120_2
# %bb.1:                                # %if.then
	jmp	.LBB120_38
.LBB120_2:                              # %if.end
	jmp	.LBB120_3
.LBB120_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_7 Depth 2
                                        #     Child Loop BB120_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB120_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB120_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB120_6
.LBB120_5:                              # %if.then5
	jmp	.LBB120_32
.LBB120_6:                              # %if.end6
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB120_7:                              # %while.cond7
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB120_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB120_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB120_10
# %bb.9:                                # %if.then15
	jmp	.LBB120_32
.LBB120_10:                             # %if.end16
                                        #   in Loop: Header=BB120_7 Depth=2
	jmp	.LBB120_7
.LBB120_11:                             # %while.end
                                        #   in Loop: Header=BB120_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB120_13
# %bb.12:                               # %if.then19
	jmp	.LBB120_32
.LBB120_13:                             # %if.end20
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB120_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB120_15:                             # %if.end24
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB120_16:                             # %for.cond
                                        #   Parent Loop BB120_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB120_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB120_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB120_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB120_16
.LBB120_19:                             # %for.end
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB120_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB120_21:                             # %if.end33
                                        #   in Loop: Header=BB120_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB120_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB120_24
# %bb.23:                               # %if.then39
	jmp	.LBB120_25
.LBB120_24:                             # %if.end40
                                        #   in Loop: Header=BB120_3 Depth=1
	jmp	.LBB120_3
.LBB120_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB120_27
# %bb.26:                               # %if.then44
	jmp	.LBB120_38
.LBB120_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB120_29
# %bb.28:                               # %if.then49
	jmp	.LBB120_38
.LBB120_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB120_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB120_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB120_50
.LBB120_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB120_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB120_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB120_49
# %bb.35:                               # %if.end60
	movq	.LJTI120_0(,%rax,8), %rax
	jmpq	*%rax
.LBB120_36:                             # %sw.bb
	callq	configError
.LBB120_37:                             # %sw.bb61
	jmp	.LBB120_38
.LBB120_38:                             # %errhandler_io
	callq	ioError
.LBB120_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB120_50
.LBB120_40:                             # %sw.bb64
	callq	outOfMemory
.LBB120_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB120_50
.LBB120_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB120_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB120_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB120_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB120_50
.LBB120_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB120_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB120_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB120_50
.LBB120_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB120_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$2063146873, -56(%rbp)  # imm = 0x7AF91F79
	jne	.LBB120_52
.LBB120_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_51
.Lfunc_end120:
	.size	testStream.78, .Lfunc_end120-testStream.78
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI120_0:
	.quad	.LBB120_36
	.quad	.LBB120_49
	.quad	.LBB120_41
	.quad	.LBB120_37
	.quad	.LBB120_42
	.quad	.LBB120_39
	.quad	.LBB120_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.79
	.type	uInt64_isZero.79,@function
uInt64_isZero.79:                       # @uInt64_isZero.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$889400533, -20(%rbp)   # imm = 0x35032CD5
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB121_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB121_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB121_7
.LBB121_4:                              # %if.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_5
.LBB121_5:                              # %for.inc
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_1
.LBB121_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB121_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$889400533, -20(%rbp)   # imm = 0x35032CD5
	jne	.LBB121_9
.LBB121_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_8
.Lfunc_end121:
	.size	uInt64_isZero.79, .Lfunc_end121-uInt64_isZero.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.80
	.type	uInt64_toAscii.80,@function
uInt64_toAscii.80:                      # @uInt64_toAscii.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2013576872, -16(%rbp)  # imm = 0x7804BEA8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB122_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB122_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB122_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB122_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB122_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB122_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB122_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_4
.LBB122_7:                              # %for.end
	cmpl	$2013576872, -16(%rbp)  # imm = 0x7804BEA8
	jne	.LBB122_9
.LBB122_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_8
.Lfunc_end122:
	.size	uInt64_toAscii.80, .Lfunc_end122-uInt64_toAscii.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.81
	.type	uInt64_qrm10.81,@function
uInt64_qrm10.81:                        # @uInt64_qrm10.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$300347587, -24(%rbp)   # imm = 0x11E6F0C3
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$300347587, -24(%rbp)   # imm = 0x11E6F0C3
	jne	.LBB123_6
.LBB123_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_5
.Lfunc_end123:
	.size	uInt64_qrm10.81, .Lfunc_end123-uInt64_qrm10.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.82
	.type	addFlagsFromEnvVar.82,@function
addFlagsFromEnvVar.82:                  # @addFlagsFromEnvVar.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1335608782, -24(%rbp)  # imm = 0x4F9BC5CE
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB124_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB124_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_5 Depth 2
                                        #     Child Loop BB124_8 Depth 2
                                        #     Child Loop BB124_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB124_4
# %bb.3:                                # %if.then3
	jmp	.LBB124_21
.LBB124_4:                              # %if.end
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB124_5:                              # %while.cond4
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB124_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB124_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB124_5
.LBB124_7:                              # %while.end
                                        #   in Loop: Header=BB124_2 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %while.cond12
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB124_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB124_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB124_10:                             # %land.end
                                        #   in Loop: Header=BB124_8 Depth=2
	testb	$1, %al
	jne	.LBB124_11
	jmp	.LBB124_12
.LBB124_11:                             # %while.body27
                                        #   in Loop: Header=BB124_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_8
.LBB124_12:                             # %while.end28
                                        #   in Loop: Header=BB124_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB124_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB124_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB124_15:                             # %if.end35
                                        #   in Loop: Header=BB124_2 Depth=1
	movl	$0, -8(%rbp)
.LBB124_16:                             # %for.cond
                                        #   Parent Loop BB124_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB124_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB124_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB124_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_16
.LBB124_19:                             # %for.end
                                        #   in Loop: Header=BB124_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB124_20:                             # %if.end46
                                        #   in Loop: Header=BB124_2 Depth=1
	jmp	.LBB124_2
.LBB124_21:                             # %while.end47
	jmp	.LBB124_22
.LBB124_22:                             # %if.end48
	cmpl	$1335608782, -24(%rbp)  # imm = 0x4F9BC5CE
	jne	.LBB124_24
.LBB124_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_23
.Lfunc_end124:
	.size	addFlagsFromEnvVar.82, .Lfunc_end124-addFlagsFromEnvVar.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.83
	.type	cleanUpAndFail.83,@function
cleanUpAndFail.83:                      # @cleanUpAndFail.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1493900111, -12(%rbp)  # imm = 0x590B1B4F
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB125_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB125_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB125_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB125_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB125_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB125_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB125_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB125_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB125_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB125_10:                             # %if.end19
	jmp	.LBB125_12
.LBB125_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB125_12:                             # %if.end24
	jmp	.LBB125_13
.LBB125_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB125_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB125_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB125_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB125_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end125:
	.size	cleanUpAndFail.83, .Lfunc_end125-cleanUpAndFail.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.84
	.type	testf.84,@function
testf.84:                               # @testf.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$886558619, -44(%rbp)   # imm = 0x34D7CF9B
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB126_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB126_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB126_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB126_6
	jmp	.LBB126_4
.LBB126_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB126_8
	jmp	.LBB126_5
.LBB126_5:                              # %if.end
	subl	$3, %eax
	je	.LBB126_7
	jmp	.LBB126_9
.LBB126_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB126_9
.LBB126_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB126_9
.LBB126_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB126_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB126_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB126_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB126_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB126_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB126_37
.LBB126_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB126_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB126_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB126_37
.LBB126_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB126_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB126_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB126_37
.LBB126_20:                             # %if.end30
	jmp	.LBB126_21
.LBB126_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB126_23
	jmp	.LBB126_22
.LBB126_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB126_26
	jmp	.LBB126_29
.LBB126_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB126_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB126_37
.LBB126_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB126_30
.LBB126_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB126_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB126_37
.LBB126_28:                             # %if.end48
	jmp	.LBB126_30
.LBB126_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB126_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB126_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB126_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB126_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB126_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB126_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB126_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB126_37:                             # %if.end67
	cmpl	$886558619, -44(%rbp)   # imm = 0x34D7CF9B
	jne	.LBB126_39
.LBB126_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_38
.Lfunc_end126:
	.size	testf.84, .Lfunc_end126-testf.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.85
	.type	uInt64_from_UInt32s.85,@function
uInt64_from_UInt32s.85:                 # @uInt64_from_UInt32s.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$857092945, -20(%rbp)   # imm = 0x33163351
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$857092945, -20(%rbp)   # imm = 0x33163351
	jne	.LBB127_2
.LBB127_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_1
.Lfunc_end127:
	.size	uInt64_from_UInt32s.85, .Lfunc_end127-uInt64_from_UInt32s.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.86
	.type	snocString.86,@function
snocString.86:                          # @snocString.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$706153507, -44(%rbp)   # imm = 0x2A170C23
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB128_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB128_6
.LBB128_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB128_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB128_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB128_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB128_3
.LBB128_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB128_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$706153507, -44(%rbp)   # imm = 0x2A170C23
	jne	.LBB128_8
.LBB128_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_7
.Lfunc_end128:
	.size	snocString.86, .Lfunc_end128-snocString.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.87
	.type	myfeof.87,@function
myfeof.87:                              # @myfeof.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$922683136, -20(%rbp)   # imm = 0x36FF0700
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB129_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB129_3
.LBB129_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB129_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$922683136, -20(%rbp)   # imm = 0x36FF0700
	jne	.LBB129_5
.LBB129_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_4
.Lfunc_end129:
	.size	myfeof.87, .Lfunc_end129-myfeof.87
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.88
.LCPI130_0:
	.quad	4636737291354636288     # double 100
.LCPI130_1:
	.quad	4607182418800017408     # double 1
.LCPI130_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.88,@function
compressStream.88:                      # @compressStream.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$2140069505, -76(%rbp)  # imm = 0x7F8EDE81
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB130_2
# %bb.1:                                # %if.then
	jmp	.LBB130_46
.LBB130_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB130_4
# %bb.3:                                # %if.then3
	jmp	.LBB130_46
.LBB130_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB130_6
# %bb.5:                                # %if.then6
	jmp	.LBB130_40
.LBB130_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB130_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB130_8:                              # %if.end11
	jmp	.LBB130_9
.LBB130_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB130_11
# %bb.10:                               # %if.then14
	jmp	.LBB130_18
.LBB130_11:                             # %if.end15
                                        #   in Loop: Header=BB130_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB130_13
# %bb.12:                               # %if.then19
	jmp	.LBB130_46
.LBB130_13:                             # %if.end20
                                        #   in Loop: Header=BB130_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB130_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB130_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB130_15:                             # %if.end25
                                        #   in Loop: Header=BB130_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB130_17
# %bb.16:                               # %if.then28
	jmp	.LBB130_40
.LBB130_17:                             # %if.end29
                                        #   in Loop: Header=BB130_9 Depth=1
	jmp	.LBB130_9
.LBB130_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB130_20
# %bb.19:                               # %if.then32
	jmp	.LBB130_40
.LBB130_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB130_22
# %bb.21:                               # %if.then36
	jmp	.LBB130_46
.LBB130_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB130_24
# %bb.23:                               # %if.then41
	jmp	.LBB130_46
.LBB130_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB130_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB130_27
# %bb.26:                               # %if.then49
	jmp	.LBB130_46
.LBB130_27:                             # %if.end50
	jmp	.LBB130_28
.LBB130_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB130_30
# %bb.29:                               # %if.then54
	jmp	.LBB130_46
.LBB130_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB130_32
# %bb.31:                               # %if.then59
	jmp	.LBB130_46
.LBB130_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB130_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB130_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB130_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB130_37
.LBB130_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI130_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI130_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI130_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB130_37:                             # %if.end80
	jmp	.LBB130_38
.LBB130_38:                             # %if.end81
	cmpl	$2140069505, -76(%rbp)  # imm = 0x7F8EDE81
	jne	.LBB130_48
.LBB130_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB130_43
	jmp	.LBB130_41
.LBB130_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB130_45
	jmp	.LBB130_42
.LBB130_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB130_44
	jmp	.LBB130_47
.LBB130_43:                             # %sw.bb
	callq	configError
.LBB130_44:                             # %sw.bb82
	callq	outOfMemory
.LBB130_45:                             # %sw.bb83
	jmp	.LBB130_46
.LBB130_46:                             # %errhandler_io
	callq	ioError
.LBB130_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB130_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB130_39
.Lfunc_end130:
	.size	compressStream.88, .Lfunc_end130-compressStream.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.89
	.type	uInt64_from_UInt32s.89,@function
uInt64_from_UInt32s.89:                 # @uInt64_from_UInt32s.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$423571794, -20(%rbp)   # imm = 0x193F3152
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$423571794, -20(%rbp)   # imm = 0x193F3152
	jne	.LBB131_2
.LBB131_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_1
.Lfunc_end131:
	.size	uInt64_from_UInt32s.89, .Lfunc_end131-uInt64_from_UInt32s.89
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.90  # -- Begin function fopen_output_safely.90
	.p2align	4, 0x90
	.type	fopen_output_safely.90,@function
fopen_output_safely.90:                 # @fopen_output_safely.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$580416551, -16(%rbp)   # imm = 0x22987427
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB132_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB132_5
.LBB132_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB132_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB132_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB132_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$580416551, -16(%rbp)   # imm = 0x22987427
	jne	.LBB132_7
.LBB132_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_6
.Lfunc_end132:
	.size	fopen_output_safely.90, .Lfunc_end132-fopen_output_safely.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.91
	.type	uInt64_isZero.91,@function
uInt64_isZero.91:                       # @uInt64_isZero.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$404680747, -20(%rbp)   # imm = 0x181EF02B
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB133_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB133_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB133_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB133_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB133_7
.LBB133_4:                              # %if.end
                                        #   in Loop: Header=BB133_1 Depth=1
	jmp	.LBB133_5
.LBB133_5:                              # %for.inc
                                        #   in Loop: Header=BB133_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB133_1
.LBB133_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB133_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$404680747, -20(%rbp)   # imm = 0x181EF02B
	jne	.LBB133_9
.LBB133_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_8
.Lfunc_end133:
	.size	uInt64_isZero.91, .Lfunc_end133-uInt64_isZero.91
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.92  # -- Begin function fopen_output_safely.92
	.p2align	4, 0x90
	.type	fopen_output_safely.92,@function
fopen_output_safely.92:                 # @fopen_output_safely.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1628592539, -16(%rbp)  # imm = 0x6112599B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB134_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB134_5
.LBB134_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB134_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB134_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB134_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1628592539, -16(%rbp)  # imm = 0x6112599B
	jne	.LBB134_7
.LBB134_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_6
.Lfunc_end134:
	.size	fopen_output_safely.92, .Lfunc_end134-fopen_output_safely.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.93
	.type	notAStandardFile.93,@function
notAStandardFile.93:                    # @notAStandardFile.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1431564027, -16(%rbp)  # imm = 0x5553EEFB
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB135_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB135_5
.LBB135_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB135_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB135_5
.LBB135_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB135_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1431564027, -16(%rbp)  # imm = 0x5553EEFB
	jne	.LBB135_7
.LBB135_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_6
.Lfunc_end135:
	.size	notAStandardFile.93, .Lfunc_end135-notAStandardFile.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.94
	.type	compress.94,@function
compress.94:                            # @compress.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1082912095, -64(%rbp)  # imm = 0x408BED5F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB136_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB136_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB136_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB136_6
	jmp	.LBB136_4
.LBB136_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB136_8
	jmp	.LBB136_5
.LBB136_5:                              # %if.end
	subl	$3, %eax
	je	.LBB136_7
	jmp	.LBB136_9
.LBB136_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB136_9
.LBB136_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB136_9
.LBB136_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB136_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB136_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB136_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB136_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB136_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB136_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB136_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB136_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB136_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB136_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB136_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB136_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB136_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_23:                             # %if.end34
                                        #   in Loop: Header=BB136_18 Depth=1
	jmp	.LBB136_24
.LBB136_24:                             # %for.inc
                                        #   in Loop: Header=BB136_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB136_18
.LBB136_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB136_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB136_30
.LBB136_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB136_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_29:                             # %if.end45
	jmp	.LBB136_30
.LBB136_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB136_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB136_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB136_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB136_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB136_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB136_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB136_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB136_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB136_41
.LBB136_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_41:                             # %if.end72
	jmp	.LBB136_42
.LBB136_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB136_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB136_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB136_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB136_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB136_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB136_51
	jmp	.LBB136_49
.LBB136_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB136_54
	jmp	.LBB136_50
.LBB136_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB136_61
	jmp	.LBB136_70
.LBB136_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB136_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_53:                             # %if.end98
	jmp	.LBB136_71
.LBB136_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB136_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB136_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB136_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB136_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_60:                             # %if.end119
	jmp	.LBB136_71
.LBB136_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB136_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB136_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB136_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB136_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB136_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB136_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB136_80
.LBB136_69:                             # %if.end146
	jmp	.LBB136_71
.LBB136_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB136_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB136_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB136_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB136_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB136_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB136_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB136_77:                             # %if.end163
	jmp	.LBB136_78
.LBB136_78:                             # %if.end164
	jmp	.LBB136_79
.LBB136_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB136_80:                             # %return
	cmpl	$1082912095, -64(%rbp)  # imm = 0x408BED5F
	jne	.LBB136_82
.LBB136_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_81
.Lfunc_end136:
	.size	compress.94, .Lfunc_end136-compress.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.95
	.type	uInt64_isZero.95,@function
uInt64_isZero.95:                       # @uInt64_isZero.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1009001327, -20(%rbp)  # imm = 0x3C24236F
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB137_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB137_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB137_7
.LBB137_4:                              # %if.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_5
.LBB137_5:                              # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB137_1
.LBB137_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB137_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1009001327, -20(%rbp)  # imm = 0x3C24236F
	jne	.LBB137_9
.LBB137_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_8
.Lfunc_end137:
	.size	uInt64_isZero.95, .Lfunc_end137-uInt64_isZero.95
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.96
	.type	testStream.96,@function
testStream.96:                          # @testStream.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1391662926, -56(%rbp)  # imm = 0x52F3174E
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB138_2
# %bb.1:                                # %if.then
	jmp	.LBB138_38
.LBB138_2:                              # %if.end
	jmp	.LBB138_3
.LBB138_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_7 Depth 2
                                        #     Child Loop BB138_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB138_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB138_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB138_6
.LBB138_5:                              # %if.then5
	jmp	.LBB138_32
.LBB138_6:                              # %if.end6
                                        #   in Loop: Header=BB138_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB138_7:                              # %while.cond7
                                        #   Parent Loop BB138_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB138_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB138_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB138_10
# %bb.9:                                # %if.then15
	jmp	.LBB138_32
.LBB138_10:                             # %if.end16
                                        #   in Loop: Header=BB138_7 Depth=2
	jmp	.LBB138_7
.LBB138_11:                             # %while.end
                                        #   in Loop: Header=BB138_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB138_13
# %bb.12:                               # %if.then19
	jmp	.LBB138_32
.LBB138_13:                             # %if.end20
                                        #   in Loop: Header=BB138_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB138_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB138_15:                             # %if.end24
                                        #   in Loop: Header=BB138_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB138_16:                             # %for.cond
                                        #   Parent Loop BB138_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB138_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB138_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB138_16
.LBB138_19:                             # %for.end
                                        #   in Loop: Header=BB138_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB138_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB138_21:                             # %if.end33
                                        #   in Loop: Header=BB138_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB138_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB138_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB138_24
# %bb.23:                               # %if.then39
	jmp	.LBB138_25
.LBB138_24:                             # %if.end40
                                        #   in Loop: Header=BB138_3 Depth=1
	jmp	.LBB138_3
.LBB138_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB138_27
# %bb.26:                               # %if.then44
	jmp	.LBB138_38
.LBB138_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB138_29
# %bb.28:                               # %if.then49
	jmp	.LBB138_38
.LBB138_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB138_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB138_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB138_50
.LBB138_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB138_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB138_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB138_49
# %bb.35:                               # %if.end60
	movq	.LJTI138_0(,%rax,8), %rax
	jmpq	*%rax
.LBB138_36:                             # %sw.bb
	callq	configError
.LBB138_37:                             # %sw.bb61
	jmp	.LBB138_38
.LBB138_38:                             # %errhandler_io
	callq	ioError
.LBB138_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB138_50
.LBB138_40:                             # %sw.bb64
	callq	outOfMemory
.LBB138_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB138_50
.LBB138_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB138_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB138_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB138_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB138_50
.LBB138_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB138_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB138_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB138_50
.LBB138_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB138_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1391662926, -56(%rbp)  # imm = 0x52F3174E
	jne	.LBB138_52
.LBB138_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_51
.Lfunc_end138:
	.size	testStream.96, .Lfunc_end138-testStream.96
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI138_0:
	.quad	.LBB138_36
	.quad	.LBB138_49
	.quad	.LBB138_41
	.quad	.LBB138_37
	.quad	.LBB138_42
	.quad	.LBB138_39
	.quad	.LBB138_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function testStream.97
	.type	testStream.97,@function
testStream.97:                          # @testStream.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1835037625, -52(%rbp)  # imm = 0x6D6073B9
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB139_2
# %bb.1:                                # %if.then
	jmp	.LBB139_38
.LBB139_2:                              # %if.end
	jmp	.LBB139_3
.LBB139_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_7 Depth 2
                                        #     Child Loop BB139_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB139_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB139_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB139_6
.LBB139_5:                              # %if.then5
	jmp	.LBB139_32
.LBB139_6:                              # %if.end6
                                        #   in Loop: Header=BB139_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB139_7:                              # %while.cond7
                                        #   Parent Loop BB139_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB139_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB139_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB139_10
# %bb.9:                                # %if.then15
	jmp	.LBB139_32
.LBB139_10:                             # %if.end16
                                        #   in Loop: Header=BB139_7 Depth=2
	jmp	.LBB139_7
.LBB139_11:                             # %while.end
                                        #   in Loop: Header=BB139_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB139_13
# %bb.12:                               # %if.then19
	jmp	.LBB139_32
.LBB139_13:                             # %if.end20
                                        #   in Loop: Header=BB139_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB139_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB139_15:                             # %if.end24
                                        #   in Loop: Header=BB139_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB139_16:                             # %for.cond
                                        #   Parent Loop BB139_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB139_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB139_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB139_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_16
.LBB139_19:                             # %for.end
                                        #   in Loop: Header=BB139_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB139_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB139_21:                             # %if.end33
                                        #   in Loop: Header=BB139_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB139_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB139_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB139_24
# %bb.23:                               # %if.then39
	jmp	.LBB139_25
.LBB139_24:                             # %if.end40
                                        #   in Loop: Header=BB139_3 Depth=1
	jmp	.LBB139_3
.LBB139_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB139_27
# %bb.26:                               # %if.then44
	jmp	.LBB139_38
.LBB139_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB139_29
# %bb.28:                               # %if.then49
	jmp	.LBB139_38
.LBB139_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB139_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB139_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB139_50
.LBB139_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB139_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB139_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB139_49
# %bb.35:                               # %if.end60
	movq	.LJTI139_0(,%rax,8), %rax
	jmpq	*%rax
.LBB139_36:                             # %sw.bb
	callq	configError
.LBB139_37:                             # %sw.bb61
	jmp	.LBB139_38
.LBB139_38:                             # %errhandler_io
	callq	ioError
.LBB139_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB139_50
.LBB139_40:                             # %sw.bb64
	callq	outOfMemory
.LBB139_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB139_50
.LBB139_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB139_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB139_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB139_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB139_50
.LBB139_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB139_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB139_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB139_50
.LBB139_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB139_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1835037625, -52(%rbp)  # imm = 0x6D6073B9
	jne	.LBB139_52
.LBB139_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_51
.Lfunc_end139:
	.size	testStream.97, .Lfunc_end139-testStream.97
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI139_0:
	.quad	.LBB139_36
	.quad	.LBB139_49
	.quad	.LBB139_41
	.quad	.LBB139_37
	.quad	.LBB139_42
	.quad	.LBB139_39
	.quad	.LBB139_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.98
	.type	cleanUpAndFail.98,@function
cleanUpAndFail.98:                      # @cleanUpAndFail.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$833061489, -12(%rbp)   # imm = 0x31A78271
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB140_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB140_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB140_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB140_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB140_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB140_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB140_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB140_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB140_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB140_10:                             # %if.end19
	jmp	.LBB140_12
.LBB140_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB140_12:                             # %if.end24
	jmp	.LBB140_13
.LBB140_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB140_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB140_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB140_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB140_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end140:
	.size	cleanUpAndFail.98, .Lfunc_end140-cleanUpAndFail.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.99
	.type	notAStandardFile.99,@function
notAStandardFile.99:                    # @notAStandardFile.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1220323946, -20(%rbp)  # imm = 0x48BCAA6A
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB141_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB141_5
.LBB141_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB141_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB141_5
.LBB141_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB141_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1220323946, -20(%rbp)  # imm = 0x48BCAA6A
	jne	.LBB141_7
.LBB141_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_6
.Lfunc_end141:
	.size	notAStandardFile.99, .Lfunc_end141-notAStandardFile.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.100
	.type	addFlagsFromEnvVar.100,@function
addFlagsFromEnvVar.100:                 # @addFlagsFromEnvVar.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$164126968, -24(%rbp)   # imm = 0x9C860F8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB142_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB142_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_5 Depth 2
                                        #     Child Loop BB142_8 Depth 2
                                        #     Child Loop BB142_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB142_4
# %bb.3:                                # %if.then3
	jmp	.LBB142_21
.LBB142_4:                              # %if.end
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB142_5:                              # %while.cond4
                                        #   Parent Loop BB142_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB142_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB142_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB142_5
.LBB142_7:                              # %while.end
                                        #   in Loop: Header=BB142_2 Depth=1
	jmp	.LBB142_8
.LBB142_8:                              # %while.cond12
                                        #   Parent Loop BB142_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB142_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB142_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB142_10:                             # %land.end
                                        #   in Loop: Header=BB142_8 Depth=2
	testb	$1, %al
	jne	.LBB142_11
	jmp	.LBB142_12
.LBB142_11:                             # %while.body27
                                        #   in Loop: Header=BB142_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_8
.LBB142_12:                             # %while.end28
                                        #   in Loop: Header=BB142_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB142_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB142_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB142_15:                             # %if.end35
                                        #   in Loop: Header=BB142_2 Depth=1
	movl	$0, -8(%rbp)
.LBB142_16:                             # %for.cond
                                        #   Parent Loop BB142_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB142_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB142_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB142_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_16
.LBB142_19:                             # %for.end
                                        #   in Loop: Header=BB142_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB142_20:                             # %if.end46
                                        #   in Loop: Header=BB142_2 Depth=1
	jmp	.LBB142_2
.LBB142_21:                             # %while.end47
	jmp	.LBB142_22
.LBB142_22:                             # %if.end48
	cmpl	$164126968, -24(%rbp)   # imm = 0x9C860F8
	jne	.LBB142_24
.LBB142_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_23
.Lfunc_end142:
	.size	addFlagsFromEnvVar.100, .Lfunc_end142-addFlagsFromEnvVar.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.101
	.type	mapSuffix.101,@function
mapSuffix.101:                          # @mapSuffix.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1089861435, -36(%rbp)  # imm = 0x40F5F73B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB143_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB143_3
.LBB143_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB143_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1089861435, -36(%rbp)  # imm = 0x40F5F73B
	jne	.LBB143_5
.LBB143_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_4
.Lfunc_end143:
	.size	mapSuffix.101, .Lfunc_end143-mapSuffix.101
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.102 # -- Begin function fopen_output_safely.102
	.p2align	4, 0x90
	.type	fopen_output_safely.102,@function
fopen_output_safely.102:                # @fopen_output_safely.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$972174579, -16(%rbp)   # imm = 0x39F234F3
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB144_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB144_5
.LBB144_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB144_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB144_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB144_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$972174579, -16(%rbp)   # imm = 0x39F234F3
	jne	.LBB144_7
.LBB144_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_6
.Lfunc_end144:
	.size	fopen_output_safely.102, .Lfunc_end144-fopen_output_safely.102
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.103
	.type	compress.103,@function
compress.103:                           # @compress.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$929636624, -60(%rbp)   # imm = 0x37692110
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB145_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB145_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB145_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB145_6
	jmp	.LBB145_4
.LBB145_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB145_8
	jmp	.LBB145_5
.LBB145_5:                              # %if.end
	subl	$3, %eax
	je	.LBB145_7
	jmp	.LBB145_9
.LBB145_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB145_9
.LBB145_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB145_9
.LBB145_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB145_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB145_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB145_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB145_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB145_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB145_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB145_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB145_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB145_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB145_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB145_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB145_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB145_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_23:                             # %if.end34
                                        #   in Loop: Header=BB145_18 Depth=1
	jmp	.LBB145_24
.LBB145_24:                             # %for.inc
                                        #   in Loop: Header=BB145_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB145_18
.LBB145_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB145_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB145_30
.LBB145_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB145_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_29:                             # %if.end45
	jmp	.LBB145_30
.LBB145_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB145_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB145_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB145_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB145_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB145_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB145_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB145_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB145_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB145_41
.LBB145_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_41:                             # %if.end72
	jmp	.LBB145_42
.LBB145_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB145_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB145_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB145_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB145_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB145_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB145_51
	jmp	.LBB145_49
.LBB145_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB145_54
	jmp	.LBB145_50
.LBB145_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB145_61
	jmp	.LBB145_70
.LBB145_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB145_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_53:                             # %if.end98
	jmp	.LBB145_71
.LBB145_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB145_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB145_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB145_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB145_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_60:                             # %if.end119
	jmp	.LBB145_71
.LBB145_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB145_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB145_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB145_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB145_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB145_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB145_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB145_80
.LBB145_69:                             # %if.end146
	jmp	.LBB145_71
.LBB145_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB145_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB145_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB145_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB145_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB145_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB145_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB145_77:                             # %if.end163
	jmp	.LBB145_78
.LBB145_78:                             # %if.end164
	jmp	.LBB145_79
.LBB145_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB145_80:                             # %return
	cmpl	$929636624, -60(%rbp)   # imm = 0x37692110
	jne	.LBB145_82
.LBB145_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_81
.Lfunc_end145:
	.size	compress.103, .Lfunc_end145-compress.103
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.104
.LCPI146_0:
	.quad	4607182418800017408     # double 1
.LCPI146_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.104,@function
uInt64_to_double.104:                   # @uInt64_to_double.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI146_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$373694562, -28(%rbp)   # imm = 0x16462062
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB146_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB146_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB146_1 Depth=1
	vmovsd	.LCPI146_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_1
.LBB146_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$373694562, -28(%rbp)   # imm = 0x16462062
	jne	.LBB146_6
.LBB146_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB146_5
.Lfunc_end146:
	.size	uInt64_to_double.104, .Lfunc_end146-uInt64_to_double.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.105
	.type	uncompressStream.105,@function
uncompressStream.105:                   # @uncompressStream.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$73719510, -68(%rbp)    # imm = 0x464DED6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_2
# %bb.1:                                # %if.then
	jmp	.LBB147_66
.LBB147_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_4
# %bb.3:                                # %if.then3
	jmp	.LBB147_66
.LBB147_4:                              # %if.end4
	jmp	.LBB147_5
.LBB147_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_9 Depth 2
                                        #     Child Loop BB147_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB147_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB147_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB147_8
.LBB147_7:                              # %if.then9
	jmp	.LBB147_62
.LBB147_8:                              # %if.end10
                                        #   in Loop: Header=BB147_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB147_9:                              # %while.cond11
                                        #   Parent Loop BB147_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB147_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB147_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB147_12
# %bb.11:                               # %if.then19
	jmp	.LBB147_49
.LBB147_12:                             # %if.end20
                                        #   in Loop: Header=BB147_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB147_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB147_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB147_16
.LBB147_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB147_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB147_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB147_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB147_16:                             # %if.end32
                                        #   in Loop: Header=BB147_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_18
# %bb.17:                               # %if.then35
	jmp	.LBB147_66
.LBB147_18:                             # %if.end36
                                        #   in Loop: Header=BB147_9 Depth=2
	jmp	.LBB147_9
.LBB147_19:                             # %while.end
                                        #   in Loop: Header=BB147_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB147_21
# %bb.20:                               # %if.then39
	jmp	.LBB147_62
.LBB147_21:                             # %if.end40
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB147_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB147_23:                             # %if.end44
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB147_24:                             # %for.cond
                                        #   Parent Loop BB147_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB147_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB147_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB147_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB147_24
.LBB147_27:                             # %for.end
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB147_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB147_29:                             # %if.end53
                                        #   in Loop: Header=BB147_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB147_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB147_32
# %bb.31:                               # %if.then60
	jmp	.LBB147_33
.LBB147_32:                             # %if.end61
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_5
.LBB147_33:                             # %while.end62
	jmp	.LBB147_34
.LBB147_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_36
# %bb.35:                               # %if.then65
	jmp	.LBB147_66
.LBB147_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB147_38
# %bb.37:                               # %if.then70
	jmp	.LBB147_66
.LBB147_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_40
# %bb.39:                               # %if.then74
	jmp	.LBB147_66
.LBB147_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB147_42
# %bb.41:                               # %if.then79
	jmp	.LBB147_66
.LBB147_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB147_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB147_45
# %bb.44:                               # %if.then87
	jmp	.LBB147_66
.LBB147_45:                             # %if.end88
	jmp	.LBB147_46
.LBB147_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB147_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB147_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB147_80
.LBB147_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB147_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB147_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB147_53
# %bb.52:                               # %if.then100
	jmp	.LBB147_60
.LBB147_53:                             # %if.end101
                                        #   in Loop: Header=BB147_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_55
# %bb.54:                               # %if.then107
	jmp	.LBB147_66
.LBB147_55:                             # %if.end108
                                        #   in Loop: Header=BB147_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB147_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB147_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB147_57:                             # %if.end115
                                        #   in Loop: Header=BB147_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB147_59
# %bb.58:                               # %if.then118
	jmp	.LBB147_66
.LBB147_59:                             # %if.end119
                                        #   in Loop: Header=BB147_51 Depth=1
	jmp	.LBB147_51
.LBB147_60:                             # %while.end120
	jmp	.LBB147_34
.LBB147_61:                             # %if.end121
	jmp	.LBB147_62
.LBB147_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB147_79
# %bb.63:                               # %errhandler
	movq	.LJTI147_0(,%rax,8), %rax
	jmpq	*%rax
.LBB147_64:                             # %sw.bb
	callq	configError
.LBB147_65:                             # %sw.bb122
	jmp	.LBB147_66
.LBB147_66:                             # %errhandler_io
	callq	ioError
.LBB147_67:                             # %sw.bb123
	callq	crcError
.LBB147_68:                             # %sw.bb124
	callq	outOfMemory
.LBB147_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB147_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB147_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB147_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB147_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB147_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB147_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB147_80
.LBB147_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB147_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB147_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB147_80
.LBB147_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB147_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$73719510, -68(%rbp)    # imm = 0x464DED6
	jne	.LBB147_82
.LBB147_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_81
.Lfunc_end147:
	.size	uncompressStream.105, .Lfunc_end147-uncompressStream.105
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI147_0:
	.quad	.LBB147_64
	.quad	.LBB147_79
	.quad	.LBB147_69
	.quad	.LBB147_65
	.quad	.LBB147_70
	.quad	.LBB147_67
	.quad	.LBB147_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.106
	.type	uInt64_toAscii.106,@function
uInt64_toAscii.106:                     # @uInt64_toAscii.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$650995441, -16(%rbp)   # imm = 0x26CD66F1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB148_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB148_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB148_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB148_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB148_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB148_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB148_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_4
.LBB148_7:                              # %for.end
	cmpl	$650995441, -16(%rbp)   # imm = 0x26CD66F1
	jne	.LBB148_9
.LBB148_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_8
.Lfunc_end148:
	.size	uInt64_toAscii.106, .Lfunc_end148-uInt64_toAscii.106
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.107
	.type	mapSuffix.107,@function
mapSuffix.107:                          # @mapSuffix.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$970593171, -36(%rbp)   # imm = 0x39DA1393
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB149_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB149_3
.LBB149_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB149_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$970593171, -36(%rbp)   # imm = 0x39DA1393
	jne	.LBB149_5
.LBB149_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_4
.Lfunc_end149:
	.size	mapSuffix.107, .Lfunc_end149-mapSuffix.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.108
	.type	uncompress.108,@function
uncompress.108:                         # @uncompress.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$936067529, -68(%rbp)   # imm = 0x37CB41C9
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB150_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB150_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB150_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB150_6
	jmp	.LBB150_4
.LBB150_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB150_14
	jmp	.LBB150_5
.LBB150_5:                              # %if.end
	subl	$3, %eax
	je	.LBB150_7
	jmp	.LBB150_15
.LBB150_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB150_15
.LBB150_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB150_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB150_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB150_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB150_11
# %bb.10:                               # %if.then6
	jmp	.LBB150_16
.LBB150_11:                             # %if.end7
                                        #   in Loop: Header=BB150_8 Depth=1
	jmp	.LBB150_12
.LBB150_12:                             # %for.inc
                                        #   in Loop: Header=BB150_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB150_8
.LBB150_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB150_15
.LBB150_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB150_15:                             # %sw.epilog
	jmp	.LBB150_16
.LBB150_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB150_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB150_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB150_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB150_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB150_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB150_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB150_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB150_29
.LBB150_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB150_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_28:                             # %if.end40
	jmp	.LBB150_29
.LBB150_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB150_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB150_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB150_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB150_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB150_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB150_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB150_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB150_38:                             # %if.end61
	jmp	.LBB150_39
.LBB150_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB150_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB150_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB150_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB150_44
.LBB150_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_44:                             # %if.end74
	jmp	.LBB150_45
.LBB150_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB150_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB150_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB150_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB150_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB150_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB150_54
	jmp	.LBB150_52
.LBB150_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB150_57
	jmp	.LBB150_53
.LBB150_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB150_62
	jmp	.LBB150_71
.LBB150_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB150_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_56:                             # %if.end100
	jmp	.LBB150_72
.LBB150_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB150_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB150_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB150_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_61:                             # %if.end114
	jmp	.LBB150_72
.LBB150_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB150_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB150_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB150_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB150_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB150_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB150_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB150_95
.LBB150_70:                             # %if.end141
	jmp	.LBB150_72
.LBB150_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB150_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB150_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB150_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB150_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB150_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB150_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB150_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB150_79:                             # %if.end161
	jmp	.LBB150_80
.LBB150_80:                             # %if.end162
	jmp	.LBB150_81
.LBB150_81:                             # %if.end163
	jmp	.LBB150_87
.LBB150_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB150_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB150_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB150_85:                             # %if.end173
	jmp	.LBB150_86
.LBB150_86:                             # %if.end174
	jmp	.LBB150_87
.LBB150_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB150_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB150_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB150_90:                             # %if.end182
	jmp	.LBB150_95
.LBB150_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB150_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB150_94
.LBB150_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB150_94:                             # %if.end190
	jmp	.LBB150_95
.LBB150_95:                             # %if.end191
	cmpl	$936067529, -68(%rbp)   # imm = 0x37CB41C9
	jne	.LBB150_97
.LBB150_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_96
.Lfunc_end150:
	.size	uncompress.108, .Lfunc_end150-uncompress.108
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.109 # -- Begin function fopen_output_safely.109
	.p2align	4, 0x90
	.type	fopen_output_safely.109,@function
fopen_output_safely.109:                # @fopen_output_safely.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1451285462, -16(%rbp)  # imm = 0x5680DBD6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB151_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB151_5
.LBB151_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB151_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB151_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB151_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1451285462, -16(%rbp)  # imm = 0x5680DBD6
	jne	.LBB151_7
.LBB151_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_6
.Lfunc_end151:
	.size	fopen_output_safely.109, .Lfunc_end151-fopen_output_safely.109
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.110
.LCPI152_0:
	.quad	4636737291354636288     # double 100
.LCPI152_1:
	.quad	4607182418800017408     # double 1
.LCPI152_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.110,@function
compressStream.110:                     # @compressStream.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1570281318, -76(%rbp)  # imm = 0x5D989766
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB152_2
# %bb.1:                                # %if.then
	jmp	.LBB152_46
.LBB152_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB152_4
# %bb.3:                                # %if.then3
	jmp	.LBB152_46
.LBB152_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB152_6
# %bb.5:                                # %if.then6
	jmp	.LBB152_40
.LBB152_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB152_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB152_8:                              # %if.end11
	jmp	.LBB152_9
.LBB152_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB152_11
# %bb.10:                               # %if.then14
	jmp	.LBB152_18
.LBB152_11:                             # %if.end15
                                        #   in Loop: Header=BB152_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB152_13
# %bb.12:                               # %if.then19
	jmp	.LBB152_46
.LBB152_13:                             # %if.end20
                                        #   in Loop: Header=BB152_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB152_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB152_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB152_15:                             # %if.end25
                                        #   in Loop: Header=BB152_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB152_17
# %bb.16:                               # %if.then28
	jmp	.LBB152_40
.LBB152_17:                             # %if.end29
                                        #   in Loop: Header=BB152_9 Depth=1
	jmp	.LBB152_9
.LBB152_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB152_20
# %bb.19:                               # %if.then32
	jmp	.LBB152_40
.LBB152_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB152_22
# %bb.21:                               # %if.then36
	jmp	.LBB152_46
.LBB152_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB152_24
# %bb.23:                               # %if.then41
	jmp	.LBB152_46
.LBB152_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB152_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB152_27
# %bb.26:                               # %if.then49
	jmp	.LBB152_46
.LBB152_27:                             # %if.end50
	jmp	.LBB152_28
.LBB152_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB152_30
# %bb.29:                               # %if.then54
	jmp	.LBB152_46
.LBB152_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB152_32
# %bb.31:                               # %if.then59
	jmp	.LBB152_46
.LBB152_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB152_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB152_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB152_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB152_37
.LBB152_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI152_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI152_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI152_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB152_37:                             # %if.end80
	jmp	.LBB152_38
.LBB152_38:                             # %if.end81
	cmpl	$1570281318, -76(%rbp)  # imm = 0x5D989766
	jne	.LBB152_48
.LBB152_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB152_43
	jmp	.LBB152_41
.LBB152_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB152_45
	jmp	.LBB152_42
.LBB152_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB152_44
	jmp	.LBB152_47
.LBB152_43:                             # %sw.bb
	callq	configError
.LBB152_44:                             # %sw.bb82
	callq	outOfMemory
.LBB152_45:                             # %sw.bb83
	jmp	.LBB152_46
.LBB152_46:                             # %errhandler_io
	callq	ioError
.LBB152_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB152_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB152_39
.Lfunc_end152:
	.size	compressStream.110, .Lfunc_end152-compressStream.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.111
	.type	myfeof.111,@function
myfeof.111:                             # @myfeof.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1573282088, -20(%rbp)  # imm = 0x5DC66128
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB153_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB153_3
.LBB153_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB153_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1573282088, -20(%rbp)  # imm = 0x5DC66128
	jne	.LBB153_5
.LBB153_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_4
.Lfunc_end153:
	.size	myfeof.111, .Lfunc_end153-myfeof.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.112
	.type	uncompress.112,@function
uncompress.112:                         # @uncompress.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1899249729, -68(%rbp)  # imm = 0x71344041
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB154_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB154_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB154_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB154_6
	jmp	.LBB154_4
.LBB154_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB154_14
	jmp	.LBB154_5
.LBB154_5:                              # %if.end
	subl	$3, %eax
	je	.LBB154_7
	jmp	.LBB154_15
.LBB154_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB154_15
.LBB154_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB154_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB154_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB154_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB154_11
# %bb.10:                               # %if.then6
	jmp	.LBB154_16
.LBB154_11:                             # %if.end7
                                        #   in Loop: Header=BB154_8 Depth=1
	jmp	.LBB154_12
.LBB154_12:                             # %for.inc
                                        #   in Loop: Header=BB154_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB154_8
.LBB154_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB154_15
.LBB154_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB154_15:                             # %sw.epilog
	jmp	.LBB154_16
.LBB154_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB154_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB154_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB154_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB154_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB154_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB154_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB154_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB154_29
.LBB154_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB154_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_28:                             # %if.end40
	jmp	.LBB154_29
.LBB154_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB154_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB154_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB154_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB154_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB154_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB154_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB154_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB154_38:                             # %if.end61
	jmp	.LBB154_39
.LBB154_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB154_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB154_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB154_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB154_44
.LBB154_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_44:                             # %if.end74
	jmp	.LBB154_45
.LBB154_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB154_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB154_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB154_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB154_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB154_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB154_54
	jmp	.LBB154_52
.LBB154_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB154_57
	jmp	.LBB154_53
.LBB154_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB154_62
	jmp	.LBB154_71
.LBB154_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB154_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_56:                             # %if.end100
	jmp	.LBB154_72
.LBB154_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB154_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB154_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB154_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_61:                             # %if.end114
	jmp	.LBB154_72
.LBB154_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB154_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB154_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB154_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB154_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB154_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB154_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB154_95
.LBB154_70:                             # %if.end141
	jmp	.LBB154_72
.LBB154_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB154_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB154_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB154_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB154_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB154_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB154_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB154_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB154_79:                             # %if.end161
	jmp	.LBB154_80
.LBB154_80:                             # %if.end162
	jmp	.LBB154_81
.LBB154_81:                             # %if.end163
	jmp	.LBB154_87
.LBB154_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB154_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB154_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB154_85:                             # %if.end173
	jmp	.LBB154_86
.LBB154_86:                             # %if.end174
	jmp	.LBB154_87
.LBB154_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB154_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB154_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB154_90:                             # %if.end182
	jmp	.LBB154_95
.LBB154_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB154_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB154_94
.LBB154_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB154_94:                             # %if.end190
	jmp	.LBB154_95
.LBB154_95:                             # %if.end191
	cmpl	$1899249729, -68(%rbp)  # imm = 0x71344041
	jne	.LBB154_97
.LBB154_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_96
.Lfunc_end154:
	.size	uncompress.112, .Lfunc_end154-uncompress.112
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.113
	.type	addFlagsFromEnvVar.113,@function
addFlagsFromEnvVar.113:                 # @addFlagsFromEnvVar.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1278476848, -24(%rbp)  # imm = 0x4C340230
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB155_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB155_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_5 Depth 2
                                        #     Child Loop BB155_8 Depth 2
                                        #     Child Loop BB155_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB155_4
# %bb.3:                                # %if.then3
	jmp	.LBB155_21
.LBB155_4:                              # %if.end
                                        #   in Loop: Header=BB155_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB155_5:                              # %while.cond4
                                        #   Parent Loop BB155_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB155_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB155_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB155_5
.LBB155_7:                              # %while.end
                                        #   in Loop: Header=BB155_2 Depth=1
	jmp	.LBB155_8
.LBB155_8:                              # %while.cond12
                                        #   Parent Loop BB155_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB155_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB155_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB155_10:                             # %land.end
                                        #   in Loop: Header=BB155_8 Depth=2
	testb	$1, %al
	jne	.LBB155_11
	jmp	.LBB155_12
.LBB155_11:                             # %while.body27
                                        #   in Loop: Header=BB155_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_8
.LBB155_12:                             # %while.end28
                                        #   in Loop: Header=BB155_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB155_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB155_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB155_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB155_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB155_15:                             # %if.end35
                                        #   in Loop: Header=BB155_2 Depth=1
	movl	$0, -8(%rbp)
.LBB155_16:                             # %for.cond
                                        #   Parent Loop BB155_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB155_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB155_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB155_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_16
.LBB155_19:                             # %for.end
                                        #   in Loop: Header=BB155_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB155_20:                             # %if.end46
                                        #   in Loop: Header=BB155_2 Depth=1
	jmp	.LBB155_2
.LBB155_21:                             # %while.end47
	jmp	.LBB155_22
.LBB155_22:                             # %if.end48
	cmpl	$1278476848, -24(%rbp)  # imm = 0x4C340230
	jne	.LBB155_24
.LBB155_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_23
.Lfunc_end155:
	.size	addFlagsFromEnvVar.113, .Lfunc_end155-addFlagsFromEnvVar.113
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.114 # -- Begin function fopen_output_safely.114
	.p2align	4, 0x90
	.type	fopen_output_safely.114,@function
fopen_output_safely.114:                # @fopen_output_safely.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$899612378, -16(%rbp)   # imm = 0x359EFEDA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB156_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB156_5
.LBB156_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB156_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB156_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB156_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$899612378, -16(%rbp)   # imm = 0x359EFEDA
	jne	.LBB156_7
.LBB156_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_6
.Lfunc_end156:
	.size	fopen_output_safely.114, .Lfunc_end156-fopen_output_safely.114
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.115
	.type	uInt64_toAscii.115,@function
uInt64_toAscii.115:                     # @uInt64_toAscii.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1149690958, -12(%rbp)  # imm = 0x4486E44E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB157_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB157_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB157_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB157_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB157_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB157_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB157_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB157_4
.LBB157_7:                              # %for.end
	cmpl	$1149690958, -12(%rbp)  # imm = 0x4486E44E
	jne	.LBB157_9
.LBB157_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_8
.Lfunc_end157:
	.size	uInt64_toAscii.115, .Lfunc_end157-uInt64_toAscii.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.116
	.type	applySavedMetaInfoToOutputFile.116,@function
applySavedMetaInfoToOutputFile.116:     # @applySavedMetaInfoToOutputFile.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1894693315, -20(%rbp)  # imm = 0x70EEB9C3
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB158_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB158_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB158_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB158_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$1894693315, -20(%rbp)  # imm = 0x70EEB9C3
	jne	.LBB158_6
.LBB158_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_5
.Lfunc_end158:
	.size	applySavedMetaInfoToOutputFile.116, .Lfunc_end158-applySavedMetaInfoToOutputFile.116
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.117
.LCPI159_0:
	.quad	4607182418800017408     # double 1
.LCPI159_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.117,@function
uInt64_to_double.117:                   # @uInt64_to_double.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI159_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$2023866578, -28(%rbp)  # imm = 0x78A1C0D2
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB159_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB159_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB159_1 Depth=1
	vmovsd	.LCPI159_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB159_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB159_1
.LBB159_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2023866578, -28(%rbp)  # imm = 0x78A1C0D2
	jne	.LBB159_6
.LBB159_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB159_5
.Lfunc_end159:
	.size	uInt64_to_double.117, .Lfunc_end159-uInt64_to_double.117
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.118 # -- Begin function fopen_output_safely.118
	.p2align	4, 0x90
	.type	fopen_output_safely.118,@function
fopen_output_safely.118:                # @fopen_output_safely.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1365344676, -16(%rbp)  # imm = 0x516181A4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB160_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB160_5
.LBB160_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB160_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB160_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB160_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1365344676, -16(%rbp)  # imm = 0x516181A4
	jne	.LBB160_7
.LBB160_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_6
.Lfunc_end160:
	.size	fopen_output_safely.118, .Lfunc_end160-fopen_output_safely.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.119
	.type	testf.119,@function
testf.119:                              # @testf.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$16634680, -44(%rbp)    # imm = 0xFDD338
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB161_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB161_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB161_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB161_6
	jmp	.LBB161_4
.LBB161_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB161_8
	jmp	.LBB161_5
.LBB161_5:                              # %if.end
	subl	$3, %eax
	je	.LBB161_7
	jmp	.LBB161_9
.LBB161_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB161_9
.LBB161_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB161_9
.LBB161_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB161_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB161_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB161_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB161_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB161_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB161_37
.LBB161_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB161_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB161_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB161_37
.LBB161_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB161_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB161_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB161_37
.LBB161_20:                             # %if.end30
	jmp	.LBB161_21
.LBB161_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB161_23
	jmp	.LBB161_22
.LBB161_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB161_26
	jmp	.LBB161_29
.LBB161_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB161_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB161_37
.LBB161_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB161_30
.LBB161_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB161_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB161_37
.LBB161_28:                             # %if.end48
	jmp	.LBB161_30
.LBB161_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB161_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB161_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB161_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB161_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB161_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB161_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB161_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB161_37:                             # %if.end67
	cmpl	$16634680, -44(%rbp)    # imm = 0xFDD338
	jne	.LBB161_39
.LBB161_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_38
.Lfunc_end161:
	.size	testf.119, .Lfunc_end161-testf.119
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.120
	.type	testStream.120,@function
testStream.120:                         # @testStream.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$301002398, -52(%rbp)   # imm = 0x11F0EE9E
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB162_2
# %bb.1:                                # %if.then
	jmp	.LBB162_38
.LBB162_2:                              # %if.end
	jmp	.LBB162_3
.LBB162_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_7 Depth 2
                                        #     Child Loop BB162_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB162_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB162_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB162_6
.LBB162_5:                              # %if.then5
	jmp	.LBB162_32
.LBB162_6:                              # %if.end6
                                        #   in Loop: Header=BB162_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB162_7:                              # %while.cond7
                                        #   Parent Loop BB162_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB162_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB162_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB162_10
# %bb.9:                                # %if.then15
	jmp	.LBB162_32
.LBB162_10:                             # %if.end16
                                        #   in Loop: Header=BB162_7 Depth=2
	jmp	.LBB162_7
.LBB162_11:                             # %while.end
                                        #   in Loop: Header=BB162_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB162_13
# %bb.12:                               # %if.then19
	jmp	.LBB162_32
.LBB162_13:                             # %if.end20
                                        #   in Loop: Header=BB162_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB162_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB162_15:                             # %if.end24
                                        #   in Loop: Header=BB162_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB162_16:                             # %for.cond
                                        #   Parent Loop BB162_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB162_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB162_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB162_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB162_16
.LBB162_19:                             # %for.end
                                        #   in Loop: Header=BB162_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB162_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB162_21:                             # %if.end33
                                        #   in Loop: Header=BB162_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB162_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB162_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB162_24
# %bb.23:                               # %if.then39
	jmp	.LBB162_25
.LBB162_24:                             # %if.end40
                                        #   in Loop: Header=BB162_3 Depth=1
	jmp	.LBB162_3
.LBB162_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB162_27
# %bb.26:                               # %if.then44
	jmp	.LBB162_38
.LBB162_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB162_29
# %bb.28:                               # %if.then49
	jmp	.LBB162_38
.LBB162_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB162_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB162_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB162_50
.LBB162_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB162_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB162_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB162_49
# %bb.35:                               # %if.end60
	movq	.LJTI162_0(,%rax,8), %rax
	jmpq	*%rax
.LBB162_36:                             # %sw.bb
	callq	configError
.LBB162_37:                             # %sw.bb61
	jmp	.LBB162_38
.LBB162_38:                             # %errhandler_io
	callq	ioError
.LBB162_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB162_50
.LBB162_40:                             # %sw.bb64
	callq	outOfMemory
.LBB162_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB162_50
.LBB162_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB162_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB162_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB162_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB162_50
.LBB162_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB162_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB162_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB162_50
.LBB162_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB162_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$301002398, -52(%rbp)   # imm = 0x11F0EE9E
	jne	.LBB162_52
.LBB162_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_51
.Lfunc_end162:
	.size	testStream.120, .Lfunc_end162-testStream.120
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI162_0:
	.quad	.LBB162_36
	.quad	.LBB162_49
	.quad	.LBB162_41
	.quad	.LBB162_37
	.quad	.LBB162_42
	.quad	.LBB162_39
	.quad	.LBB162_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.121
	.type	addFlagsFromEnvVar.121,@function
addFlagsFromEnvVar.121:                 # @addFlagsFromEnvVar.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$600709429, -24(%rbp)   # imm = 0x23CE1935
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB163_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB163_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB163_5 Depth 2
                                        #     Child Loop BB163_8 Depth 2
                                        #     Child Loop BB163_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB163_4
# %bb.3:                                # %if.then3
	jmp	.LBB163_21
.LBB163_4:                              # %if.end
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB163_5:                              # %while.cond4
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB163_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB163_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB163_5
.LBB163_7:                              # %while.end
                                        #   in Loop: Header=BB163_2 Depth=1
	jmp	.LBB163_8
.LBB163_8:                              # %while.cond12
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB163_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB163_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB163_10:                             # %land.end
                                        #   in Loop: Header=BB163_8 Depth=2
	testb	$1, %al
	jne	.LBB163_11
	jmp	.LBB163_12
.LBB163_11:                             # %while.body27
                                        #   in Loop: Header=BB163_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB163_8
.LBB163_12:                             # %while.end28
                                        #   in Loop: Header=BB163_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB163_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB163_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB163_15:                             # %if.end35
                                        #   in Loop: Header=BB163_2 Depth=1
	movl	$0, -8(%rbp)
.LBB163_16:                             # %for.cond
                                        #   Parent Loop BB163_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB163_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB163_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB163_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB163_16
.LBB163_19:                             # %for.end
                                        #   in Loop: Header=BB163_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB163_20:                             # %if.end46
                                        #   in Loop: Header=BB163_2 Depth=1
	jmp	.LBB163_2
.LBB163_21:                             # %while.end47
	jmp	.LBB163_22
.LBB163_22:                             # %if.end48
	cmpl	$600709429, -24(%rbp)   # imm = 0x23CE1935
	jne	.LBB163_24
.LBB163_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_23
.Lfunc_end163:
	.size	addFlagsFromEnvVar.121, .Lfunc_end163-addFlagsFromEnvVar.121
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.122
.LCPI164_0:
	.quad	4636737291354636288     # double 100
.LCPI164_1:
	.quad	4607182418800017408     # double 1
.LCPI164_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.122,@function
compressStream.122:                     # @compressStream.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$890057776, -76(%rbp)   # imm = 0x350D3430
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_2
# %bb.1:                                # %if.then
	jmp	.LBB164_46
.LBB164_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_4
# %bb.3:                                # %if.then3
	jmp	.LBB164_46
.LBB164_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB164_6
# %bb.5:                                # %if.then6
	jmp	.LBB164_40
.LBB164_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB164_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB164_8:                              # %if.end11
	jmp	.LBB164_9
.LBB164_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB164_11
# %bb.10:                               # %if.then14
	jmp	.LBB164_18
.LBB164_11:                             # %if.end15
                                        #   in Loop: Header=BB164_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_13
# %bb.12:                               # %if.then19
	jmp	.LBB164_46
.LBB164_13:                             # %if.end20
                                        #   in Loop: Header=BB164_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB164_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB164_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB164_15:                             # %if.end25
                                        #   in Loop: Header=BB164_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB164_17
# %bb.16:                               # %if.then28
	jmp	.LBB164_40
.LBB164_17:                             # %if.end29
                                        #   in Loop: Header=BB164_9 Depth=1
	jmp	.LBB164_9
.LBB164_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB164_20
# %bb.19:                               # %if.then32
	jmp	.LBB164_40
.LBB164_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_22
# %bb.21:                               # %if.then36
	jmp	.LBB164_46
.LBB164_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB164_24
# %bb.23:                               # %if.then41
	jmp	.LBB164_46
.LBB164_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB164_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB164_27
# %bb.26:                               # %if.then49
	jmp	.LBB164_46
.LBB164_27:                             # %if.end50
	jmp	.LBB164_28
.LBB164_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB164_30
# %bb.29:                               # %if.then54
	jmp	.LBB164_46
.LBB164_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB164_32
# %bb.31:                               # %if.then59
	jmp	.LBB164_46
.LBB164_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB164_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB164_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB164_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB164_37
.LBB164_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI164_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI164_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI164_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB164_37:                             # %if.end80
	jmp	.LBB164_38
.LBB164_38:                             # %if.end81
	cmpl	$890057776, -76(%rbp)   # imm = 0x350D3430
	jne	.LBB164_48
.LBB164_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB164_43
	jmp	.LBB164_41
.LBB164_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB164_45
	jmp	.LBB164_42
.LBB164_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB164_44
	jmp	.LBB164_47
.LBB164_43:                             # %sw.bb
	callq	configError
.LBB164_44:                             # %sw.bb82
	callq	outOfMemory
.LBB164_45:                             # %sw.bb83
	jmp	.LBB164_46
.LBB164_46:                             # %errhandler_io
	callq	ioError
.LBB164_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB164_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB164_39
.Lfunc_end164:
	.size	compressStream.122, .Lfunc_end164-compressStream.122
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.123
	.type	addFlagsFromEnvVar.123,@function
addFlagsFromEnvVar.123:                 # @addFlagsFromEnvVar.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$349927554, -24(%rbp)   # imm = 0x14DB7882
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB165_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB165_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_5 Depth 2
                                        #     Child Loop BB165_8 Depth 2
                                        #     Child Loop BB165_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB165_4
# %bb.3:                                # %if.then3
	jmp	.LBB165_21
.LBB165_4:                              # %if.end
                                        #   in Loop: Header=BB165_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB165_5:                              # %while.cond4
                                        #   Parent Loop BB165_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB165_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB165_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB165_5
.LBB165_7:                              # %while.end
                                        #   in Loop: Header=BB165_2 Depth=1
	jmp	.LBB165_8
.LBB165_8:                              # %while.cond12
                                        #   Parent Loop BB165_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB165_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB165_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB165_10:                             # %land.end
                                        #   in Loop: Header=BB165_8 Depth=2
	testb	$1, %al
	jne	.LBB165_11
	jmp	.LBB165_12
.LBB165_11:                             # %while.body27
                                        #   in Loop: Header=BB165_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_8
.LBB165_12:                             # %while.end28
                                        #   in Loop: Header=BB165_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB165_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB165_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB165_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB165_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB165_15:                             # %if.end35
                                        #   in Loop: Header=BB165_2 Depth=1
	movl	$0, -8(%rbp)
.LBB165_16:                             # %for.cond
                                        #   Parent Loop BB165_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB165_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB165_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB165_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_16
.LBB165_19:                             # %for.end
                                        #   in Loop: Header=BB165_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB165_20:                             # %if.end46
                                        #   in Loop: Header=BB165_2 Depth=1
	jmp	.LBB165_2
.LBB165_21:                             # %while.end47
	jmp	.LBB165_22
.LBB165_22:                             # %if.end48
	cmpl	$349927554, -24(%rbp)   # imm = 0x14DB7882
	jne	.LBB165_24
.LBB165_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_23
.Lfunc_end165:
	.size	addFlagsFromEnvVar.123, .Lfunc_end165-addFlagsFromEnvVar.123
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.124
	.type	hasSuffix.124,@function
hasSuffix.124:                          # @hasSuffix.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1670105145, -24(%rbp)  # imm = 0x638BC839
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB166_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB166_5
.LBB166_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB166_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB166_5
.LBB166_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB166_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1670105145, -24(%rbp)  # imm = 0x638BC839
	jne	.LBB166_7
.LBB166_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_6
.Lfunc_end166:
	.size	hasSuffix.124, .Lfunc_end166-hasSuffix.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.125
	.type	uncompress.125,@function
uncompress.125:                         # @uncompress.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1238686222, -64(%rbp)  # imm = 0x49D4DA0E
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB167_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB167_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB167_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB167_6
	jmp	.LBB167_4
.LBB167_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB167_14
	jmp	.LBB167_5
.LBB167_5:                              # %if.end
	subl	$3, %eax
	je	.LBB167_7
	jmp	.LBB167_15
.LBB167_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB167_15
.LBB167_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB167_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB167_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB167_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB167_11
# %bb.10:                               # %if.then6
	jmp	.LBB167_16
.LBB167_11:                             # %if.end7
                                        #   in Loop: Header=BB167_8 Depth=1
	jmp	.LBB167_12
.LBB167_12:                             # %for.inc
                                        #   in Loop: Header=BB167_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB167_8
.LBB167_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB167_15
.LBB167_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB167_15:                             # %sw.epilog
	jmp	.LBB167_16
.LBB167_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB167_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB167_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB167_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB167_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB167_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB167_29
.LBB167_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB167_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_28:                             # %if.end40
	jmp	.LBB167_29
.LBB167_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB167_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB167_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB167_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB167_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB167_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB167_38:                             # %if.end61
	jmp	.LBB167_39
.LBB167_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB167_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB167_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB167_44
.LBB167_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_44:                             # %if.end74
	jmp	.LBB167_45
.LBB167_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB167_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB167_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB167_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB167_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB167_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB167_54
	jmp	.LBB167_52
.LBB167_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB167_57
	jmp	.LBB167_53
.LBB167_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB167_62
	jmp	.LBB167_71
.LBB167_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB167_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_56:                             # %if.end100
	jmp	.LBB167_72
.LBB167_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB167_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB167_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB167_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_61:                             # %if.end114
	jmp	.LBB167_72
.LBB167_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB167_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB167_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB167_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB167_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB167_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB167_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_70:                             # %if.end141
	jmp	.LBB167_72
.LBB167_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB167_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB167_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB167_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB167_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB167_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB167_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB167_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB167_79:                             # %if.end161
	jmp	.LBB167_80
.LBB167_80:                             # %if.end162
	jmp	.LBB167_81
.LBB167_81:                             # %if.end163
	jmp	.LBB167_87
.LBB167_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB167_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB167_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB167_85:                             # %if.end173
	jmp	.LBB167_86
.LBB167_86:                             # %if.end174
	jmp	.LBB167_87
.LBB167_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB167_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB167_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB167_90:                             # %if.end182
	jmp	.LBB167_95
.LBB167_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB167_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB167_94
.LBB167_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_94:                             # %if.end190
	jmp	.LBB167_95
.LBB167_95:                             # %if.end191
	cmpl	$1238686222, -64(%rbp)  # imm = 0x49D4DA0E
	jne	.LBB167_97
.LBB167_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_96
.Lfunc_end167:
	.size	uncompress.125, .Lfunc_end167-uncompress.125
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.126
	.type	uncompress.126,@function
uncompress.126:                         # @uncompress.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2025843160, -60(%rbp)  # imm = 0x78BFE9D8
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB168_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB168_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB168_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB168_6
	jmp	.LBB168_4
.LBB168_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB168_14
	jmp	.LBB168_5
.LBB168_5:                              # %if.end
	subl	$3, %eax
	je	.LBB168_7
	jmp	.LBB168_15
.LBB168_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB168_15
.LBB168_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB168_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB168_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB168_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB168_11
# %bb.10:                               # %if.then6
	jmp	.LBB168_16
.LBB168_11:                             # %if.end7
                                        #   in Loop: Header=BB168_8 Depth=1
	jmp	.LBB168_12
.LBB168_12:                             # %for.inc
                                        #   in Loop: Header=BB168_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB168_8
.LBB168_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB168_15
.LBB168_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB168_15:                             # %sw.epilog
	jmp	.LBB168_16
.LBB168_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB168_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB168_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB168_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB168_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB168_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB168_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB168_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB168_29
.LBB168_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB168_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_28:                             # %if.end40
	jmp	.LBB168_29
.LBB168_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB168_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB168_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB168_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB168_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB168_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB168_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB168_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB168_38:                             # %if.end61
	jmp	.LBB168_39
.LBB168_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB168_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB168_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB168_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB168_44
.LBB168_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_44:                             # %if.end74
	jmp	.LBB168_45
.LBB168_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB168_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB168_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB168_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB168_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB168_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB168_54
	jmp	.LBB168_52
.LBB168_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB168_57
	jmp	.LBB168_53
.LBB168_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB168_62
	jmp	.LBB168_71
.LBB168_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB168_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_56:                             # %if.end100
	jmp	.LBB168_72
.LBB168_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB168_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB168_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB168_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_61:                             # %if.end114
	jmp	.LBB168_72
.LBB168_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB168_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB168_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB168_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB168_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB168_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB168_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB168_95
.LBB168_70:                             # %if.end141
	jmp	.LBB168_72
.LBB168_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB168_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB168_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB168_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB168_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB168_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB168_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB168_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB168_79:                             # %if.end161
	jmp	.LBB168_80
.LBB168_80:                             # %if.end162
	jmp	.LBB168_81
.LBB168_81:                             # %if.end163
	jmp	.LBB168_87
.LBB168_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB168_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB168_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB168_85:                             # %if.end173
	jmp	.LBB168_86
.LBB168_86:                             # %if.end174
	jmp	.LBB168_87
.LBB168_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB168_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB168_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB168_90:                             # %if.end182
	jmp	.LBB168_95
.LBB168_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB168_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB168_94
.LBB168_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB168_94:                             # %if.end190
	jmp	.LBB168_95
.LBB168_95:                             # %if.end191
	cmpl	$2025843160, -60(%rbp)  # imm = 0x78BFE9D8
	jne	.LBB168_97
.LBB168_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_96
.Lfunc_end168:
	.size	uncompress.126, .Lfunc_end168-uncompress.126
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.127
	.type	notAStandardFile.127,@function
notAStandardFile.127:                   # @notAStandardFile.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$184124889, -16(%rbp)   # imm = 0xAF985D9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB169_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB169_5
.LBB169_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB169_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB169_5
.LBB169_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB169_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$184124889, -16(%rbp)   # imm = 0xAF985D9
	jne	.LBB169_7
.LBB169_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_6
.Lfunc_end169:
	.size	notAStandardFile.127, .Lfunc_end169-notAStandardFile.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.128
	.type	testf.128,@function
testf.128:                              # @testf.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$977363185, -44(%rbp)   # imm = 0x3A4160F1
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB170_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB170_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB170_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB170_6
	jmp	.LBB170_4
.LBB170_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB170_8
	jmp	.LBB170_5
.LBB170_5:                              # %if.end
	subl	$3, %eax
	je	.LBB170_7
	jmp	.LBB170_9
.LBB170_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB170_9
.LBB170_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB170_9
.LBB170_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB170_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB170_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB170_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB170_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB170_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB170_37
.LBB170_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB170_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB170_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB170_37
.LBB170_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB170_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB170_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB170_37
.LBB170_20:                             # %if.end30
	jmp	.LBB170_21
.LBB170_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB170_23
	jmp	.LBB170_22
.LBB170_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB170_26
	jmp	.LBB170_29
.LBB170_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB170_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB170_37
.LBB170_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB170_30
.LBB170_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB170_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB170_37
.LBB170_28:                             # %if.end48
	jmp	.LBB170_30
.LBB170_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB170_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB170_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB170_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB170_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB170_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB170_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB170_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB170_37:                             # %if.end67
	cmpl	$977363185, -44(%rbp)   # imm = 0x3A4160F1
	jne	.LBB170_39
.LBB170_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_38
.Lfunc_end170:
	.size	testf.128, .Lfunc_end170-testf.128
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.129
	.type	hasSuffix.129,@function
hasSuffix.129:                          # @hasSuffix.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1957972722, -24(%rbp)  # imm = 0x74B44AF2
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB171_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB171_5
.LBB171_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB171_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB171_5
.LBB171_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB171_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1957972722, -24(%rbp)  # imm = 0x74B44AF2
	jne	.LBB171_7
.LBB171_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_6
.Lfunc_end171:
	.size	hasSuffix.129, .Lfunc_end171-hasSuffix.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.130
	.type	uInt64_qrm10.130,@function
uInt64_qrm10.130:                       # @uInt64_qrm10.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$750462090, -24(%rbp)   # imm = 0x2CBB248A
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB172_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB172_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB172_1
.LBB172_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$750462090, -24(%rbp)   # imm = 0x2CBB248A
	jne	.LBB172_6
.LBB172_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_5
.Lfunc_end172:
	.size	uInt64_qrm10.130, .Lfunc_end172-uInt64_qrm10.130
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.131
	.type	uInt64_qrm10.131,@function
uInt64_qrm10.131:                       # @uInt64_qrm10.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1158192440, -24(%rbp)  # imm = 0x45089D38
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB173_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB173_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB173_1
.LBB173_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1158192440, -24(%rbp)  # imm = 0x45089D38
	jne	.LBB173_6
.LBB173_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_5
.Lfunc_end173:
	.size	uInt64_qrm10.131, .Lfunc_end173-uInt64_qrm10.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.132
	.type	testf.132,@function
testf.132:                              # @testf.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1372915885, -44(%rbp)  # imm = 0x51D508AD
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB174_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB174_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB174_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB174_6
	jmp	.LBB174_4
.LBB174_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB174_8
	jmp	.LBB174_5
.LBB174_5:                              # %if.end
	subl	$3, %eax
	je	.LBB174_7
	jmp	.LBB174_9
.LBB174_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB174_9
.LBB174_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB174_9
.LBB174_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB174_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB174_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB174_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB174_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB174_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB174_37
.LBB174_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB174_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB174_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB174_37
.LBB174_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB174_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB174_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB174_37
.LBB174_20:                             # %if.end30
	jmp	.LBB174_21
.LBB174_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB174_23
	jmp	.LBB174_22
.LBB174_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB174_26
	jmp	.LBB174_29
.LBB174_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB174_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB174_37
.LBB174_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB174_30
.LBB174_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB174_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB174_37
.LBB174_28:                             # %if.end48
	jmp	.LBB174_30
.LBB174_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB174_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB174_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB174_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB174_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB174_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB174_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB174_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB174_37:                             # %if.end67
	cmpl	$1372915885, -44(%rbp)  # imm = 0x51D508AD
	jne	.LBB174_39
.LBB174_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_38
.Lfunc_end174:
	.size	testf.132, .Lfunc_end174-testf.132
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.133
	.type	addFlagsFromEnvVar.133,@function
addFlagsFromEnvVar.133:                 # @addFlagsFromEnvVar.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$129337587, -24(%rbp)   # imm = 0x7B588F3
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB175_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB175_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_5 Depth 2
                                        #     Child Loop BB175_8 Depth 2
                                        #     Child Loop BB175_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB175_4
# %bb.3:                                # %if.then3
	jmp	.LBB175_21
.LBB175_4:                              # %if.end
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB175_5:                              # %while.cond4
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB175_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB175_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB175_5
.LBB175_7:                              # %while.end
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_8
.LBB175_8:                              # %while.cond12
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB175_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB175_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB175_10:                             # %land.end
                                        #   in Loop: Header=BB175_8 Depth=2
	testb	$1, %al
	jne	.LBB175_11
	jmp	.LBB175_12
.LBB175_11:                             # %while.body27
                                        #   in Loop: Header=BB175_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_8
.LBB175_12:                             # %while.end28
                                        #   in Loop: Header=BB175_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB175_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB175_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB175_15:                             # %if.end35
                                        #   in Loop: Header=BB175_2 Depth=1
	movl	$0, -8(%rbp)
.LBB175_16:                             # %for.cond
                                        #   Parent Loop BB175_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB175_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB175_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB175_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB175_16
.LBB175_19:                             # %for.end
                                        #   in Loop: Header=BB175_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB175_20:                             # %if.end46
                                        #   in Loop: Header=BB175_2 Depth=1
	jmp	.LBB175_2
.LBB175_21:                             # %while.end47
	jmp	.LBB175_22
.LBB175_22:                             # %if.end48
	cmpl	$129337587, -24(%rbp)   # imm = 0x7B588F3
	jne	.LBB175_24
.LBB175_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_23
.Lfunc_end175:
	.size	addFlagsFromEnvVar.133, .Lfunc_end175-addFlagsFromEnvVar.133
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.134
	.type	testStream.134,@function
testStream.134:                         # @testStream.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1934466599, -52(%rbp)  # imm = 0x734D9E27
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB176_2
# %bb.1:                                # %if.then
	jmp	.LBB176_38
.LBB176_2:                              # %if.end
	jmp	.LBB176_3
.LBB176_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_7 Depth 2
                                        #     Child Loop BB176_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB176_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB176_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB176_6
.LBB176_5:                              # %if.then5
	jmp	.LBB176_32
.LBB176_6:                              # %if.end6
                                        #   in Loop: Header=BB176_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB176_7:                              # %while.cond7
                                        #   Parent Loop BB176_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB176_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB176_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB176_10
# %bb.9:                                # %if.then15
	jmp	.LBB176_32
.LBB176_10:                             # %if.end16
                                        #   in Loop: Header=BB176_7 Depth=2
	jmp	.LBB176_7
.LBB176_11:                             # %while.end
                                        #   in Loop: Header=BB176_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB176_13
# %bb.12:                               # %if.then19
	jmp	.LBB176_32
.LBB176_13:                             # %if.end20
                                        #   in Loop: Header=BB176_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB176_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB176_15:                             # %if.end24
                                        #   in Loop: Header=BB176_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB176_16:                             # %for.cond
                                        #   Parent Loop BB176_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB176_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB176_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB176_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_16
.LBB176_19:                             # %for.end
                                        #   in Loop: Header=BB176_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB176_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB176_21:                             # %if.end33
                                        #   in Loop: Header=BB176_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB176_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB176_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB176_24
# %bb.23:                               # %if.then39
	jmp	.LBB176_25
.LBB176_24:                             # %if.end40
                                        #   in Loop: Header=BB176_3 Depth=1
	jmp	.LBB176_3
.LBB176_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB176_27
# %bb.26:                               # %if.then44
	jmp	.LBB176_38
.LBB176_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB176_29
# %bb.28:                               # %if.then49
	jmp	.LBB176_38
.LBB176_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB176_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB176_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB176_50
.LBB176_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB176_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB176_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB176_49
# %bb.35:                               # %if.end60
	movq	.LJTI176_0(,%rax,8), %rax
	jmpq	*%rax
.LBB176_36:                             # %sw.bb
	callq	configError
.LBB176_37:                             # %sw.bb61
	jmp	.LBB176_38
.LBB176_38:                             # %errhandler_io
	callq	ioError
.LBB176_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB176_50
.LBB176_40:                             # %sw.bb64
	callq	outOfMemory
.LBB176_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB176_50
.LBB176_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB176_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB176_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB176_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB176_50
.LBB176_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB176_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB176_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB176_50
.LBB176_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB176_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1934466599, -52(%rbp)  # imm = 0x734D9E27
	jne	.LBB176_52
.LBB176_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_51
.Lfunc_end176:
	.size	testStream.134, .Lfunc_end176-testStream.134
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI176_0:
	.quad	.LBB176_36
	.quad	.LBB176_49
	.quad	.LBB176_41
	.quad	.LBB176_37
	.quad	.LBB176_42
	.quad	.LBB176_39
	.quad	.LBB176_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function notAStandardFile.135
	.type	notAStandardFile.135,@function
notAStandardFile.135:                   # @notAStandardFile.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$343009567, -20(%rbp)   # imm = 0x1471E91F
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB177_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB177_5
.LBB177_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB177_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB177_5
.LBB177_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB177_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$343009567, -20(%rbp)   # imm = 0x1471E91F
	jne	.LBB177_7
.LBB177_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_6
.Lfunc_end177:
	.size	notAStandardFile.135, .Lfunc_end177-notAStandardFile.135
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.136
	.type	addFlagsFromEnvVar.136,@function
addFlagsFromEnvVar.136:                 # @addFlagsFromEnvVar.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1404044996, -24(%rbp)  # imm = 0x53B006C4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB178_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB178_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_5 Depth 2
                                        #     Child Loop BB178_8 Depth 2
                                        #     Child Loop BB178_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB178_4
# %bb.3:                                # %if.then3
	jmp	.LBB178_21
.LBB178_4:                              # %if.end
                                        #   in Loop: Header=BB178_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB178_5:                              # %while.cond4
                                        #   Parent Loop BB178_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB178_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB178_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB178_5
.LBB178_7:                              # %while.end
                                        #   in Loop: Header=BB178_2 Depth=1
	jmp	.LBB178_8
.LBB178_8:                              # %while.cond12
                                        #   Parent Loop BB178_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB178_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB178_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB178_10:                             # %land.end
                                        #   in Loop: Header=BB178_8 Depth=2
	testb	$1, %al
	jne	.LBB178_11
	jmp	.LBB178_12
.LBB178_11:                             # %while.body27
                                        #   in Loop: Header=BB178_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB178_8
.LBB178_12:                             # %while.end28
                                        #   in Loop: Header=BB178_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB178_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB178_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB178_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB178_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB178_15:                             # %if.end35
                                        #   in Loop: Header=BB178_2 Depth=1
	movl	$0, -8(%rbp)
.LBB178_16:                             # %for.cond
                                        #   Parent Loop BB178_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB178_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB178_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB178_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB178_16
.LBB178_19:                             # %for.end
                                        #   in Loop: Header=BB178_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB178_20:                             # %if.end46
                                        #   in Loop: Header=BB178_2 Depth=1
	jmp	.LBB178_2
.LBB178_21:                             # %while.end47
	jmp	.LBB178_22
.LBB178_22:                             # %if.end48
	cmpl	$1404044996, -24(%rbp)  # imm = 0x53B006C4
	jne	.LBB178_24
.LBB178_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_23
.Lfunc_end178:
	.size	addFlagsFromEnvVar.136, .Lfunc_end178-addFlagsFromEnvVar.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.137
	.type	uInt64_isZero.137,@function
uInt64_isZero.137:                      # @uInt64_isZero.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$74430157, -20(%rbp)    # imm = 0x46FB6CD
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB179_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB179_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB179_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB179_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB179_7
.LBB179_4:                              # %if.end
                                        #   in Loop: Header=BB179_1 Depth=1
	jmp	.LBB179_5
.LBB179_5:                              # %for.inc
                                        #   in Loop: Header=BB179_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB179_1
.LBB179_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB179_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$74430157, -20(%rbp)    # imm = 0x46FB6CD
	jne	.LBB179_9
.LBB179_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_8
.Lfunc_end179:
	.size	uInt64_isZero.137, .Lfunc_end179-uInt64_isZero.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.138
	.type	testf.138,@function
testf.138:                              # @testf.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1650155716, -44(%rbp)  # imm = 0x625B60C4
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB180_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB180_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB180_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB180_6
	jmp	.LBB180_4
.LBB180_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB180_8
	jmp	.LBB180_5
.LBB180_5:                              # %if.end
	subl	$3, %eax
	je	.LBB180_7
	jmp	.LBB180_9
.LBB180_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB180_9
.LBB180_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB180_9
.LBB180_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB180_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB180_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB180_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB180_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB180_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB180_37
.LBB180_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB180_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB180_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB180_37
.LBB180_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB180_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB180_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB180_37
.LBB180_20:                             # %if.end30
	jmp	.LBB180_21
.LBB180_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB180_23
	jmp	.LBB180_22
.LBB180_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB180_26
	jmp	.LBB180_29
.LBB180_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB180_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB180_37
.LBB180_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB180_30
.LBB180_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB180_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB180_37
.LBB180_28:                             # %if.end48
	jmp	.LBB180_30
.LBB180_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB180_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB180_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB180_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB180_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB180_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB180_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB180_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB180_37:                             # %if.end67
	cmpl	$1650155716, -44(%rbp)  # imm = 0x625B60C4
	jne	.LBB180_39
.LBB180_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_38
.Lfunc_end180:
	.size	testf.138, .Lfunc_end180-testf.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.139
	.type	uInt64_from_UInt32s.139,@function
uInt64_from_UInt32s.139:                # @uInt64_from_UInt32s.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1778456002, -20(%rbp)  # imm = 0x6A0115C2
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$1778456002, -20(%rbp)  # imm = 0x6A0115C2
	jne	.LBB181_2
.LBB181_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_1
.Lfunc_end181:
	.size	uInt64_from_UInt32s.139, .Lfunc_end181-uInt64_from_UInt32s.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.140
	.type	countHardLinks.140,@function
countHardLinks.140:                     # @countHardLinks.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1102317289, -20(%rbp)  # imm = 0x41B406E9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB182_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB182_3
.LBB182_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB182_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1102317289, -20(%rbp)  # imm = 0x41B406E9
	jne	.LBB182_5
.LBB182_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_4
.Lfunc_end182:
	.size	countHardLinks.140, .Lfunc_end182-countHardLinks.140
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.141
	.type	testStream.141,@function
testStream.141:                         # @testStream.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1742476637, -52(%rbp)  # imm = 0x67DC155D
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB183_2
# %bb.1:                                # %if.then
	jmp	.LBB183_38
.LBB183_2:                              # %if.end
	jmp	.LBB183_3
.LBB183_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_7 Depth 2
                                        #     Child Loop BB183_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB183_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB183_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB183_6
.LBB183_5:                              # %if.then5
	jmp	.LBB183_32
.LBB183_6:                              # %if.end6
                                        #   in Loop: Header=BB183_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB183_7:                              # %while.cond7
                                        #   Parent Loop BB183_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB183_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB183_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB183_10
# %bb.9:                                # %if.then15
	jmp	.LBB183_32
.LBB183_10:                             # %if.end16
                                        #   in Loop: Header=BB183_7 Depth=2
	jmp	.LBB183_7
.LBB183_11:                             # %while.end
                                        #   in Loop: Header=BB183_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB183_13
# %bb.12:                               # %if.then19
	jmp	.LBB183_32
.LBB183_13:                             # %if.end20
                                        #   in Loop: Header=BB183_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB183_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB183_15:                             # %if.end24
                                        #   in Loop: Header=BB183_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB183_16:                             # %for.cond
                                        #   Parent Loop BB183_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB183_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB183_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB183_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_16
.LBB183_19:                             # %for.end
                                        #   in Loop: Header=BB183_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB183_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB183_21:                             # %if.end33
                                        #   in Loop: Header=BB183_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB183_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB183_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB183_24
# %bb.23:                               # %if.then39
	jmp	.LBB183_25
.LBB183_24:                             # %if.end40
                                        #   in Loop: Header=BB183_3 Depth=1
	jmp	.LBB183_3
.LBB183_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB183_27
# %bb.26:                               # %if.then44
	jmp	.LBB183_38
.LBB183_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB183_29
# %bb.28:                               # %if.then49
	jmp	.LBB183_38
.LBB183_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB183_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB183_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB183_50
.LBB183_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB183_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB183_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB183_49
# %bb.35:                               # %if.end60
	movq	.LJTI183_0(,%rax,8), %rax
	jmpq	*%rax
.LBB183_36:                             # %sw.bb
	callq	configError
.LBB183_37:                             # %sw.bb61
	jmp	.LBB183_38
.LBB183_38:                             # %errhandler_io
	callq	ioError
.LBB183_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB183_50
.LBB183_40:                             # %sw.bb64
	callq	outOfMemory
.LBB183_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB183_50
.LBB183_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB183_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB183_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB183_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB183_50
.LBB183_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB183_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB183_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB183_50
.LBB183_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB183_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1742476637, -52(%rbp)  # imm = 0x67DC155D
	jne	.LBB183_52
.LBB183_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_51
.Lfunc_end183:
	.size	testStream.141, .Lfunc_end183-testStream.141
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI183_0:
	.quad	.LBB183_36
	.quad	.LBB183_49
	.quad	.LBB183_41
	.quad	.LBB183_37
	.quad	.LBB183_42
	.quad	.LBB183_39
	.quad	.LBB183_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.142
	.type	addFlagsFromEnvVar.142,@function
addFlagsFromEnvVar.142:                 # @addFlagsFromEnvVar.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2074761409, -24(%rbp)  # imm = 0x7BAA58C1
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB184_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB184_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_5 Depth 2
                                        #     Child Loop BB184_8 Depth 2
                                        #     Child Loop BB184_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB184_4
# %bb.3:                                # %if.then3
	jmp	.LBB184_21
.LBB184_4:                              # %if.end
                                        #   in Loop: Header=BB184_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB184_5:                              # %while.cond4
                                        #   Parent Loop BB184_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB184_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB184_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB184_5
.LBB184_7:                              # %while.end
                                        #   in Loop: Header=BB184_2 Depth=1
	jmp	.LBB184_8
.LBB184_8:                              # %while.cond12
                                        #   Parent Loop BB184_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB184_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB184_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB184_10:                             # %land.end
                                        #   in Loop: Header=BB184_8 Depth=2
	testb	$1, %al
	jne	.LBB184_11
	jmp	.LBB184_12
.LBB184_11:                             # %while.body27
                                        #   in Loop: Header=BB184_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_8
.LBB184_12:                             # %while.end28
                                        #   in Loop: Header=BB184_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB184_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB184_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB184_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB184_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB184_15:                             # %if.end35
                                        #   in Loop: Header=BB184_2 Depth=1
	movl	$0, -8(%rbp)
.LBB184_16:                             # %for.cond
                                        #   Parent Loop BB184_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB184_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB184_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB184_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_16
.LBB184_19:                             # %for.end
                                        #   in Loop: Header=BB184_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB184_20:                             # %if.end46
                                        #   in Loop: Header=BB184_2 Depth=1
	jmp	.LBB184_2
.LBB184_21:                             # %while.end47
	jmp	.LBB184_22
.LBB184_22:                             # %if.end48
	cmpl	$2074761409, -24(%rbp)  # imm = 0x7BAA58C1
	jne	.LBB184_24
.LBB184_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_23
.Lfunc_end184:
	.size	addFlagsFromEnvVar.142, .Lfunc_end184-addFlagsFromEnvVar.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.143
	.type	testStream.143,@function
testStream.143:                         # @testStream.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$770815237, -52(%rbp)   # imm = 0x2DF1B505
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB185_2
# %bb.1:                                # %if.then
	jmp	.LBB185_38
.LBB185_2:                              # %if.end
	jmp	.LBB185_3
.LBB185_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_7 Depth 2
                                        #     Child Loop BB185_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB185_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB185_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB185_6
.LBB185_5:                              # %if.then5
	jmp	.LBB185_32
.LBB185_6:                              # %if.end6
                                        #   in Loop: Header=BB185_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB185_7:                              # %while.cond7
                                        #   Parent Loop BB185_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB185_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB185_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB185_10
# %bb.9:                                # %if.then15
	jmp	.LBB185_32
.LBB185_10:                             # %if.end16
                                        #   in Loop: Header=BB185_7 Depth=2
	jmp	.LBB185_7
.LBB185_11:                             # %while.end
                                        #   in Loop: Header=BB185_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB185_13
# %bb.12:                               # %if.then19
	jmp	.LBB185_32
.LBB185_13:                             # %if.end20
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB185_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB185_15:                             # %if.end24
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB185_16:                             # %for.cond
                                        #   Parent Loop BB185_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB185_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB185_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB185_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_16
.LBB185_19:                             # %for.end
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB185_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB185_21:                             # %if.end33
                                        #   in Loop: Header=BB185_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB185_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB185_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB185_24
# %bb.23:                               # %if.then39
	jmp	.LBB185_25
.LBB185_24:                             # %if.end40
                                        #   in Loop: Header=BB185_3 Depth=1
	jmp	.LBB185_3
.LBB185_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB185_27
# %bb.26:                               # %if.then44
	jmp	.LBB185_38
.LBB185_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB185_29
# %bb.28:                               # %if.then49
	jmp	.LBB185_38
.LBB185_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB185_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB185_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB185_50
.LBB185_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB185_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB185_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB185_49
# %bb.35:                               # %if.end60
	movq	.LJTI185_0(,%rax,8), %rax
	jmpq	*%rax
.LBB185_36:                             # %sw.bb
	callq	configError
.LBB185_37:                             # %sw.bb61
	jmp	.LBB185_38
.LBB185_38:                             # %errhandler_io
	callq	ioError
.LBB185_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB185_50
.LBB185_40:                             # %sw.bb64
	callq	outOfMemory
.LBB185_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB185_50
.LBB185_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB185_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB185_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB185_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB185_50
.LBB185_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB185_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB185_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB185_50
.LBB185_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB185_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$770815237, -52(%rbp)   # imm = 0x2DF1B505
	jne	.LBB185_52
.LBB185_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_51
.Lfunc_end185:
	.size	testStream.143, .Lfunc_end185-testStream.143
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI185_0:
	.quad	.LBB185_36
	.quad	.LBB185_49
	.quad	.LBB185_41
	.quad	.LBB185_37
	.quad	.LBB185_42
	.quad	.LBB185_39
	.quad	.LBB185_40
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.144
.LCPI186_0:
	.quad	4636737291354636288     # double 100
.LCPI186_1:
	.quad	4607182418800017408     # double 1
.LCPI186_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.144,@function
compressStream.144:                     # @compressStream.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1637527451, -76(%rbp)  # imm = 0x619AAF9B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB186_2
# %bb.1:                                # %if.then
	jmp	.LBB186_46
.LBB186_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB186_4
# %bb.3:                                # %if.then3
	jmp	.LBB186_46
.LBB186_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB186_6
# %bb.5:                                # %if.then6
	jmp	.LBB186_40
.LBB186_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB186_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB186_8:                              # %if.end11
	jmp	.LBB186_9
.LBB186_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB186_11
# %bb.10:                               # %if.then14
	jmp	.LBB186_18
.LBB186_11:                             # %if.end15
                                        #   in Loop: Header=BB186_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB186_13
# %bb.12:                               # %if.then19
	jmp	.LBB186_46
.LBB186_13:                             # %if.end20
                                        #   in Loop: Header=BB186_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB186_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB186_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB186_15:                             # %if.end25
                                        #   in Loop: Header=BB186_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB186_17
# %bb.16:                               # %if.then28
	jmp	.LBB186_40
.LBB186_17:                             # %if.end29
                                        #   in Loop: Header=BB186_9 Depth=1
	jmp	.LBB186_9
.LBB186_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB186_20
# %bb.19:                               # %if.then32
	jmp	.LBB186_40
.LBB186_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB186_22
# %bb.21:                               # %if.then36
	jmp	.LBB186_46
.LBB186_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB186_24
# %bb.23:                               # %if.then41
	jmp	.LBB186_46
.LBB186_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB186_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB186_27
# %bb.26:                               # %if.then49
	jmp	.LBB186_46
.LBB186_27:                             # %if.end50
	jmp	.LBB186_28
.LBB186_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB186_30
# %bb.29:                               # %if.then54
	jmp	.LBB186_46
.LBB186_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB186_32
# %bb.31:                               # %if.then59
	jmp	.LBB186_46
.LBB186_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB186_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB186_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB186_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB186_37
.LBB186_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI186_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI186_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI186_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB186_37:                             # %if.end80
	jmp	.LBB186_38
.LBB186_38:                             # %if.end81
	cmpl	$1637527451, -76(%rbp)  # imm = 0x619AAF9B
	jne	.LBB186_48
.LBB186_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB186_43
	jmp	.LBB186_41
.LBB186_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB186_45
	jmp	.LBB186_42
.LBB186_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB186_44
	jmp	.LBB186_47
.LBB186_43:                             # %sw.bb
	callq	configError
.LBB186_44:                             # %sw.bb82
	callq	outOfMemory
.LBB186_45:                             # %sw.bb83
	jmp	.LBB186_46
.LBB186_46:                             # %errhandler_io
	callq	ioError
.LBB186_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB186_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB186_39
.Lfunc_end186:
	.size	compressStream.144, .Lfunc_end186-compressStream.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.145
	.type	addFlagsFromEnvVar.145,@function
addFlagsFromEnvVar.145:                 # @addFlagsFromEnvVar.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$505101307, -24(%rbp)   # imm = 0x1E1B3BFB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB187_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB187_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_5 Depth 2
                                        #     Child Loop BB187_8 Depth 2
                                        #     Child Loop BB187_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB187_4
# %bb.3:                                # %if.then3
	jmp	.LBB187_21
.LBB187_4:                              # %if.end
                                        #   in Loop: Header=BB187_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB187_5:                              # %while.cond4
                                        #   Parent Loop BB187_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB187_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB187_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB187_5
.LBB187_7:                              # %while.end
                                        #   in Loop: Header=BB187_2 Depth=1
	jmp	.LBB187_8
.LBB187_8:                              # %while.cond12
                                        #   Parent Loop BB187_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB187_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB187_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB187_10:                             # %land.end
                                        #   in Loop: Header=BB187_8 Depth=2
	testb	$1, %al
	jne	.LBB187_11
	jmp	.LBB187_12
.LBB187_11:                             # %while.body27
                                        #   in Loop: Header=BB187_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_8
.LBB187_12:                             # %while.end28
                                        #   in Loop: Header=BB187_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB187_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB187_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB187_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB187_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB187_15:                             # %if.end35
                                        #   in Loop: Header=BB187_2 Depth=1
	movl	$0, -8(%rbp)
.LBB187_16:                             # %for.cond
                                        #   Parent Loop BB187_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB187_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB187_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB187_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB187_16
.LBB187_19:                             # %for.end
                                        #   in Loop: Header=BB187_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB187_20:                             # %if.end46
                                        #   in Loop: Header=BB187_2 Depth=1
	jmp	.LBB187_2
.LBB187_21:                             # %while.end47
	jmp	.LBB187_22
.LBB187_22:                             # %if.end48
	cmpl	$505101307, -24(%rbp)   # imm = 0x1E1B3BFB
	jne	.LBB187_24
.LBB187_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_23
.Lfunc_end187:
	.size	addFlagsFromEnvVar.145, .Lfunc_end187-addFlagsFromEnvVar.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.146
	.type	compress.146,@function
compress.146:                           # @compress.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$728465016, -60(%rbp)   # imm = 0x2B6B7E78
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB188_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB188_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB188_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB188_6
	jmp	.LBB188_4
.LBB188_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB188_8
	jmp	.LBB188_5
.LBB188_5:                              # %if.end
	subl	$3, %eax
	je	.LBB188_7
	jmp	.LBB188_9
.LBB188_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB188_9
.LBB188_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB188_9
.LBB188_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB188_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB188_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB188_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB188_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB188_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB188_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB188_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB188_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB188_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB188_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB188_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB188_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB188_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_23:                             # %if.end34
                                        #   in Loop: Header=BB188_18 Depth=1
	jmp	.LBB188_24
.LBB188_24:                             # %for.inc
                                        #   in Loop: Header=BB188_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB188_18
.LBB188_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB188_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB188_30
.LBB188_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB188_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_29:                             # %if.end45
	jmp	.LBB188_30
.LBB188_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB188_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB188_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB188_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB188_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB188_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB188_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB188_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB188_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB188_41
.LBB188_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_41:                             # %if.end72
	jmp	.LBB188_42
.LBB188_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB188_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB188_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB188_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB188_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB188_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB188_51
	jmp	.LBB188_49
.LBB188_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB188_54
	jmp	.LBB188_50
.LBB188_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB188_61
	jmp	.LBB188_70
.LBB188_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB188_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_53:                             # %if.end98
	jmp	.LBB188_71
.LBB188_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB188_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB188_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB188_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB188_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_60:                             # %if.end119
	jmp	.LBB188_71
.LBB188_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB188_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB188_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB188_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB188_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB188_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB188_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB188_80
.LBB188_69:                             # %if.end146
	jmp	.LBB188_71
.LBB188_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB188_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB188_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB188_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB188_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB188_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB188_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB188_77:                             # %if.end163
	jmp	.LBB188_78
.LBB188_78:                             # %if.end164
	jmp	.LBB188_79
.LBB188_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB188_80:                             # %return
	cmpl	$728465016, -60(%rbp)   # imm = 0x2B6B7E78
	jne	.LBB188_82
.LBB188_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_81
.Lfunc_end188:
	.size	compress.146, .Lfunc_end188-compress.146
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.147
	.type	testf.147,@function
testf.147:                              # @testf.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1012034281, -44(%rbp)  # imm = 0x3C526AE9
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB189_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB189_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB189_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB189_6
	jmp	.LBB189_4
.LBB189_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB189_8
	jmp	.LBB189_5
.LBB189_5:                              # %if.end
	subl	$3, %eax
	je	.LBB189_7
	jmp	.LBB189_9
.LBB189_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB189_9
.LBB189_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB189_9
.LBB189_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB189_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB189_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB189_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB189_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB189_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB189_37
.LBB189_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB189_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB189_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB189_37
.LBB189_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB189_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB189_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB189_37
.LBB189_20:                             # %if.end30
	jmp	.LBB189_21
.LBB189_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB189_23
	jmp	.LBB189_22
.LBB189_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB189_26
	jmp	.LBB189_29
.LBB189_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB189_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB189_37
.LBB189_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB189_30
.LBB189_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB189_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB189_37
.LBB189_28:                             # %if.end48
	jmp	.LBB189_30
.LBB189_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB189_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB189_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB189_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB189_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB189_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB189_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB189_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB189_37:                             # %if.end67
	cmpl	$1012034281, -44(%rbp)  # imm = 0x3C526AE9
	jne	.LBB189_39
.LBB189_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_38
.Lfunc_end189:
	.size	testf.147, .Lfunc_end189-testf.147
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.148
	.type	applySavedMetaInfoToOutputFile.148,@function
applySavedMetaInfoToOutputFile.148:     # @applySavedMetaInfoToOutputFile.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1017888941, -20(%rbp)  # imm = 0x3CABC0AD
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB190_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB190_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB190_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB190_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$1017888941, -20(%rbp)  # imm = 0x3CABC0AD
	jne	.LBB190_6
.LBB190_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_5
.Lfunc_end190:
	.size	applySavedMetaInfoToOutputFile.148, .Lfunc_end190-applySavedMetaInfoToOutputFile.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.149
	.type	uInt64_isZero.149,@function
uInt64_isZero.149:                      # @uInt64_isZero.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1822981013, -20(%rbp)  # imm = 0x6CA87B95
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB191_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB191_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB191_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB191_7
.LBB191_4:                              # %if.end
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_5
.LBB191_5:                              # %for.inc
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_1
.LBB191_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB191_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1822981013, -20(%rbp)  # imm = 0x6CA87B95
	jne	.LBB191_9
.LBB191_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_8
.Lfunc_end191:
	.size	uInt64_isZero.149, .Lfunc_end191-uInt64_isZero.149
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.150
	.type	notAStandardFile.150,@function
notAStandardFile.150:                   # @notAStandardFile.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$487985321, -20(%rbp)   # imm = 0x1D1610A9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB192_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB192_5
.LBB192_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB192_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB192_5
.LBB192_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB192_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$487985321, -20(%rbp)   # imm = 0x1D1610A9
	jne	.LBB192_7
.LBB192_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_6
.Lfunc_end192:
	.size	notAStandardFile.150, .Lfunc_end192-notAStandardFile.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.151
	.type	compress.151,@function
compress.151:                           # @compress.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1478512991, -60(%rbp)  # imm = 0x5820515F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB193_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB193_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB193_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB193_6
	jmp	.LBB193_4
.LBB193_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB193_8
	jmp	.LBB193_5
.LBB193_5:                              # %if.end
	subl	$3, %eax
	je	.LBB193_7
	jmp	.LBB193_9
.LBB193_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB193_9
.LBB193_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB193_9
.LBB193_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB193_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB193_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB193_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB193_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB193_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB193_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB193_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB193_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB193_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB193_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB193_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB193_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB193_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_23:                             # %if.end34
                                        #   in Loop: Header=BB193_18 Depth=1
	jmp	.LBB193_24
.LBB193_24:                             # %for.inc
                                        #   in Loop: Header=BB193_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB193_18
.LBB193_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB193_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB193_30
.LBB193_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB193_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_29:                             # %if.end45
	jmp	.LBB193_30
.LBB193_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB193_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB193_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB193_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB193_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB193_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB193_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB193_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB193_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB193_41
.LBB193_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_41:                             # %if.end72
	jmp	.LBB193_42
.LBB193_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB193_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB193_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB193_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB193_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB193_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB193_51
	jmp	.LBB193_49
.LBB193_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB193_54
	jmp	.LBB193_50
.LBB193_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB193_61
	jmp	.LBB193_70
.LBB193_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB193_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_53:                             # %if.end98
	jmp	.LBB193_71
.LBB193_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB193_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB193_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB193_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB193_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_60:                             # %if.end119
	jmp	.LBB193_71
.LBB193_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB193_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB193_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB193_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB193_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB193_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB193_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB193_80
.LBB193_69:                             # %if.end146
	jmp	.LBB193_71
.LBB193_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB193_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB193_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB193_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB193_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB193_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB193_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB193_77:                             # %if.end163
	jmp	.LBB193_78
.LBB193_78:                             # %if.end164
	jmp	.LBB193_79
.LBB193_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB193_80:                             # %return
	cmpl	$1478512991, -60(%rbp)  # imm = 0x5820515F
	jne	.LBB193_82
.LBB193_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_81
.Lfunc_end193:
	.size	compress.151, .Lfunc_end193-compress.151
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.152
	.type	applySavedMetaInfoToOutputFile.152,@function
applySavedMetaInfoToOutputFile.152:     # @applySavedMetaInfoToOutputFile.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$756207967, -20(%rbp)   # imm = 0x2D12D15F
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB194_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB194_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB194_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB194_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$756207967, -20(%rbp)   # imm = 0x2D12D15F
	jne	.LBB194_6
.LBB194_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_5
.Lfunc_end194:
	.size	applySavedMetaInfoToOutputFile.152, .Lfunc_end194-applySavedMetaInfoToOutputFile.152
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.153
	.type	uInt64_toAscii.153,@function
uInt64_toAscii.153:                     # @uInt64_toAscii.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$394929431, -16(%rbp)   # imm = 0x178A2517
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB195_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB195_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB195_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB195_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB195_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB195_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB195_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_4
.LBB195_7:                              # %for.end
	cmpl	$394929431, -16(%rbp)   # imm = 0x178A2517
	jne	.LBB195_9
.LBB195_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_8
.Lfunc_end195:
	.size	uInt64_toAscii.153, .Lfunc_end195-uInt64_toAscii.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.154
	.type	hasSuffix.154,@function
hasSuffix.154:                          # @hasSuffix.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1472278446, -24(%rbp)  # imm = 0x57C12FAE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB196_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB196_5
.LBB196_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB196_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB196_5
.LBB196_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB196_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1472278446, -24(%rbp)  # imm = 0x57C12FAE
	jne	.LBB196_7
.LBB196_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_6
.Lfunc_end196:
	.size	hasSuffix.154, .Lfunc_end196-hasSuffix.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.155
	.type	snocString.155,@function
snocString.155:                         # @snocString.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1407809580, -44(%rbp)  # imm = 0x53E9782C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB197_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB197_6
.LBB197_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB197_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB197_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB197_3
.LBB197_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB197_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1407809580, -44(%rbp)  # imm = 0x53E9782C
	jne	.LBB197_8
.LBB197_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_7
.Lfunc_end197:
	.size	snocString.155, .Lfunc_end197-snocString.155
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.156 # -- Begin function fopen_output_safely.156
	.p2align	4, 0x90
	.type	fopen_output_safely.156,@function
fopen_output_safely.156:                # @fopen_output_safely.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$726580486, -16(%rbp)   # imm = 0x2B4EBD06
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB198_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB198_5
.LBB198_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB198_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB198_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB198_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$726580486, -16(%rbp)   # imm = 0x2B4EBD06
	jne	.LBB198_7
.LBB198_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_6
.Lfunc_end198:
	.size	fopen_output_safely.156, .Lfunc_end198-fopen_output_safely.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.157
	.type	hasSuffix.157,@function
hasSuffix.157:                          # @hasSuffix.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1870762271, -24(%rbp)  # imm = 0x6F81911F
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB199_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB199_5
.LBB199_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB199_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB199_5
.LBB199_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB199_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1870762271, -24(%rbp)  # imm = 0x6F81911F
	jne	.LBB199_7
.LBB199_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_6
.Lfunc_end199:
	.size	hasSuffix.157, .Lfunc_end199-hasSuffix.157
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.158
	.type	addFlagsFromEnvVar.158,@function
addFlagsFromEnvVar.158:                 # @addFlagsFromEnvVar.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2107151797, -24(%rbp)  # imm = 0x7D9895B5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB200_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB200_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_5 Depth 2
                                        #     Child Loop BB200_8 Depth 2
                                        #     Child Loop BB200_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB200_4
# %bb.3:                                # %if.then3
	jmp	.LBB200_21
.LBB200_4:                              # %if.end
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB200_5:                              # %while.cond4
                                        #   Parent Loop BB200_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB200_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB200_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB200_5
.LBB200_7:                              # %while.end
                                        #   in Loop: Header=BB200_2 Depth=1
	jmp	.LBB200_8
.LBB200_8:                              # %while.cond12
                                        #   Parent Loop BB200_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB200_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB200_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB200_10:                             # %land.end
                                        #   in Loop: Header=BB200_8 Depth=2
	testb	$1, %al
	jne	.LBB200_11
	jmp	.LBB200_12
.LBB200_11:                             # %while.body27
                                        #   in Loop: Header=BB200_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_8
.LBB200_12:                             # %while.end28
                                        #   in Loop: Header=BB200_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB200_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB200_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB200_15:                             # %if.end35
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	$0, -8(%rbp)
.LBB200_16:                             # %for.cond
                                        #   Parent Loop BB200_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB200_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB200_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB200_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_16
.LBB200_19:                             # %for.end
                                        #   in Loop: Header=BB200_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB200_20:                             # %if.end46
                                        #   in Loop: Header=BB200_2 Depth=1
	jmp	.LBB200_2
.LBB200_21:                             # %while.end47
	jmp	.LBB200_22
.LBB200_22:                             # %if.end48
	cmpl	$2107151797, -24(%rbp)  # imm = 0x7D9895B5
	jne	.LBB200_24
.LBB200_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_23
.Lfunc_end200:
	.size	addFlagsFromEnvVar.158, .Lfunc_end200-addFlagsFromEnvVar.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.159
	.type	snocString.159,@function
snocString.159:                         # @snocString.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$459321948, -44(%rbp)   # imm = 0x1B60B25C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB201_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB201_6
.LBB201_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB201_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB201_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB201_3
.LBB201_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB201_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$459321948, -44(%rbp)   # imm = 0x1B60B25C
	jne	.LBB201_8
.LBB201_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_7
.Lfunc_end201:
	.size	snocString.159, .Lfunc_end201-snocString.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.160
	.type	compress.160,@function
compress.160:                           # @compress.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$683407518, -64(%rbp)   # imm = 0x28BBF89E
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB202_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB202_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB202_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB202_6
	jmp	.LBB202_4
.LBB202_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB202_8
	jmp	.LBB202_5
.LBB202_5:                              # %if.end
	subl	$3, %eax
	je	.LBB202_7
	jmp	.LBB202_9
.LBB202_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB202_9
.LBB202_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB202_9
.LBB202_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB202_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB202_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB202_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB202_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB202_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB202_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB202_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB202_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB202_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB202_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB202_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB202_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB202_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_23:                             # %if.end34
                                        #   in Loop: Header=BB202_18 Depth=1
	jmp	.LBB202_24
.LBB202_24:                             # %for.inc
                                        #   in Loop: Header=BB202_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB202_18
.LBB202_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB202_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB202_30
.LBB202_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB202_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_29:                             # %if.end45
	jmp	.LBB202_30
.LBB202_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB202_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB202_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB202_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB202_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB202_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB202_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB202_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB202_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB202_41
.LBB202_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_41:                             # %if.end72
	jmp	.LBB202_42
.LBB202_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB202_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB202_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB202_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB202_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB202_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB202_51
	jmp	.LBB202_49
.LBB202_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB202_54
	jmp	.LBB202_50
.LBB202_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB202_61
	jmp	.LBB202_70
.LBB202_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB202_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_53:                             # %if.end98
	jmp	.LBB202_71
.LBB202_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB202_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB202_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB202_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB202_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_60:                             # %if.end119
	jmp	.LBB202_71
.LBB202_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB202_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB202_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB202_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB202_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB202_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB202_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB202_80
.LBB202_69:                             # %if.end146
	jmp	.LBB202_71
.LBB202_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB202_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB202_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB202_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB202_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB202_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB202_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB202_77:                             # %if.end163
	jmp	.LBB202_78
.LBB202_78:                             # %if.end164
	jmp	.LBB202_79
.LBB202_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB202_80:                             # %return
	cmpl	$683407518, -64(%rbp)   # imm = 0x28BBF89E
	jne	.LBB202_82
.LBB202_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_81
.Lfunc_end202:
	.size	compress.160, .Lfunc_end202-compress.160
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.161
	.type	mapSuffix.161,@function
mapSuffix.161:                          # @mapSuffix.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1577483402, -36(%rbp)  # imm = 0x5E067C8A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB203_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB203_3
.LBB203_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB203_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1577483402, -36(%rbp)  # imm = 0x5E067C8A
	jne	.LBB203_5
.LBB203_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_4
.Lfunc_end203:
	.size	mapSuffix.161, .Lfunc_end203-mapSuffix.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.162
	.type	snocString.162,@function
snocString.162:                         # @snocString.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$923047473, -44(%rbp)   # imm = 0x37049631
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB204_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB204_6
.LBB204_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB204_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB204_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB204_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB204_3
.LBB204_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB204_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$923047473, -44(%rbp)   # imm = 0x37049631
	jne	.LBB204_8
.LBB204_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_7
.Lfunc_end204:
	.size	snocString.162, .Lfunc_end204-snocString.162
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.163
.LCPI205_0:
	.quad	4636737291354636288     # double 100
.LCPI205_1:
	.quad	4607182418800017408     # double 1
.LCPI205_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.163,@function
compressStream.163:                     # @compressStream.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$616017784, -76(%rbp)   # imm = 0x24B7AF78
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB205_2
# %bb.1:                                # %if.then
	jmp	.LBB205_46
.LBB205_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB205_4
# %bb.3:                                # %if.then3
	jmp	.LBB205_46
.LBB205_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB205_6
# %bb.5:                                # %if.then6
	jmp	.LBB205_40
.LBB205_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB205_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB205_8:                              # %if.end11
	jmp	.LBB205_9
.LBB205_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB205_11
# %bb.10:                               # %if.then14
	jmp	.LBB205_18
.LBB205_11:                             # %if.end15
                                        #   in Loop: Header=BB205_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB205_13
# %bb.12:                               # %if.then19
	jmp	.LBB205_46
.LBB205_13:                             # %if.end20
                                        #   in Loop: Header=BB205_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB205_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB205_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB205_15:                             # %if.end25
                                        #   in Loop: Header=BB205_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB205_17
# %bb.16:                               # %if.then28
	jmp	.LBB205_40
.LBB205_17:                             # %if.end29
                                        #   in Loop: Header=BB205_9 Depth=1
	jmp	.LBB205_9
.LBB205_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB205_20
# %bb.19:                               # %if.then32
	jmp	.LBB205_40
.LBB205_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB205_22
# %bb.21:                               # %if.then36
	jmp	.LBB205_46
.LBB205_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB205_24
# %bb.23:                               # %if.then41
	jmp	.LBB205_46
.LBB205_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB205_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB205_27
# %bb.26:                               # %if.then49
	jmp	.LBB205_46
.LBB205_27:                             # %if.end50
	jmp	.LBB205_28
.LBB205_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB205_30
# %bb.29:                               # %if.then54
	jmp	.LBB205_46
.LBB205_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB205_32
# %bb.31:                               # %if.then59
	jmp	.LBB205_46
.LBB205_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB205_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB205_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB205_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB205_37
.LBB205_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI205_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI205_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI205_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB205_37:                             # %if.end80
	jmp	.LBB205_38
.LBB205_38:                             # %if.end81
	cmpl	$616017784, -76(%rbp)   # imm = 0x24B7AF78
	jne	.LBB205_48
.LBB205_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB205_43
	jmp	.LBB205_41
.LBB205_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB205_45
	jmp	.LBB205_42
.LBB205_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB205_44
	jmp	.LBB205_47
.LBB205_43:                             # %sw.bb
	callq	configError
.LBB205_44:                             # %sw.bb82
	callq	outOfMemory
.LBB205_45:                             # %sw.bb83
	jmp	.LBB205_46
.LBB205_46:                             # %errhandler_io
	callq	ioError
.LBB205_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB205_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB205_39
.Lfunc_end205:
	.size	compressStream.163, .Lfunc_end205-compressStream.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.164
	.type	compress.164,@function
compress.164:                           # @compress.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$246973439, -64(%rbp)   # imm = 0xEB883FF
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB206_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB206_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB206_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB206_6
	jmp	.LBB206_4
.LBB206_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB206_8
	jmp	.LBB206_5
.LBB206_5:                              # %if.end
	subl	$3, %eax
	je	.LBB206_7
	jmp	.LBB206_9
.LBB206_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB206_9
.LBB206_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB206_9
.LBB206_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB206_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB206_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB206_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB206_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB206_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB206_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB206_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB206_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB206_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB206_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_23:                             # %if.end34
                                        #   in Loop: Header=BB206_18 Depth=1
	jmp	.LBB206_24
.LBB206_24:                             # %for.inc
                                        #   in Loop: Header=BB206_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB206_18
.LBB206_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB206_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB206_30
.LBB206_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB206_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_29:                             # %if.end45
	jmp	.LBB206_30
.LBB206_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB206_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB206_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB206_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB206_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB206_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB206_41
.LBB206_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_41:                             # %if.end72
	jmp	.LBB206_42
.LBB206_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB206_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB206_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB206_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB206_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB206_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB206_51
	jmp	.LBB206_49
.LBB206_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB206_54
	jmp	.LBB206_50
.LBB206_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB206_61
	jmp	.LBB206_70
.LBB206_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB206_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_53:                             # %if.end98
	jmp	.LBB206_71
.LBB206_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB206_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB206_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB206_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB206_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_60:                             # %if.end119
	jmp	.LBB206_71
.LBB206_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB206_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB206_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB206_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB206_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB206_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB206_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_80
.LBB206_69:                             # %if.end146
	jmp	.LBB206_71
.LBB206_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB206_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB206_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB206_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB206_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB206_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB206_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB206_77:                             # %if.end163
	jmp	.LBB206_78
.LBB206_78:                             # %if.end164
	jmp	.LBB206_79
.LBB206_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB206_80:                             # %return
	cmpl	$246973439, -64(%rbp)   # imm = 0xEB883FF
	jne	.LBB206_82
.LBB206_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_81
.Lfunc_end206:
	.size	compress.164, .Lfunc_end206-compress.164
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.165 # -- Begin function fopen_output_safely.165
	.p2align	4, 0x90
	.type	fopen_output_safely.165,@function
fopen_output_safely.165:                # @fopen_output_safely.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1811789897, -16(%rbp)  # imm = 0x6BFDB849
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB207_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB207_5
.LBB207_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB207_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB207_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB207_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1811789897, -16(%rbp)  # imm = 0x6BFDB849
	jne	.LBB207_7
.LBB207_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_6
.Lfunc_end207:
	.size	fopen_output_safely.165, .Lfunc_end207-fopen_output_safely.165
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.166
.LCPI208_0:
	.quad	4607182418800017408     # double 1
.LCPI208_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.166,@function
uInt64_to_double.166:                   # @uInt64_to_double.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI208_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$28743557, -28(%rbp)    # imm = 0x1B69785
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB208_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB208_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB208_1 Depth=1
	vmovsd	.LCPI208_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB208_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB208_1
.LBB208_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$28743557, -28(%rbp)    # imm = 0x1B69785
	jne	.LBB208_6
.LBB208_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB208_5
.Lfunc_end208:
	.size	uInt64_to_double.166, .Lfunc_end208-uInt64_to_double.166
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.167 # -- Begin function fopen_output_safely.167
	.p2align	4, 0x90
	.type	fopen_output_safely.167,@function
fopen_output_safely.167:                # @fopen_output_safely.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$699656920, -16(%rbp)   # imm = 0x29B3EAD8
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB209_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB209_5
.LBB209_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB209_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB209_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB209_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$699656920, -16(%rbp)   # imm = 0x29B3EAD8
	jne	.LBB209_7
.LBB209_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_6
.Lfunc_end209:
	.size	fopen_output_safely.167, .Lfunc_end209-fopen_output_safely.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.168
	.type	snocString.168,@function
snocString.168:                         # @snocString.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1993248124, -44(%rbp)  # imm = 0x76CE8D7C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB210_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB210_6
.LBB210_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB210_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB210_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB210_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB210_3
.LBB210_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB210_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1993248124, -44(%rbp)  # imm = 0x76CE8D7C
	jne	.LBB210_8
.LBB210_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_7
.Lfunc_end210:
	.size	snocString.168, .Lfunc_end210-snocString.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.169
	.type	hasSuffix.169,@function
hasSuffix.169:                          # @hasSuffix.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1025074016, -24(%rbp)  # imm = 0x3D196360
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB211_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB211_5
.LBB211_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB211_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB211_5
.LBB211_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB211_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1025074016, -24(%rbp)  # imm = 0x3D196360
	jne	.LBB211_7
.LBB211_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_6
.Lfunc_end211:
	.size	hasSuffix.169, .Lfunc_end211-hasSuffix.169
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.170
	.type	testf.170,@function
testf.170:                              # @testf.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$959118320, -44(%rbp)   # imm = 0x392AFBF0
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB212_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB212_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB212_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB212_6
	jmp	.LBB212_4
.LBB212_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB212_8
	jmp	.LBB212_5
.LBB212_5:                              # %if.end
	subl	$3, %eax
	je	.LBB212_7
	jmp	.LBB212_9
.LBB212_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB212_9
.LBB212_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB212_9
.LBB212_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB212_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB212_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB212_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB212_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB212_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB212_37
.LBB212_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB212_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB212_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB212_37
.LBB212_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB212_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB212_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB212_37
.LBB212_20:                             # %if.end30
	jmp	.LBB212_21
.LBB212_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB212_23
	jmp	.LBB212_22
.LBB212_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB212_26
	jmp	.LBB212_29
.LBB212_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB212_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB212_37
.LBB212_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB212_30
.LBB212_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB212_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB212_37
.LBB212_28:                             # %if.end48
	jmp	.LBB212_30
.LBB212_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB212_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB212_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB212_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB212_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB212_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB212_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB212_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB212_37:                             # %if.end67
	cmpl	$959118320, -44(%rbp)   # imm = 0x392AFBF0
	jne	.LBB212_39
.LBB212_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_38
.Lfunc_end212:
	.size	testf.170, .Lfunc_end212-testf.170
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.171
	.type	uncompress.171,@function
uncompress.171:                         # @uncompress.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$433257053, -64(%rbp)   # imm = 0x19D2FA5D
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB213_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB213_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB213_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB213_6
	jmp	.LBB213_4
.LBB213_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB213_14
	jmp	.LBB213_5
.LBB213_5:                              # %if.end
	subl	$3, %eax
	je	.LBB213_7
	jmp	.LBB213_15
.LBB213_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB213_15
.LBB213_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB213_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB213_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB213_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB213_11
# %bb.10:                               # %if.then6
	jmp	.LBB213_16
.LBB213_11:                             # %if.end7
                                        #   in Loop: Header=BB213_8 Depth=1
	jmp	.LBB213_12
.LBB213_12:                             # %for.inc
                                        #   in Loop: Header=BB213_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB213_8
.LBB213_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB213_15
.LBB213_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB213_15:                             # %sw.epilog
	jmp	.LBB213_16
.LBB213_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB213_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB213_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB213_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB213_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB213_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB213_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB213_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB213_29
.LBB213_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB213_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_28:                             # %if.end40
	jmp	.LBB213_29
.LBB213_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB213_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB213_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB213_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB213_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB213_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB213_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB213_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB213_38:                             # %if.end61
	jmp	.LBB213_39
.LBB213_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB213_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB213_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB213_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB213_44
.LBB213_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_44:                             # %if.end74
	jmp	.LBB213_45
.LBB213_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB213_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB213_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB213_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB213_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB213_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB213_54
	jmp	.LBB213_52
.LBB213_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB213_57
	jmp	.LBB213_53
.LBB213_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB213_62
	jmp	.LBB213_71
.LBB213_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB213_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_56:                             # %if.end100
	jmp	.LBB213_72
.LBB213_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB213_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB213_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB213_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_61:                             # %if.end114
	jmp	.LBB213_72
.LBB213_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB213_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB213_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB213_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB213_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB213_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB213_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB213_95
.LBB213_70:                             # %if.end141
	jmp	.LBB213_72
.LBB213_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB213_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB213_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB213_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB213_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB213_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB213_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB213_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB213_79:                             # %if.end161
	jmp	.LBB213_80
.LBB213_80:                             # %if.end162
	jmp	.LBB213_81
.LBB213_81:                             # %if.end163
	jmp	.LBB213_87
.LBB213_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB213_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB213_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB213_85:                             # %if.end173
	jmp	.LBB213_86
.LBB213_86:                             # %if.end174
	jmp	.LBB213_87
.LBB213_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB213_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB213_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB213_90:                             # %if.end182
	jmp	.LBB213_95
.LBB213_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB213_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB213_94
.LBB213_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB213_94:                             # %if.end190
	jmp	.LBB213_95
.LBB213_95:                             # %if.end191
	cmpl	$433257053, -64(%rbp)   # imm = 0x19D2FA5D
	jne	.LBB213_97
.LBB213_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_96
.Lfunc_end213:
	.size	uncompress.171, .Lfunc_end213-uncompress.171
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.172
	.type	uInt64_toAscii.172,@function
uInt64_toAscii.172:                     # @uInt64_toAscii.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$200669776, -12(%rbp)   # imm = 0xBF5FA50
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB214_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB214_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB214_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB214_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB214_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB214_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB214_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB214_4
.LBB214_7:                              # %for.end
	cmpl	$200669776, -12(%rbp)   # imm = 0xBF5FA50
	jne	.LBB214_9
.LBB214_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_8
.Lfunc_end214:
	.size	uInt64_toAscii.172, .Lfunc_end214-uInt64_toAscii.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.173
	.type	notAStandardFile.173,@function
notAStandardFile.173:                   # @notAStandardFile.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$854093334, -20(%rbp)   # imm = 0x32E86E16
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB215_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB215_5
.LBB215_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB215_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB215_5
.LBB215_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB215_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$854093334, -20(%rbp)   # imm = 0x32E86E16
	jne	.LBB215_7
.LBB215_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_6
.Lfunc_end215:
	.size	notAStandardFile.173, .Lfunc_end215-notAStandardFile.173
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.174
	.type	addFlagsFromEnvVar.174,@function
addFlagsFromEnvVar.174:                 # @addFlagsFromEnvVar.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1454594921, -24(%rbp)  # imm = 0x56B35B69
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB216_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB216_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_5 Depth 2
                                        #     Child Loop BB216_8 Depth 2
                                        #     Child Loop BB216_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB216_4
# %bb.3:                                # %if.then3
	jmp	.LBB216_21
.LBB216_4:                              # %if.end
                                        #   in Loop: Header=BB216_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB216_5:                              # %while.cond4
                                        #   Parent Loop BB216_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB216_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB216_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB216_5
.LBB216_7:                              # %while.end
                                        #   in Loop: Header=BB216_2 Depth=1
	jmp	.LBB216_8
.LBB216_8:                              # %while.cond12
                                        #   Parent Loop BB216_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB216_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB216_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB216_10:                             # %land.end
                                        #   in Loop: Header=BB216_8 Depth=2
	testb	$1, %al
	jne	.LBB216_11
	jmp	.LBB216_12
.LBB216_11:                             # %while.body27
                                        #   in Loop: Header=BB216_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB216_8
.LBB216_12:                             # %while.end28
                                        #   in Loop: Header=BB216_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB216_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB216_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB216_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB216_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB216_15:                             # %if.end35
                                        #   in Loop: Header=BB216_2 Depth=1
	movl	$0, -8(%rbp)
.LBB216_16:                             # %for.cond
                                        #   Parent Loop BB216_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB216_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB216_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB216_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB216_16
.LBB216_19:                             # %for.end
                                        #   in Loop: Header=BB216_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB216_20:                             # %if.end46
                                        #   in Loop: Header=BB216_2 Depth=1
	jmp	.LBB216_2
.LBB216_21:                             # %while.end47
	jmp	.LBB216_22
.LBB216_22:                             # %if.end48
	cmpl	$1454594921, -24(%rbp)  # imm = 0x56B35B69
	jne	.LBB216_24
.LBB216_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_23
.Lfunc_end216:
	.size	addFlagsFromEnvVar.174, .Lfunc_end216-addFlagsFromEnvVar.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.175
	.type	notAStandardFile.175,@function
notAStandardFile.175:                   # @notAStandardFile.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1608565558, -20(%rbp)  # imm = 0x5FE0C336
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB217_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB217_5
.LBB217_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB217_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB217_5
.LBB217_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB217_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1608565558, -20(%rbp)  # imm = 0x5FE0C336
	jne	.LBB217_7
.LBB217_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_6
.Lfunc_end217:
	.size	notAStandardFile.175, .Lfunc_end217-notAStandardFile.175
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.176
	.type	compress.176,@function
compress.176:                           # @compress.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$892942701, -60(%rbp)   # imm = 0x3539396D
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB218_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB218_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB218_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB218_6
	jmp	.LBB218_4
.LBB218_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB218_8
	jmp	.LBB218_5
.LBB218_5:                              # %if.end
	subl	$3, %eax
	je	.LBB218_7
	jmp	.LBB218_9
.LBB218_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB218_9
.LBB218_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB218_9
.LBB218_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB218_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB218_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB218_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB218_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB218_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB218_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB218_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB218_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB218_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB218_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB218_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB218_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB218_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_23:                             # %if.end34
                                        #   in Loop: Header=BB218_18 Depth=1
	jmp	.LBB218_24
.LBB218_24:                             # %for.inc
                                        #   in Loop: Header=BB218_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB218_18
.LBB218_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB218_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB218_30
.LBB218_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB218_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_29:                             # %if.end45
	jmp	.LBB218_30
.LBB218_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB218_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB218_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB218_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB218_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB218_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB218_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB218_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB218_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB218_41
.LBB218_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_41:                             # %if.end72
	jmp	.LBB218_42
.LBB218_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB218_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB218_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB218_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB218_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB218_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB218_51
	jmp	.LBB218_49
.LBB218_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB218_54
	jmp	.LBB218_50
.LBB218_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB218_61
	jmp	.LBB218_70
.LBB218_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB218_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_53:                             # %if.end98
	jmp	.LBB218_71
.LBB218_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB218_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB218_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB218_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB218_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_60:                             # %if.end119
	jmp	.LBB218_71
.LBB218_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB218_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB218_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB218_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB218_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB218_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB218_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB218_80
.LBB218_69:                             # %if.end146
	jmp	.LBB218_71
.LBB218_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB218_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB218_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB218_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB218_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB218_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB218_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB218_77:                             # %if.end163
	jmp	.LBB218_78
.LBB218_78:                             # %if.end164
	jmp	.LBB218_79
.LBB218_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB218_80:                             # %return
	cmpl	$892942701, -60(%rbp)   # imm = 0x3539396D
	jne	.LBB218_82
.LBB218_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_81
.Lfunc_end218:
	.size	compress.176, .Lfunc_end218-compress.176
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.177
.LCPI219_0:
	.quad	4636737291354636288     # double 100
.LCPI219_1:
	.quad	4607182418800017408     # double 1
.LCPI219_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.177,@function
compressStream.177:                     # @compressStream.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$2033021002, -76(%rbp)  # imm = 0x792D704A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_2
# %bb.1:                                # %if.then
	jmp	.LBB219_46
.LBB219_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_4
# %bb.3:                                # %if.then3
	jmp	.LBB219_46
.LBB219_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB219_6
# %bb.5:                                # %if.then6
	jmp	.LBB219_40
.LBB219_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB219_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB219_8:                              # %if.end11
	jmp	.LBB219_9
.LBB219_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB219_11
# %bb.10:                               # %if.then14
	jmp	.LBB219_18
.LBB219_11:                             # %if.end15
                                        #   in Loop: Header=BB219_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_13
# %bb.12:                               # %if.then19
	jmp	.LBB219_46
.LBB219_13:                             # %if.end20
                                        #   in Loop: Header=BB219_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB219_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB219_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB219_15:                             # %if.end25
                                        #   in Loop: Header=BB219_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB219_17
# %bb.16:                               # %if.then28
	jmp	.LBB219_40
.LBB219_17:                             # %if.end29
                                        #   in Loop: Header=BB219_9 Depth=1
	jmp	.LBB219_9
.LBB219_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB219_20
# %bb.19:                               # %if.then32
	jmp	.LBB219_40
.LBB219_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_22
# %bb.21:                               # %if.then36
	jmp	.LBB219_46
.LBB219_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_24
# %bb.23:                               # %if.then41
	jmp	.LBB219_46
.LBB219_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB219_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_27
# %bb.26:                               # %if.then49
	jmp	.LBB219_46
.LBB219_27:                             # %if.end50
	jmp	.LBB219_28
.LBB219_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_30
# %bb.29:                               # %if.then54
	jmp	.LBB219_46
.LBB219_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_32
# %bb.31:                               # %if.then59
	jmp	.LBB219_46
.LBB219_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB219_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB219_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB219_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB219_37
.LBB219_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI219_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI219_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI219_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB219_37:                             # %if.end80
	jmp	.LBB219_38
.LBB219_38:                             # %if.end81
	cmpl	$2033021002, -76(%rbp)  # imm = 0x792D704A
	jne	.LBB219_48
.LBB219_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB219_43
	jmp	.LBB219_41
.LBB219_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB219_45
	jmp	.LBB219_42
.LBB219_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB219_44
	jmp	.LBB219_47
.LBB219_43:                             # %sw.bb
	callq	configError
.LBB219_44:                             # %sw.bb82
	callq	outOfMemory
.LBB219_45:                             # %sw.bb83
	jmp	.LBB219_46
.LBB219_46:                             # %errhandler_io
	callq	ioError
.LBB219_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB219_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB219_39
.Lfunc_end219:
	.size	compressStream.177, .Lfunc_end219-compressStream.177
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.178
	.type	testf.178,@function
testf.178:                              # @testf.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1033503237, -44(%rbp)  # imm = 0x3D9A0205
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB220_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB220_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB220_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB220_6
	jmp	.LBB220_4
.LBB220_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB220_8
	jmp	.LBB220_5
.LBB220_5:                              # %if.end
	subl	$3, %eax
	je	.LBB220_7
	jmp	.LBB220_9
.LBB220_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB220_9
.LBB220_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB220_9
.LBB220_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB220_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB220_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB220_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB220_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB220_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB220_37
.LBB220_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB220_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB220_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB220_37
.LBB220_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB220_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB220_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB220_37
.LBB220_20:                             # %if.end30
	jmp	.LBB220_21
.LBB220_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB220_23
	jmp	.LBB220_22
.LBB220_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB220_26
	jmp	.LBB220_29
.LBB220_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB220_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB220_37
.LBB220_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB220_30
.LBB220_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB220_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB220_37
.LBB220_28:                             # %if.end48
	jmp	.LBB220_30
.LBB220_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB220_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB220_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB220_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB220_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB220_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB220_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB220_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB220_37:                             # %if.end67
	cmpl	$1033503237, -44(%rbp)  # imm = 0x3D9A0205
	jne	.LBB220_39
.LBB220_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_38
.Lfunc_end220:
	.size	testf.178, .Lfunc_end220-testf.178
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.179
	.type	uInt64_toAscii.179,@function
uInt64_toAscii.179:                     # @uInt64_toAscii.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$625624670, -16(%rbp)   # imm = 0x254A465E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB221_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB221_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB221_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB221_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB221_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB221_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB221_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_4
.LBB221_7:                              # %for.end
	cmpl	$625624670, -16(%rbp)   # imm = 0x254A465E
	jne	.LBB221_9
.LBB221_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_8
.Lfunc_end221:
	.size	uInt64_toAscii.179, .Lfunc_end221-uInt64_toAscii.179
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.180
	.type	uInt64_toAscii.180,@function
uInt64_toAscii.180:                     # @uInt64_toAscii.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$975346078, -12(%rbp)   # imm = 0x3A22999E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB222_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB222_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB222_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB222_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB222_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB222_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB222_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB222_4
.LBB222_7:                              # %for.end
	cmpl	$975346078, -12(%rbp)   # imm = 0x3A22999E
	jne	.LBB222_9
.LBB222_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_8
.Lfunc_end222:
	.size	uInt64_toAscii.180, .Lfunc_end222-uInt64_toAscii.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.181
	.type	addFlagsFromEnvVar.181,@function
addFlagsFromEnvVar.181:                 # @addFlagsFromEnvVar.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$324693255, -24(%rbp)   # imm = 0x135A6D07
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB223_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB223_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_5 Depth 2
                                        #     Child Loop BB223_8 Depth 2
                                        #     Child Loop BB223_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB223_4
# %bb.3:                                # %if.then3
	jmp	.LBB223_21
.LBB223_4:                              # %if.end
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB223_5:                              # %while.cond4
                                        #   Parent Loop BB223_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB223_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB223_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB223_5
.LBB223_7:                              # %while.end
                                        #   in Loop: Header=BB223_2 Depth=1
	jmp	.LBB223_8
.LBB223_8:                              # %while.cond12
                                        #   Parent Loop BB223_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB223_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB223_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB223_10:                             # %land.end
                                        #   in Loop: Header=BB223_8 Depth=2
	testb	$1, %al
	jne	.LBB223_11
	jmp	.LBB223_12
.LBB223_11:                             # %while.body27
                                        #   in Loop: Header=BB223_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB223_8
.LBB223_12:                             # %while.end28
                                        #   in Loop: Header=BB223_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB223_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB223_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB223_15:                             # %if.end35
                                        #   in Loop: Header=BB223_2 Depth=1
	movl	$0, -8(%rbp)
.LBB223_16:                             # %for.cond
                                        #   Parent Loop BB223_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB223_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB223_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB223_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB223_16
.LBB223_19:                             # %for.end
                                        #   in Loop: Header=BB223_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB223_20:                             # %if.end46
                                        #   in Loop: Header=BB223_2 Depth=1
	jmp	.LBB223_2
.LBB223_21:                             # %while.end47
	jmp	.LBB223_22
.LBB223_22:                             # %if.end48
	cmpl	$324693255, -24(%rbp)   # imm = 0x135A6D07
	jne	.LBB223_24
.LBB223_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_23
.Lfunc_end223:
	.size	addFlagsFromEnvVar.181, .Lfunc_end223-addFlagsFromEnvVar.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.182
	.type	uncompressStream.182,@function
uncompressStream.182:                   # @uncompressStream.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$628695421, -68(%rbp)   # imm = 0x2579217D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_2
# %bb.1:                                # %if.then
	jmp	.LBB224_66
.LBB224_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_4
# %bb.3:                                # %if.then3
	jmp	.LBB224_66
.LBB224_4:                              # %if.end4
	jmp	.LBB224_5
.LBB224_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_9 Depth 2
                                        #     Child Loop BB224_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB224_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB224_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB224_8
.LBB224_7:                              # %if.then9
	jmp	.LBB224_62
.LBB224_8:                              # %if.end10
                                        #   in Loop: Header=BB224_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB224_9:                              # %while.cond11
                                        #   Parent Loop BB224_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB224_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB224_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB224_12
# %bb.11:                               # %if.then19
	jmp	.LBB224_49
.LBB224_12:                             # %if.end20
                                        #   in Loop: Header=BB224_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB224_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB224_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB224_16
.LBB224_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB224_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB224_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB224_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB224_16:                             # %if.end32
                                        #   in Loop: Header=BB224_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_18
# %bb.17:                               # %if.then35
	jmp	.LBB224_66
.LBB224_18:                             # %if.end36
                                        #   in Loop: Header=BB224_9 Depth=2
	jmp	.LBB224_9
.LBB224_19:                             # %while.end
                                        #   in Loop: Header=BB224_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB224_21
# %bb.20:                               # %if.then39
	jmp	.LBB224_62
.LBB224_21:                             # %if.end40
                                        #   in Loop: Header=BB224_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB224_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB224_23:                             # %if.end44
                                        #   in Loop: Header=BB224_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB224_24:                             # %for.cond
                                        #   Parent Loop BB224_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB224_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB224_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB224_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB224_24
.LBB224_27:                             # %for.end
                                        #   in Loop: Header=BB224_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB224_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB224_29:                             # %if.end53
                                        #   in Loop: Header=BB224_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB224_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB224_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB224_32
# %bb.31:                               # %if.then60
	jmp	.LBB224_33
.LBB224_32:                             # %if.end61
                                        #   in Loop: Header=BB224_5 Depth=1
	jmp	.LBB224_5
.LBB224_33:                             # %while.end62
	jmp	.LBB224_34
.LBB224_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_36
# %bb.35:                               # %if.then65
	jmp	.LBB224_66
.LBB224_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB224_38
# %bb.37:                               # %if.then70
	jmp	.LBB224_66
.LBB224_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_40
# %bb.39:                               # %if.then74
	jmp	.LBB224_66
.LBB224_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB224_42
# %bb.41:                               # %if.then79
	jmp	.LBB224_66
.LBB224_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB224_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB224_45
# %bb.44:                               # %if.then87
	jmp	.LBB224_66
.LBB224_45:                             # %if.end88
	jmp	.LBB224_46
.LBB224_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB224_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB224_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB224_80
.LBB224_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB224_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB224_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB224_53
# %bb.52:                               # %if.then100
	jmp	.LBB224_60
.LBB224_53:                             # %if.end101
                                        #   in Loop: Header=BB224_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_55
# %bb.54:                               # %if.then107
	jmp	.LBB224_66
.LBB224_55:                             # %if.end108
                                        #   in Loop: Header=BB224_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB224_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB224_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB224_57:                             # %if.end115
                                        #   in Loop: Header=BB224_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB224_59
# %bb.58:                               # %if.then118
	jmp	.LBB224_66
.LBB224_59:                             # %if.end119
                                        #   in Loop: Header=BB224_51 Depth=1
	jmp	.LBB224_51
.LBB224_60:                             # %while.end120
	jmp	.LBB224_34
.LBB224_61:                             # %if.end121
	jmp	.LBB224_62
.LBB224_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB224_79
# %bb.63:                               # %errhandler
	movq	.LJTI224_0(,%rax,8), %rax
	jmpq	*%rax
.LBB224_64:                             # %sw.bb
	callq	configError
.LBB224_65:                             # %sw.bb122
	jmp	.LBB224_66
.LBB224_66:                             # %errhandler_io
	callq	ioError
.LBB224_67:                             # %sw.bb123
	callq	crcError
.LBB224_68:                             # %sw.bb124
	callq	outOfMemory
.LBB224_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB224_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB224_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB224_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB224_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB224_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB224_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB224_80
.LBB224_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB224_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB224_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB224_80
.LBB224_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB224_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$628695421, -68(%rbp)   # imm = 0x2579217D
	jne	.LBB224_82
.LBB224_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_81
.Lfunc_end224:
	.size	uncompressStream.182, .Lfunc_end224-uncompressStream.182
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI224_0:
	.quad	.LBB224_64
	.quad	.LBB224_79
	.quad	.LBB224_69
	.quad	.LBB224_65
	.quad	.LBB224_70
	.quad	.LBB224_67
	.quad	.LBB224_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.183
	.type	snocString.183,@function
snocString.183:                         # @snocString.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1007690175, -44(%rbp)  # imm = 0x3C1021BF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB225_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB225_6
.LBB225_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB225_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB225_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB225_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB225_3
.LBB225_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB225_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1007690175, -44(%rbp)  # imm = 0x3C1021BF
	jne	.LBB225_8
.LBB225_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_7
.Lfunc_end225:
	.size	snocString.183, .Lfunc_end225-snocString.183
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.184
	.type	hasSuffix.184,@function
hasSuffix.184:                          # @hasSuffix.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$841884754, -24(%rbp)   # imm = 0x322E2452
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB226_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB226_5
.LBB226_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB226_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB226_5
.LBB226_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB226_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$841884754, -24(%rbp)   # imm = 0x322E2452
	jne	.LBB226_7
.LBB226_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_6
.Lfunc_end226:
	.size	hasSuffix.184, .Lfunc_end226-hasSuffix.184
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.185
	.type	notAStandardFile.185,@function
notAStandardFile.185:                   # @notAStandardFile.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$734280923, -16(%rbp)   # imm = 0x2BC43CDB
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB227_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB227_5
.LBB227_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB227_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB227_5
.LBB227_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB227_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$734280923, -16(%rbp)   # imm = 0x2BC43CDB
	jne	.LBB227_7
.LBB227_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_6
.Lfunc_end227:
	.size	notAStandardFile.185, .Lfunc_end227-notAStandardFile.185
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.186
	.type	countHardLinks.186,@function
countHardLinks.186:                     # @countHardLinks.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1014149966, -16(%rbp)  # imm = 0x3C72B34E
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB228_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB228_3
.LBB228_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB228_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1014149966, -16(%rbp)  # imm = 0x3C72B34E
	jne	.LBB228_5
.LBB228_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_4
.Lfunc_end228:
	.size	countHardLinks.186, .Lfunc_end228-countHardLinks.186
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.187
	.type	testStream.187,@function
testStream.187:                         # @testStream.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$859445491, -56(%rbp)   # imm = 0x333A18F3
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB229_2
# %bb.1:                                # %if.then
	jmp	.LBB229_38
.LBB229_2:                              # %if.end
	jmp	.LBB229_3
.LBB229_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_7 Depth 2
                                        #     Child Loop BB229_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB229_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB229_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB229_6
.LBB229_5:                              # %if.then5
	jmp	.LBB229_32
.LBB229_6:                              # %if.end6
                                        #   in Loop: Header=BB229_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB229_7:                              # %while.cond7
                                        #   Parent Loop BB229_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB229_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB229_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB229_10
# %bb.9:                                # %if.then15
	jmp	.LBB229_32
.LBB229_10:                             # %if.end16
                                        #   in Loop: Header=BB229_7 Depth=2
	jmp	.LBB229_7
.LBB229_11:                             # %while.end
                                        #   in Loop: Header=BB229_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB229_13
# %bb.12:                               # %if.then19
	jmp	.LBB229_32
.LBB229_13:                             # %if.end20
                                        #   in Loop: Header=BB229_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB229_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB229_15:                             # %if.end24
                                        #   in Loop: Header=BB229_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB229_16:                             # %for.cond
                                        #   Parent Loop BB229_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB229_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB229_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB229_16
.LBB229_19:                             # %for.end
                                        #   in Loop: Header=BB229_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB229_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB229_21:                             # %if.end33
                                        #   in Loop: Header=BB229_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB229_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB229_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB229_24
# %bb.23:                               # %if.then39
	jmp	.LBB229_25
.LBB229_24:                             # %if.end40
                                        #   in Loop: Header=BB229_3 Depth=1
	jmp	.LBB229_3
.LBB229_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB229_27
# %bb.26:                               # %if.then44
	jmp	.LBB229_38
.LBB229_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB229_29
# %bb.28:                               # %if.then49
	jmp	.LBB229_38
.LBB229_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB229_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB229_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB229_50
.LBB229_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB229_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB229_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB229_49
# %bb.35:                               # %if.end60
	movq	.LJTI229_0(,%rax,8), %rax
	jmpq	*%rax
.LBB229_36:                             # %sw.bb
	callq	configError
.LBB229_37:                             # %sw.bb61
	jmp	.LBB229_38
.LBB229_38:                             # %errhandler_io
	callq	ioError
.LBB229_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB229_50
.LBB229_40:                             # %sw.bb64
	callq	outOfMemory
.LBB229_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB229_50
.LBB229_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB229_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB229_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB229_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB229_50
.LBB229_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB229_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB229_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB229_50
.LBB229_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB229_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$859445491, -56(%rbp)   # imm = 0x333A18F3
	jne	.LBB229_52
.LBB229_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_51
.Lfunc_end229:
	.size	testStream.187, .Lfunc_end229-testStream.187
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI229_0:
	.quad	.LBB229_36
	.quad	.LBB229_49
	.quad	.LBB229_41
	.quad	.LBB229_37
	.quad	.LBB229_42
	.quad	.LBB229_39
	.quad	.LBB229_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uncompressStream.188
	.type	uncompressStream.188,@function
uncompressStream.188:                   # @uncompressStream.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1728684018, -68(%rbp)  # imm = 0x67099FF2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_2
# %bb.1:                                # %if.then
	jmp	.LBB230_66
.LBB230_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_4
# %bb.3:                                # %if.then3
	jmp	.LBB230_66
.LBB230_4:                              # %if.end4
	jmp	.LBB230_5
.LBB230_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_9 Depth 2
                                        #     Child Loop BB230_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB230_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB230_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB230_8
.LBB230_7:                              # %if.then9
	jmp	.LBB230_62
.LBB230_8:                              # %if.end10
                                        #   in Loop: Header=BB230_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB230_9:                              # %while.cond11
                                        #   Parent Loop BB230_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB230_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB230_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB230_12
# %bb.11:                               # %if.then19
	jmp	.LBB230_49
.LBB230_12:                             # %if.end20
                                        #   in Loop: Header=BB230_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB230_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB230_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB230_16
.LBB230_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB230_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB230_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB230_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB230_16:                             # %if.end32
                                        #   in Loop: Header=BB230_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_18
# %bb.17:                               # %if.then35
	jmp	.LBB230_66
.LBB230_18:                             # %if.end36
                                        #   in Loop: Header=BB230_9 Depth=2
	jmp	.LBB230_9
.LBB230_19:                             # %while.end
                                        #   in Loop: Header=BB230_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB230_21
# %bb.20:                               # %if.then39
	jmp	.LBB230_62
.LBB230_21:                             # %if.end40
                                        #   in Loop: Header=BB230_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB230_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB230_23:                             # %if.end44
                                        #   in Loop: Header=BB230_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB230_24:                             # %for.cond
                                        #   Parent Loop BB230_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB230_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB230_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB230_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_24
.LBB230_27:                             # %for.end
                                        #   in Loop: Header=BB230_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB230_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB230_29:                             # %if.end53
                                        #   in Loop: Header=BB230_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB230_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB230_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB230_32
# %bb.31:                               # %if.then60
	jmp	.LBB230_33
.LBB230_32:                             # %if.end61
                                        #   in Loop: Header=BB230_5 Depth=1
	jmp	.LBB230_5
.LBB230_33:                             # %while.end62
	jmp	.LBB230_34
.LBB230_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_36
# %bb.35:                               # %if.then65
	jmp	.LBB230_66
.LBB230_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB230_38
# %bb.37:                               # %if.then70
	jmp	.LBB230_66
.LBB230_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_40
# %bb.39:                               # %if.then74
	jmp	.LBB230_66
.LBB230_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB230_42
# %bb.41:                               # %if.then79
	jmp	.LBB230_66
.LBB230_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB230_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB230_45
# %bb.44:                               # %if.then87
	jmp	.LBB230_66
.LBB230_45:                             # %if.end88
	jmp	.LBB230_46
.LBB230_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB230_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB230_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB230_80
.LBB230_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB230_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB230_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB230_53
# %bb.52:                               # %if.then100
	jmp	.LBB230_60
.LBB230_53:                             # %if.end101
                                        #   in Loop: Header=BB230_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_55
# %bb.54:                               # %if.then107
	jmp	.LBB230_66
.LBB230_55:                             # %if.end108
                                        #   in Loop: Header=BB230_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB230_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB230_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB230_57:                             # %if.end115
                                        #   in Loop: Header=BB230_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_59
# %bb.58:                               # %if.then118
	jmp	.LBB230_66
.LBB230_59:                             # %if.end119
                                        #   in Loop: Header=BB230_51 Depth=1
	jmp	.LBB230_51
.LBB230_60:                             # %while.end120
	jmp	.LBB230_34
.LBB230_61:                             # %if.end121
	jmp	.LBB230_62
.LBB230_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB230_79
# %bb.63:                               # %errhandler
	movq	.LJTI230_0(,%rax,8), %rax
	jmpq	*%rax
.LBB230_64:                             # %sw.bb
	callq	configError
.LBB230_65:                             # %sw.bb122
	jmp	.LBB230_66
.LBB230_66:                             # %errhandler_io
	callq	ioError
.LBB230_67:                             # %sw.bb123
	callq	crcError
.LBB230_68:                             # %sw.bb124
	callq	outOfMemory
.LBB230_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB230_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB230_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB230_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB230_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB230_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB230_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB230_80
.LBB230_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB230_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB230_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB230_80
.LBB230_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB230_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1728684018, -68(%rbp)  # imm = 0x67099FF2
	jne	.LBB230_82
.LBB230_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_81
.Lfunc_end230:
	.size	uncompressStream.188, .Lfunc_end230-uncompressStream.188
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI230_0:
	.quad	.LBB230_64
	.quad	.LBB230_79
	.quad	.LBB230_69
	.quad	.LBB230_65
	.quad	.LBB230_70
	.quad	.LBB230_67
	.quad	.LBB230_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.189
	.type	snocString.189,@function
snocString.189:                         # @snocString.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$583918550, -44(%rbp)   # imm = 0x22CDE3D6
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB231_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB231_6
.LBB231_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB231_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB231_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB231_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB231_3
.LBB231_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB231_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$583918550, -44(%rbp)   # imm = 0x22CDE3D6
	jne	.LBB231_8
.LBB231_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_7
.Lfunc_end231:
	.size	snocString.189, .Lfunc_end231-snocString.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.190
	.type	uInt64_toAscii.190,@function
uInt64_toAscii.190:                     # @uInt64_toAscii.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$863332878, -12(%rbp)   # imm = 0x33756A0E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB232_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB232_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB232_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB232_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB232_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB232_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB232_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_4
.LBB232_7:                              # %for.end
	cmpl	$863332878, -12(%rbp)   # imm = 0x33756A0E
	jne	.LBB232_9
.LBB232_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_8
.Lfunc_end232:
	.size	uInt64_toAscii.190, .Lfunc_end232-uInt64_toAscii.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.191
	.type	uInt64_from_UInt32s.191,@function
uInt64_from_UInt32s.191:                # @uInt64_from_UInt32s.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1330790384, -20(%rbp)  # imm = 0x4F523FF0
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$1330790384, -20(%rbp)  # imm = 0x4F523FF0
	jne	.LBB233_2
.LBB233_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_1
.Lfunc_end233:
	.size	uInt64_from_UInt32s.191, .Lfunc_end233-uInt64_from_UInt32s.191
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.192
	.type	mapSuffix.192,@function
mapSuffix.192:                          # @mapSuffix.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$377437415, -36(%rbp)   # imm = 0x167F3CE7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB234_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB234_3
.LBB234_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB234_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$377437415, -36(%rbp)   # imm = 0x167F3CE7
	jne	.LBB234_5
.LBB234_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_4
.Lfunc_end234:
	.size	mapSuffix.192, .Lfunc_end234-mapSuffix.192
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.193
	.type	uncompress.193,@function
uncompress.193:                         # @uncompress.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1354074601, -64(%rbp)  # imm = 0x50B589E9
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB235_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB235_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB235_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB235_6
	jmp	.LBB235_4
.LBB235_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB235_14
	jmp	.LBB235_5
.LBB235_5:                              # %if.end
	subl	$3, %eax
	je	.LBB235_7
	jmp	.LBB235_15
.LBB235_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB235_15
.LBB235_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB235_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB235_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB235_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB235_11
# %bb.10:                               # %if.then6
	jmp	.LBB235_16
.LBB235_11:                             # %if.end7
                                        #   in Loop: Header=BB235_8 Depth=1
	jmp	.LBB235_12
.LBB235_12:                             # %for.inc
                                        #   in Loop: Header=BB235_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB235_8
.LBB235_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB235_15
.LBB235_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB235_15:                             # %sw.epilog
	jmp	.LBB235_16
.LBB235_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB235_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB235_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB235_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB235_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB235_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB235_29
.LBB235_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB235_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_28:                             # %if.end40
	jmp	.LBB235_29
.LBB235_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB235_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB235_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB235_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB235_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB235_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB235_38:                             # %if.end61
	jmp	.LBB235_39
.LBB235_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB235_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB235_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB235_44
.LBB235_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_44:                             # %if.end74
	jmp	.LBB235_45
.LBB235_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB235_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB235_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB235_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB235_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB235_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB235_54
	jmp	.LBB235_52
.LBB235_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB235_57
	jmp	.LBB235_53
.LBB235_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB235_62
	jmp	.LBB235_71
.LBB235_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB235_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_56:                             # %if.end100
	jmp	.LBB235_72
.LBB235_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB235_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB235_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB235_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_61:                             # %if.end114
	jmp	.LBB235_72
.LBB235_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB235_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB235_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB235_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB235_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB235_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB235_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_70:                             # %if.end141
	jmp	.LBB235_72
.LBB235_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB235_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB235_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB235_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB235_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB235_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB235_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB235_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB235_79:                             # %if.end161
	jmp	.LBB235_80
.LBB235_80:                             # %if.end162
	jmp	.LBB235_81
.LBB235_81:                             # %if.end163
	jmp	.LBB235_87
.LBB235_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB235_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB235_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB235_85:                             # %if.end173
	jmp	.LBB235_86
.LBB235_86:                             # %if.end174
	jmp	.LBB235_87
.LBB235_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB235_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB235_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB235_90:                             # %if.end182
	jmp	.LBB235_95
.LBB235_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB235_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB235_94
.LBB235_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_94:                             # %if.end190
	jmp	.LBB235_95
.LBB235_95:                             # %if.end191
	cmpl	$1354074601, -64(%rbp)  # imm = 0x50B589E9
	jne	.LBB235_97
.LBB235_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_96
.Lfunc_end235:
	.size	uncompress.193, .Lfunc_end235-uncompress.193
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.194
	.type	uncompressStream.194,@function
uncompressStream.194:                   # @uncompressStream.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1101662763, -68(%rbp)  # imm = 0x41AA0A2B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_2
# %bb.1:                                # %if.then
	jmp	.LBB236_66
.LBB236_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_4
# %bb.3:                                # %if.then3
	jmp	.LBB236_66
.LBB236_4:                              # %if.end4
	jmp	.LBB236_5
.LBB236_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_9 Depth 2
                                        #     Child Loop BB236_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB236_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB236_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB236_8
.LBB236_7:                              # %if.then9
	jmp	.LBB236_62
.LBB236_8:                              # %if.end10
                                        #   in Loop: Header=BB236_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB236_9:                              # %while.cond11
                                        #   Parent Loop BB236_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB236_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB236_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB236_12
# %bb.11:                               # %if.then19
	jmp	.LBB236_49
.LBB236_12:                             # %if.end20
                                        #   in Loop: Header=BB236_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB236_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB236_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB236_16
.LBB236_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB236_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB236_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB236_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB236_16:                             # %if.end32
                                        #   in Loop: Header=BB236_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_18
# %bb.17:                               # %if.then35
	jmp	.LBB236_66
.LBB236_18:                             # %if.end36
                                        #   in Loop: Header=BB236_9 Depth=2
	jmp	.LBB236_9
.LBB236_19:                             # %while.end
                                        #   in Loop: Header=BB236_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB236_21
# %bb.20:                               # %if.then39
	jmp	.LBB236_62
.LBB236_21:                             # %if.end40
                                        #   in Loop: Header=BB236_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB236_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB236_23:                             # %if.end44
                                        #   in Loop: Header=BB236_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB236_24:                             # %for.cond
                                        #   Parent Loop BB236_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB236_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB236_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB236_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB236_24
.LBB236_27:                             # %for.end
                                        #   in Loop: Header=BB236_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB236_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB236_29:                             # %if.end53
                                        #   in Loop: Header=BB236_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB236_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB236_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB236_32
# %bb.31:                               # %if.then60
	jmp	.LBB236_33
.LBB236_32:                             # %if.end61
                                        #   in Loop: Header=BB236_5 Depth=1
	jmp	.LBB236_5
.LBB236_33:                             # %while.end62
	jmp	.LBB236_34
.LBB236_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_36
# %bb.35:                               # %if.then65
	jmp	.LBB236_66
.LBB236_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB236_38
# %bb.37:                               # %if.then70
	jmp	.LBB236_66
.LBB236_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_40
# %bb.39:                               # %if.then74
	jmp	.LBB236_66
.LBB236_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB236_42
# %bb.41:                               # %if.then79
	jmp	.LBB236_66
.LBB236_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB236_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB236_45
# %bb.44:                               # %if.then87
	jmp	.LBB236_66
.LBB236_45:                             # %if.end88
	jmp	.LBB236_46
.LBB236_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB236_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB236_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB236_80
.LBB236_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB236_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB236_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB236_53
# %bb.52:                               # %if.then100
	jmp	.LBB236_60
.LBB236_53:                             # %if.end101
                                        #   in Loop: Header=BB236_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_55
# %bb.54:                               # %if.then107
	jmp	.LBB236_66
.LBB236_55:                             # %if.end108
                                        #   in Loop: Header=BB236_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB236_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB236_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB236_57:                             # %if.end115
                                        #   in Loop: Header=BB236_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_59
# %bb.58:                               # %if.then118
	jmp	.LBB236_66
.LBB236_59:                             # %if.end119
                                        #   in Loop: Header=BB236_51 Depth=1
	jmp	.LBB236_51
.LBB236_60:                             # %while.end120
	jmp	.LBB236_34
.LBB236_61:                             # %if.end121
	jmp	.LBB236_62
.LBB236_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB236_79
# %bb.63:                               # %errhandler
	movq	.LJTI236_0(,%rax,8), %rax
	jmpq	*%rax
.LBB236_64:                             # %sw.bb
	callq	configError
.LBB236_65:                             # %sw.bb122
	jmp	.LBB236_66
.LBB236_66:                             # %errhandler_io
	callq	ioError
.LBB236_67:                             # %sw.bb123
	callq	crcError
.LBB236_68:                             # %sw.bb124
	callq	outOfMemory
.LBB236_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB236_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB236_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB236_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB236_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB236_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB236_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB236_80
.LBB236_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB236_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB236_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB236_80
.LBB236_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB236_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1101662763, -68(%rbp)  # imm = 0x41AA0A2B
	jne	.LBB236_82
.LBB236_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_81
.Lfunc_end236:
	.size	uncompressStream.194, .Lfunc_end236-uncompressStream.194
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI236_0:
	.quad	.LBB236_64
	.quad	.LBB236_79
	.quad	.LBB236_69
	.quad	.LBB236_65
	.quad	.LBB236_70
	.quad	.LBB236_67
	.quad	.LBB236_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function countHardLinks.195
	.type	countHardLinks.195,@function
countHardLinks.195:                     # @countHardLinks.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$261165796, -20(%rbp)   # imm = 0xF9112E4
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB237_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB237_3
.LBB237_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB237_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$261165796, -20(%rbp)   # imm = 0xF9112E4
	jne	.LBB237_5
.LBB237_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_4
.Lfunc_end237:
	.size	countHardLinks.195, .Lfunc_end237-countHardLinks.195
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.196
.LCPI238_0:
	.quad	4607182418800017408     # double 1
.LCPI238_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.196,@function
uInt64_to_double.196:                   # @uInt64_to_double.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI238_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$452434551, -28(%rbp)   # imm = 0x1AF79A77
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB238_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB238_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB238_1 Depth=1
	vmovsd	.LCPI238_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB238_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB238_1
.LBB238_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$452434551, -28(%rbp)   # imm = 0x1AF79A77
	jne	.LBB238_6
.LBB238_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB238_5
.Lfunc_end238:
	.size	uInt64_to_double.196, .Lfunc_end238-uInt64_to_double.196
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.197
	.type	compress.197,@function
compress.197:                           # @compress.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1951603676, -64(%rbp)  # imm = 0x74531BDC
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB239_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB239_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB239_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB239_6
	jmp	.LBB239_4
.LBB239_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB239_8
	jmp	.LBB239_5
.LBB239_5:                              # %if.end
	subl	$3, %eax
	je	.LBB239_7
	jmp	.LBB239_9
.LBB239_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB239_9
.LBB239_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB239_9
.LBB239_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB239_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB239_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB239_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB239_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB239_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB239_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB239_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB239_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB239_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB239_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB239_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB239_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB239_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_23:                             # %if.end34
                                        #   in Loop: Header=BB239_18 Depth=1
	jmp	.LBB239_24
.LBB239_24:                             # %for.inc
                                        #   in Loop: Header=BB239_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB239_18
.LBB239_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB239_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB239_30
.LBB239_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB239_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_29:                             # %if.end45
	jmp	.LBB239_30
.LBB239_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB239_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB239_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB239_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB239_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB239_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB239_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB239_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB239_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB239_41
.LBB239_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_41:                             # %if.end72
	jmp	.LBB239_42
.LBB239_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB239_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB239_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB239_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB239_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB239_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB239_51
	jmp	.LBB239_49
.LBB239_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB239_54
	jmp	.LBB239_50
.LBB239_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB239_61
	jmp	.LBB239_70
.LBB239_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB239_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_53:                             # %if.end98
	jmp	.LBB239_71
.LBB239_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB239_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB239_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB239_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB239_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_60:                             # %if.end119
	jmp	.LBB239_71
.LBB239_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB239_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB239_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB239_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB239_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB239_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB239_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB239_80
.LBB239_69:                             # %if.end146
	jmp	.LBB239_71
.LBB239_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB239_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB239_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB239_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB239_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB239_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB239_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB239_77:                             # %if.end163
	jmp	.LBB239_78
.LBB239_78:                             # %if.end164
	jmp	.LBB239_79
.LBB239_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB239_80:                             # %return
	cmpl	$1951603676, -64(%rbp)  # imm = 0x74531BDC
	jne	.LBB239_82
.LBB239_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_81
.Lfunc_end239:
	.size	compress.197, .Lfunc_end239-compress.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.198
	.type	testStream.198,@function
testStream.198:                         # @testStream.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1754721230, -56(%rbp)  # imm = 0x6896EBCE
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB240_2
# %bb.1:                                # %if.then
	jmp	.LBB240_38
.LBB240_2:                              # %if.end
	jmp	.LBB240_3
.LBB240_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_7 Depth 2
                                        #     Child Loop BB240_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB240_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB240_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB240_6
.LBB240_5:                              # %if.then5
	jmp	.LBB240_32
.LBB240_6:                              # %if.end6
                                        #   in Loop: Header=BB240_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB240_7:                              # %while.cond7
                                        #   Parent Loop BB240_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB240_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB240_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB240_10
# %bb.9:                                # %if.then15
	jmp	.LBB240_32
.LBB240_10:                             # %if.end16
                                        #   in Loop: Header=BB240_7 Depth=2
	jmp	.LBB240_7
.LBB240_11:                             # %while.end
                                        #   in Loop: Header=BB240_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB240_13
# %bb.12:                               # %if.then19
	jmp	.LBB240_32
.LBB240_13:                             # %if.end20
                                        #   in Loop: Header=BB240_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB240_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB240_15:                             # %if.end24
                                        #   in Loop: Header=BB240_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB240_16:                             # %for.cond
                                        #   Parent Loop BB240_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB240_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB240_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB240_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB240_16
.LBB240_19:                             # %for.end
                                        #   in Loop: Header=BB240_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB240_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB240_21:                             # %if.end33
                                        #   in Loop: Header=BB240_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB240_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB240_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB240_24
# %bb.23:                               # %if.then39
	jmp	.LBB240_25
.LBB240_24:                             # %if.end40
                                        #   in Loop: Header=BB240_3 Depth=1
	jmp	.LBB240_3
.LBB240_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB240_27
# %bb.26:                               # %if.then44
	jmp	.LBB240_38
.LBB240_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB240_29
# %bb.28:                               # %if.then49
	jmp	.LBB240_38
.LBB240_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB240_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB240_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB240_50
.LBB240_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB240_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB240_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB240_49
# %bb.35:                               # %if.end60
	movq	.LJTI240_0(,%rax,8), %rax
	jmpq	*%rax
.LBB240_36:                             # %sw.bb
	callq	configError
.LBB240_37:                             # %sw.bb61
	jmp	.LBB240_38
.LBB240_38:                             # %errhandler_io
	callq	ioError
.LBB240_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB240_50
.LBB240_40:                             # %sw.bb64
	callq	outOfMemory
.LBB240_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB240_50
.LBB240_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB240_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB240_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB240_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB240_50
.LBB240_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB240_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB240_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB240_50
.LBB240_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB240_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1754721230, -56(%rbp)  # imm = 0x6896EBCE
	jne	.LBB240_52
.LBB240_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_51
.Lfunc_end240:
	.size	testStream.198, .Lfunc_end240-testStream.198
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI240_0:
	.quad	.LBB240_36
	.quad	.LBB240_49
	.quad	.LBB240_41
	.quad	.LBB240_37
	.quad	.LBB240_42
	.quad	.LBB240_39
	.quad	.LBB240_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function countHardLinks.199
	.type	countHardLinks.199,@function
countHardLinks.199:                     # @countHardLinks.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1372795810, -20(%rbp)  # imm = 0x51D333A2
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB241_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB241_3
.LBB241_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB241_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1372795810, -20(%rbp)  # imm = 0x51D333A2
	jne	.LBB241_5
.LBB241_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_4
.Lfunc_end241:
	.size	countHardLinks.199, .Lfunc_end241-countHardLinks.199
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.200
	.type	addFlagsFromEnvVar.200,@function
addFlagsFromEnvVar.200:                 # @addFlagsFromEnvVar.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$567477465, -24(%rbp)   # imm = 0x21D304D9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB242_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB242_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB242_5 Depth 2
                                        #     Child Loop BB242_8 Depth 2
                                        #     Child Loop BB242_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB242_4
# %bb.3:                                # %if.then3
	jmp	.LBB242_21
.LBB242_4:                              # %if.end
                                        #   in Loop: Header=BB242_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB242_5:                              # %while.cond4
                                        #   Parent Loop BB242_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB242_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB242_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB242_5
.LBB242_7:                              # %while.end
                                        #   in Loop: Header=BB242_2 Depth=1
	jmp	.LBB242_8
.LBB242_8:                              # %while.cond12
                                        #   Parent Loop BB242_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB242_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB242_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB242_10:                             # %land.end
                                        #   in Loop: Header=BB242_8 Depth=2
	testb	$1, %al
	jne	.LBB242_11
	jmp	.LBB242_12
.LBB242_11:                             # %while.body27
                                        #   in Loop: Header=BB242_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB242_8
.LBB242_12:                             # %while.end28
                                        #   in Loop: Header=BB242_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB242_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB242_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB242_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB242_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB242_15:                             # %if.end35
                                        #   in Loop: Header=BB242_2 Depth=1
	movl	$0, -8(%rbp)
.LBB242_16:                             # %for.cond
                                        #   Parent Loop BB242_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB242_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB242_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB242_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB242_16
.LBB242_19:                             # %for.end
                                        #   in Loop: Header=BB242_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB242_20:                             # %if.end46
                                        #   in Loop: Header=BB242_2 Depth=1
	jmp	.LBB242_2
.LBB242_21:                             # %while.end47
	jmp	.LBB242_22
.LBB242_22:                             # %if.end48
	cmpl	$567477465, -24(%rbp)   # imm = 0x21D304D9
	jne	.LBB242_24
.LBB242_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_23
.Lfunc_end242:
	.size	addFlagsFromEnvVar.200, .Lfunc_end242-addFlagsFromEnvVar.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.201
	.type	countHardLinks.201,@function
countHardLinks.201:                     # @countHardLinks.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$479196850, -20(%rbp)   # imm = 0x1C8FF6B2
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB243_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB243_3
.LBB243_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB243_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$479196850, -20(%rbp)   # imm = 0x1C8FF6B2
	jne	.LBB243_5
.LBB243_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_4
.Lfunc_end243:
	.size	countHardLinks.201, .Lfunc_end243-countHardLinks.201
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.202
	.type	mapSuffix.202,@function
mapSuffix.202:                          # @mapSuffix.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2014615929, -36(%rbp)  # imm = 0x78149979
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB244_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB244_3
.LBB244_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB244_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$2014615929, -36(%rbp)  # imm = 0x78149979
	jne	.LBB244_5
.LBB244_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_4
.Lfunc_end244:
	.size	mapSuffix.202, .Lfunc_end244-mapSuffix.202
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.203
	.type	testStream.203,@function
testStream.203:                         # @testStream.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1613829001, -56(%rbp)  # imm = 0x60311389
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB245_2
# %bb.1:                                # %if.then
	jmp	.LBB245_38
.LBB245_2:                              # %if.end
	jmp	.LBB245_3
.LBB245_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_7 Depth 2
                                        #     Child Loop BB245_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB245_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB245_6
.LBB245_5:                              # %if.then5
	jmp	.LBB245_32
.LBB245_6:                              # %if.end6
                                        #   in Loop: Header=BB245_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB245_7:                              # %while.cond7
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB245_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB245_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB245_10
# %bb.9:                                # %if.then15
	jmp	.LBB245_32
.LBB245_10:                             # %if.end16
                                        #   in Loop: Header=BB245_7 Depth=2
	jmp	.LBB245_7
.LBB245_11:                             # %while.end
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB245_13
# %bb.12:                               # %if.then19
	jmp	.LBB245_32
.LBB245_13:                             # %if.end20
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB245_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB245_15:                             # %if.end24
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB245_16:                             # %for.cond
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB245_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB245_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB245_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB245_16
.LBB245_19:                             # %for.end
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB245_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB245_21:                             # %if.end33
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB245_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB245_24
# %bb.23:                               # %if.then39
	jmp	.LBB245_25
.LBB245_24:                             # %if.end40
                                        #   in Loop: Header=BB245_3 Depth=1
	jmp	.LBB245_3
.LBB245_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB245_27
# %bb.26:                               # %if.then44
	jmp	.LBB245_38
.LBB245_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB245_29
# %bb.28:                               # %if.then49
	jmp	.LBB245_38
.LBB245_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB245_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB245_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB245_50
.LBB245_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB245_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB245_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB245_49
# %bb.35:                               # %if.end60
	movq	.LJTI245_0(,%rax,8), %rax
	jmpq	*%rax
.LBB245_36:                             # %sw.bb
	callq	configError
.LBB245_37:                             # %sw.bb61
	jmp	.LBB245_38
.LBB245_38:                             # %errhandler_io
	callq	ioError
.LBB245_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_40:                             # %sw.bb64
	callq	outOfMemory
.LBB245_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB245_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB245_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB245_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB245_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB245_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB245_50
.LBB245_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB245_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1613829001, -56(%rbp)  # imm = 0x60311389
	jne	.LBB245_52
.LBB245_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_51
.Lfunc_end245:
	.size	testStream.203, .Lfunc_end245-testStream.203
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI245_0:
	.quad	.LBB245_36
	.quad	.LBB245_49
	.quad	.LBB245_41
	.quad	.LBB245_37
	.quad	.LBB245_42
	.quad	.LBB245_39
	.quad	.LBB245_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function testStream.204
	.type	testStream.204,@function
testStream.204:                         # @testStream.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$714439838, -52(%rbp)   # imm = 0x2A957C9E
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB246_2
# %bb.1:                                # %if.then
	jmp	.LBB246_38
.LBB246_2:                              # %if.end
	jmp	.LBB246_3
.LBB246_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_7 Depth 2
                                        #     Child Loop BB246_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB246_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB246_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB246_6
.LBB246_5:                              # %if.then5
	jmp	.LBB246_32
.LBB246_6:                              # %if.end6
                                        #   in Loop: Header=BB246_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB246_7:                              # %while.cond7
                                        #   Parent Loop BB246_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB246_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB246_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB246_10
# %bb.9:                                # %if.then15
	jmp	.LBB246_32
.LBB246_10:                             # %if.end16
                                        #   in Loop: Header=BB246_7 Depth=2
	jmp	.LBB246_7
.LBB246_11:                             # %while.end
                                        #   in Loop: Header=BB246_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB246_13
# %bb.12:                               # %if.then19
	jmp	.LBB246_32
.LBB246_13:                             # %if.end20
                                        #   in Loop: Header=BB246_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB246_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB246_15:                             # %if.end24
                                        #   in Loop: Header=BB246_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB246_16:                             # %for.cond
                                        #   Parent Loop BB246_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB246_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB246_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB246_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB246_16
.LBB246_19:                             # %for.end
                                        #   in Loop: Header=BB246_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB246_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB246_21:                             # %if.end33
                                        #   in Loop: Header=BB246_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB246_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB246_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB246_24
# %bb.23:                               # %if.then39
	jmp	.LBB246_25
.LBB246_24:                             # %if.end40
                                        #   in Loop: Header=BB246_3 Depth=1
	jmp	.LBB246_3
.LBB246_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB246_27
# %bb.26:                               # %if.then44
	jmp	.LBB246_38
.LBB246_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB246_29
# %bb.28:                               # %if.then49
	jmp	.LBB246_38
.LBB246_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB246_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB246_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB246_50
.LBB246_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB246_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB246_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB246_49
# %bb.35:                               # %if.end60
	movq	.LJTI246_0(,%rax,8), %rax
	jmpq	*%rax
.LBB246_36:                             # %sw.bb
	callq	configError
.LBB246_37:                             # %sw.bb61
	jmp	.LBB246_38
.LBB246_38:                             # %errhandler_io
	callq	ioError
.LBB246_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB246_50
.LBB246_40:                             # %sw.bb64
	callq	outOfMemory
.LBB246_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB246_50
.LBB246_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB246_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB246_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB246_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB246_50
.LBB246_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB246_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB246_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB246_50
.LBB246_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB246_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$714439838, -52(%rbp)   # imm = 0x2A957C9E
	jne	.LBB246_52
.LBB246_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_51
.Lfunc_end246:
	.size	testStream.204, .Lfunc_end246-testStream.204
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI246_0:
	.quad	.LBB246_36
	.quad	.LBB246_49
	.quad	.LBB246_41
	.quad	.LBB246_37
	.quad	.LBB246_42
	.quad	.LBB246_39
	.quad	.LBB246_40
                                        # -- End function
	.text
	.globl	fopen_output_safely.205 # -- Begin function fopen_output_safely.205
	.p2align	4, 0x90
	.type	fopen_output_safely.205,@function
fopen_output_safely.205:                # @fopen_output_safely.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1670110597, -16(%rbp)  # imm = 0x638BDD85
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB247_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB247_5
.LBB247_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB247_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB247_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB247_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1670110597, -16(%rbp)  # imm = 0x638BDD85
	jne	.LBB247_7
.LBB247_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_6
.Lfunc_end247:
	.size	fopen_output_safely.205, .Lfunc_end247-fopen_output_safely.205
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.206
	.type	testf.206,@function
testf.206:                              # @testf.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1283572439, -44(%rbp)  # imm = 0x4C81C2D7
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB248_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB248_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB248_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB248_6
	jmp	.LBB248_4
.LBB248_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB248_8
	jmp	.LBB248_5
.LBB248_5:                              # %if.end
	subl	$3, %eax
	je	.LBB248_7
	jmp	.LBB248_9
.LBB248_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB248_9
.LBB248_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB248_9
.LBB248_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB248_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB248_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB248_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB248_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB248_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB248_37
.LBB248_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB248_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB248_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB248_37
.LBB248_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB248_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB248_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB248_37
.LBB248_20:                             # %if.end30
	jmp	.LBB248_21
.LBB248_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB248_23
	jmp	.LBB248_22
.LBB248_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB248_26
	jmp	.LBB248_29
.LBB248_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB248_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB248_37
.LBB248_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB248_30
.LBB248_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB248_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB248_37
.LBB248_28:                             # %if.end48
	jmp	.LBB248_30
.LBB248_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB248_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB248_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB248_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB248_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB248_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB248_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB248_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB248_37:                             # %if.end67
	cmpl	$1283572439, -44(%rbp)  # imm = 0x4C81C2D7
	jne	.LBB248_39
.LBB248_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_38
.Lfunc_end248:
	.size	testf.206, .Lfunc_end248-testf.206
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.207
.LCPI249_0:
	.quad	4636737291354636288     # double 100
.LCPI249_1:
	.quad	4607182418800017408     # double 1
.LCPI249_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.207,@function
compressStream.207:                     # @compressStream.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1043284140, -76(%rbp)  # imm = 0x3E2F40AC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_2
# %bb.1:                                # %if.then
	jmp	.LBB249_46
.LBB249_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_4
# %bb.3:                                # %if.then3
	jmp	.LBB249_46
.LBB249_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB249_6
# %bb.5:                                # %if.then6
	jmp	.LBB249_40
.LBB249_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB249_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB249_8:                              # %if.end11
	jmp	.LBB249_9
.LBB249_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB249_11
# %bb.10:                               # %if.then14
	jmp	.LBB249_18
.LBB249_11:                             # %if.end15
                                        #   in Loop: Header=BB249_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_13
# %bb.12:                               # %if.then19
	jmp	.LBB249_46
.LBB249_13:                             # %if.end20
                                        #   in Loop: Header=BB249_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB249_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB249_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB249_15:                             # %if.end25
                                        #   in Loop: Header=BB249_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB249_17
# %bb.16:                               # %if.then28
	jmp	.LBB249_40
.LBB249_17:                             # %if.end29
                                        #   in Loop: Header=BB249_9 Depth=1
	jmp	.LBB249_9
.LBB249_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB249_20
# %bb.19:                               # %if.then32
	jmp	.LBB249_40
.LBB249_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_22
# %bb.21:                               # %if.then36
	jmp	.LBB249_46
.LBB249_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB249_24
# %bb.23:                               # %if.then41
	jmp	.LBB249_46
.LBB249_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB249_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB249_27
# %bb.26:                               # %if.then49
	jmp	.LBB249_46
.LBB249_27:                             # %if.end50
	jmp	.LBB249_28
.LBB249_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_30
# %bb.29:                               # %if.then54
	jmp	.LBB249_46
.LBB249_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB249_32
# %bb.31:                               # %if.then59
	jmp	.LBB249_46
.LBB249_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB249_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB249_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB249_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB249_37
.LBB249_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI249_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI249_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI249_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB249_37:                             # %if.end80
	jmp	.LBB249_38
.LBB249_38:                             # %if.end81
	cmpl	$1043284140, -76(%rbp)  # imm = 0x3E2F40AC
	jne	.LBB249_48
.LBB249_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB249_43
	jmp	.LBB249_41
.LBB249_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB249_45
	jmp	.LBB249_42
.LBB249_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB249_44
	jmp	.LBB249_47
.LBB249_43:                             # %sw.bb
	callq	configError
.LBB249_44:                             # %sw.bb82
	callq	outOfMemory
.LBB249_45:                             # %sw.bb83
	jmp	.LBB249_46
.LBB249_46:                             # %errhandler_io
	callq	ioError
.LBB249_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB249_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB249_39
.Lfunc_end249:
	.size	compressStream.207, .Lfunc_end249-compressStream.207
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.208
	.type	notAStandardFile.208,@function
notAStandardFile.208:                   # @notAStandardFile.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$979871395, -16(%rbp)   # imm = 0x3A67A6A3
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB250_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB250_5
.LBB250_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB250_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB250_5
.LBB250_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB250_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$979871395, -16(%rbp)   # imm = 0x3A67A6A3
	jne	.LBB250_7
.LBB250_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_6
.Lfunc_end250:
	.size	notAStandardFile.208, .Lfunc_end250-notAStandardFile.208
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.209
	.type	testStream.209,@function
testStream.209:                         # @testStream.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$609386776, -52(%rbp)   # imm = 0x24528118
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB251_2
# %bb.1:                                # %if.then
	jmp	.LBB251_38
.LBB251_2:                              # %if.end
	jmp	.LBB251_3
.LBB251_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_7 Depth 2
                                        #     Child Loop BB251_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB251_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB251_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB251_6
.LBB251_5:                              # %if.then5
	jmp	.LBB251_32
.LBB251_6:                              # %if.end6
                                        #   in Loop: Header=BB251_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB251_7:                              # %while.cond7
                                        #   Parent Loop BB251_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB251_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB251_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB251_10
# %bb.9:                                # %if.then15
	jmp	.LBB251_32
.LBB251_10:                             # %if.end16
                                        #   in Loop: Header=BB251_7 Depth=2
	jmp	.LBB251_7
.LBB251_11:                             # %while.end
                                        #   in Loop: Header=BB251_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB251_13
# %bb.12:                               # %if.then19
	jmp	.LBB251_32
.LBB251_13:                             # %if.end20
                                        #   in Loop: Header=BB251_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB251_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB251_15:                             # %if.end24
                                        #   in Loop: Header=BB251_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB251_16:                             # %for.cond
                                        #   Parent Loop BB251_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB251_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB251_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB251_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_16
.LBB251_19:                             # %for.end
                                        #   in Loop: Header=BB251_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB251_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB251_21:                             # %if.end33
                                        #   in Loop: Header=BB251_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB251_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB251_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB251_24
# %bb.23:                               # %if.then39
	jmp	.LBB251_25
.LBB251_24:                             # %if.end40
                                        #   in Loop: Header=BB251_3 Depth=1
	jmp	.LBB251_3
.LBB251_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB251_27
# %bb.26:                               # %if.then44
	jmp	.LBB251_38
.LBB251_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB251_29
# %bb.28:                               # %if.then49
	jmp	.LBB251_38
.LBB251_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB251_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB251_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB251_50
.LBB251_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB251_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB251_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB251_49
# %bb.35:                               # %if.end60
	movq	.LJTI251_0(,%rax,8), %rax
	jmpq	*%rax
.LBB251_36:                             # %sw.bb
	callq	configError
.LBB251_37:                             # %sw.bb61
	jmp	.LBB251_38
.LBB251_38:                             # %errhandler_io
	callq	ioError
.LBB251_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB251_50
.LBB251_40:                             # %sw.bb64
	callq	outOfMemory
.LBB251_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB251_50
.LBB251_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB251_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB251_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB251_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB251_50
.LBB251_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB251_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB251_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB251_50
.LBB251_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB251_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$609386776, -52(%rbp)   # imm = 0x24528118
	jne	.LBB251_52
.LBB251_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_51
.Lfunc_end251:
	.size	testStream.209, .Lfunc_end251-testStream.209
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI251_0:
	.quad	.LBB251_36
	.quad	.LBB251_49
	.quad	.LBB251_41
	.quad	.LBB251_37
	.quad	.LBB251_42
	.quad	.LBB251_39
	.quad	.LBB251_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.210
	.type	snocString.210,@function
snocString.210:                         # @snocString.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1428351948, -44(%rbp)  # imm = 0x5522EBCC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB252_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB252_6
.LBB252_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB252_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB252_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB252_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB252_3
.LBB252_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB252_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1428351948, -44(%rbp)  # imm = 0x5522EBCC
	jne	.LBB252_8
.LBB252_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_7
.Lfunc_end252:
	.size	snocString.210, .Lfunc_end252-snocString.210
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.211
	.type	testf.211,@function
testf.211:                              # @testf.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1502442713, -44(%rbp)  # imm = 0x598D74D9
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB253_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB253_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB253_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB253_6
	jmp	.LBB253_4
.LBB253_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB253_8
	jmp	.LBB253_5
.LBB253_5:                              # %if.end
	subl	$3, %eax
	je	.LBB253_7
	jmp	.LBB253_9
.LBB253_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB253_9
.LBB253_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB253_9
.LBB253_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB253_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB253_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB253_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB253_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB253_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB253_37
.LBB253_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB253_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB253_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB253_37
.LBB253_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB253_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB253_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB253_37
.LBB253_20:                             # %if.end30
	jmp	.LBB253_21
.LBB253_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB253_23
	jmp	.LBB253_22
.LBB253_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB253_26
	jmp	.LBB253_29
.LBB253_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB253_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB253_37
.LBB253_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB253_30
.LBB253_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB253_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB253_37
.LBB253_28:                             # %if.end48
	jmp	.LBB253_30
.LBB253_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB253_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB253_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB253_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB253_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB253_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB253_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB253_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB253_37:                             # %if.end67
	cmpl	$1502442713, -44(%rbp)  # imm = 0x598D74D9
	jne	.LBB253_39
.LBB253_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_38
.Lfunc_end253:
	.size	testf.211, .Lfunc_end253-testf.211
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.212 # -- Begin function fopen_output_safely.212
	.p2align	4, 0x90
	.type	fopen_output_safely.212,@function
fopen_output_safely.212:                # @fopen_output_safely.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$585495214, -16(%rbp)   # imm = 0x22E5F2AE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB254_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB254_5
.LBB254_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB254_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB254_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB254_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$585495214, -16(%rbp)   # imm = 0x22E5F2AE
	jne	.LBB254_7
.LBB254_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_6
.Lfunc_end254:
	.size	fopen_output_safely.212, .Lfunc_end254-fopen_output_safely.212
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.213
	.type	mapSuffix.213,@function
mapSuffix.213:                          # @mapSuffix.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$161134960, -36(%rbp)   # imm = 0x99AB970
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB255_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB255_3
.LBB255_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB255_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$161134960, -36(%rbp)   # imm = 0x99AB970
	jne	.LBB255_5
.LBB255_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_4
.Lfunc_end255:
	.size	mapSuffix.213, .Lfunc_end255-mapSuffix.213
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.214
.LCPI256_0:
	.quad	4636737291354636288     # double 100
.LCPI256_1:
	.quad	4607182418800017408     # double 1
.LCPI256_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.214,@function
compressStream.214:                     # @compressStream.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1156804263, -76(%rbp)  # imm = 0x44F36EA7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB256_2
# %bb.1:                                # %if.then
	jmp	.LBB256_46
.LBB256_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB256_4
# %bb.3:                                # %if.then3
	jmp	.LBB256_46
.LBB256_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB256_6
# %bb.5:                                # %if.then6
	jmp	.LBB256_40
.LBB256_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB256_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB256_8:                              # %if.end11
	jmp	.LBB256_9
.LBB256_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB256_11
# %bb.10:                               # %if.then14
	jmp	.LBB256_18
.LBB256_11:                             # %if.end15
                                        #   in Loop: Header=BB256_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB256_13
# %bb.12:                               # %if.then19
	jmp	.LBB256_46
.LBB256_13:                             # %if.end20
                                        #   in Loop: Header=BB256_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB256_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB256_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB256_15:                             # %if.end25
                                        #   in Loop: Header=BB256_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB256_17
# %bb.16:                               # %if.then28
	jmp	.LBB256_40
.LBB256_17:                             # %if.end29
                                        #   in Loop: Header=BB256_9 Depth=1
	jmp	.LBB256_9
.LBB256_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB256_20
# %bb.19:                               # %if.then32
	jmp	.LBB256_40
.LBB256_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB256_22
# %bb.21:                               # %if.then36
	jmp	.LBB256_46
.LBB256_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB256_24
# %bb.23:                               # %if.then41
	jmp	.LBB256_46
.LBB256_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB256_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB256_27
# %bb.26:                               # %if.then49
	jmp	.LBB256_46
.LBB256_27:                             # %if.end50
	jmp	.LBB256_28
.LBB256_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB256_30
# %bb.29:                               # %if.then54
	jmp	.LBB256_46
.LBB256_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB256_32
# %bb.31:                               # %if.then59
	jmp	.LBB256_46
.LBB256_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB256_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB256_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB256_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB256_37
.LBB256_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI256_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI256_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI256_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB256_37:                             # %if.end80
	jmp	.LBB256_38
.LBB256_38:                             # %if.end81
	cmpl	$1156804263, -76(%rbp)  # imm = 0x44F36EA7
	jne	.LBB256_48
.LBB256_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB256_43
	jmp	.LBB256_41
.LBB256_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB256_45
	jmp	.LBB256_42
.LBB256_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB256_44
	jmp	.LBB256_47
.LBB256_43:                             # %sw.bb
	callq	configError
.LBB256_44:                             # %sw.bb82
	callq	outOfMemory
.LBB256_45:                             # %sw.bb83
	jmp	.LBB256_46
.LBB256_46:                             # %errhandler_io
	callq	ioError
.LBB256_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB256_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB256_39
.Lfunc_end256:
	.size	compressStream.214, .Lfunc_end256-compressStream.214
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.215
	.type	uncompressStream.215,@function
uncompressStream.215:                   # @uncompressStream.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$982354473, -68(%rbp)   # imm = 0x3A8D8A29
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_2
# %bb.1:                                # %if.then
	jmp	.LBB257_66
.LBB257_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_4
# %bb.3:                                # %if.then3
	jmp	.LBB257_66
.LBB257_4:                              # %if.end4
	jmp	.LBB257_5
.LBB257_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB257_9 Depth 2
                                        #     Child Loop BB257_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB257_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB257_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB257_8
.LBB257_7:                              # %if.then9
	jmp	.LBB257_62
.LBB257_8:                              # %if.end10
                                        #   in Loop: Header=BB257_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB257_9:                              # %while.cond11
                                        #   Parent Loop BB257_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB257_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB257_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB257_12
# %bb.11:                               # %if.then19
	jmp	.LBB257_49
.LBB257_12:                             # %if.end20
                                        #   in Loop: Header=BB257_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB257_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB257_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB257_16
.LBB257_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB257_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB257_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB257_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB257_16:                             # %if.end32
                                        #   in Loop: Header=BB257_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_18
# %bb.17:                               # %if.then35
	jmp	.LBB257_66
.LBB257_18:                             # %if.end36
                                        #   in Loop: Header=BB257_9 Depth=2
	jmp	.LBB257_9
.LBB257_19:                             # %while.end
                                        #   in Loop: Header=BB257_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB257_21
# %bb.20:                               # %if.then39
	jmp	.LBB257_62
.LBB257_21:                             # %if.end40
                                        #   in Loop: Header=BB257_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB257_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB257_23:                             # %if.end44
                                        #   in Loop: Header=BB257_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB257_24:                             # %for.cond
                                        #   Parent Loop BB257_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB257_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB257_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB257_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB257_24
.LBB257_27:                             # %for.end
                                        #   in Loop: Header=BB257_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB257_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB257_29:                             # %if.end53
                                        #   in Loop: Header=BB257_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB257_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB257_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB257_32
# %bb.31:                               # %if.then60
	jmp	.LBB257_33
.LBB257_32:                             # %if.end61
                                        #   in Loop: Header=BB257_5 Depth=1
	jmp	.LBB257_5
.LBB257_33:                             # %while.end62
	jmp	.LBB257_34
.LBB257_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_36
# %bb.35:                               # %if.then65
	jmp	.LBB257_66
.LBB257_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB257_38
# %bb.37:                               # %if.then70
	jmp	.LBB257_66
.LBB257_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_40
# %bb.39:                               # %if.then74
	jmp	.LBB257_66
.LBB257_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB257_42
# %bb.41:                               # %if.then79
	jmp	.LBB257_66
.LBB257_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB257_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB257_45
# %bb.44:                               # %if.then87
	jmp	.LBB257_66
.LBB257_45:                             # %if.end88
	jmp	.LBB257_46
.LBB257_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB257_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB257_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB257_80
.LBB257_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB257_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB257_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB257_53
# %bb.52:                               # %if.then100
	jmp	.LBB257_60
.LBB257_53:                             # %if.end101
                                        #   in Loop: Header=BB257_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_55
# %bb.54:                               # %if.then107
	jmp	.LBB257_66
.LBB257_55:                             # %if.end108
                                        #   in Loop: Header=BB257_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB257_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB257_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB257_57:                             # %if.end115
                                        #   in Loop: Header=BB257_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB257_59
# %bb.58:                               # %if.then118
	jmp	.LBB257_66
.LBB257_59:                             # %if.end119
                                        #   in Loop: Header=BB257_51 Depth=1
	jmp	.LBB257_51
.LBB257_60:                             # %while.end120
	jmp	.LBB257_34
.LBB257_61:                             # %if.end121
	jmp	.LBB257_62
.LBB257_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB257_79
# %bb.63:                               # %errhandler
	movq	.LJTI257_0(,%rax,8), %rax
	jmpq	*%rax
.LBB257_64:                             # %sw.bb
	callq	configError
.LBB257_65:                             # %sw.bb122
	jmp	.LBB257_66
.LBB257_66:                             # %errhandler_io
	callq	ioError
.LBB257_67:                             # %sw.bb123
	callq	crcError
.LBB257_68:                             # %sw.bb124
	callq	outOfMemory
.LBB257_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB257_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB257_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB257_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB257_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB257_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB257_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB257_80
.LBB257_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB257_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB257_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB257_80
.LBB257_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB257_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$982354473, -68(%rbp)   # imm = 0x3A8D8A29
	jne	.LBB257_82
.LBB257_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_81
.Lfunc_end257:
	.size	uncompressStream.215, .Lfunc_end257-uncompressStream.215
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI257_0:
	.quad	.LBB257_64
	.quad	.LBB257_79
	.quad	.LBB257_69
	.quad	.LBB257_65
	.quad	.LBB257_70
	.quad	.LBB257_67
	.quad	.LBB257_68
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.216
.LCPI258_0:
	.quad	4636737291354636288     # double 100
.LCPI258_1:
	.quad	4607182418800017408     # double 1
.LCPI258_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.216,@function
compressStream.216:                     # @compressStream.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$986371474, -76(%rbp)   # imm = 0x3ACAD592
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB258_2
# %bb.1:                                # %if.then
	jmp	.LBB258_46
.LBB258_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB258_4
# %bb.3:                                # %if.then3
	jmp	.LBB258_46
.LBB258_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB258_6
# %bb.5:                                # %if.then6
	jmp	.LBB258_40
.LBB258_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB258_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB258_8:                              # %if.end11
	jmp	.LBB258_9
.LBB258_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB258_11
# %bb.10:                               # %if.then14
	jmp	.LBB258_18
.LBB258_11:                             # %if.end15
                                        #   in Loop: Header=BB258_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB258_13
# %bb.12:                               # %if.then19
	jmp	.LBB258_46
.LBB258_13:                             # %if.end20
                                        #   in Loop: Header=BB258_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB258_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB258_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB258_15:                             # %if.end25
                                        #   in Loop: Header=BB258_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB258_17
# %bb.16:                               # %if.then28
	jmp	.LBB258_40
.LBB258_17:                             # %if.end29
                                        #   in Loop: Header=BB258_9 Depth=1
	jmp	.LBB258_9
.LBB258_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB258_20
# %bb.19:                               # %if.then32
	jmp	.LBB258_40
.LBB258_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB258_22
# %bb.21:                               # %if.then36
	jmp	.LBB258_46
.LBB258_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB258_24
# %bb.23:                               # %if.then41
	jmp	.LBB258_46
.LBB258_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB258_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB258_27
# %bb.26:                               # %if.then49
	jmp	.LBB258_46
.LBB258_27:                             # %if.end50
	jmp	.LBB258_28
.LBB258_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB258_30
# %bb.29:                               # %if.then54
	jmp	.LBB258_46
.LBB258_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB258_32
# %bb.31:                               # %if.then59
	jmp	.LBB258_46
.LBB258_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB258_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB258_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB258_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB258_37
.LBB258_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI258_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI258_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI258_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB258_37:                             # %if.end80
	jmp	.LBB258_38
.LBB258_38:                             # %if.end81
	cmpl	$986371474, -76(%rbp)   # imm = 0x3ACAD592
	jne	.LBB258_48
.LBB258_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB258_43
	jmp	.LBB258_41
.LBB258_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB258_45
	jmp	.LBB258_42
.LBB258_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB258_44
	jmp	.LBB258_47
.LBB258_43:                             # %sw.bb
	callq	configError
.LBB258_44:                             # %sw.bb82
	callq	outOfMemory
.LBB258_45:                             # %sw.bb83
	jmp	.LBB258_46
.LBB258_46:                             # %errhandler_io
	callq	ioError
.LBB258_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB258_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB258_39
.Lfunc_end258:
	.size	compressStream.216, .Lfunc_end258-compressStream.216
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.217
	.type	uncompressStream.217,@function
uncompressStream.217:                   # @uncompressStream.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1180658356, -68(%rbp)  # imm = 0x465F6AB4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_2
# %bb.1:                                # %if.then
	jmp	.LBB259_66
.LBB259_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_4
# %bb.3:                                # %if.then3
	jmp	.LBB259_66
.LBB259_4:                              # %if.end4
	jmp	.LBB259_5
.LBB259_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB259_9 Depth 2
                                        #     Child Loop BB259_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB259_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB259_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB259_8
.LBB259_7:                              # %if.then9
	jmp	.LBB259_62
.LBB259_8:                              # %if.end10
                                        #   in Loop: Header=BB259_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB259_9:                              # %while.cond11
                                        #   Parent Loop BB259_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB259_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB259_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB259_12
# %bb.11:                               # %if.then19
	jmp	.LBB259_49
.LBB259_12:                             # %if.end20
                                        #   in Loop: Header=BB259_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB259_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB259_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB259_16
.LBB259_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB259_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB259_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB259_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB259_16:                             # %if.end32
                                        #   in Loop: Header=BB259_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_18
# %bb.17:                               # %if.then35
	jmp	.LBB259_66
.LBB259_18:                             # %if.end36
                                        #   in Loop: Header=BB259_9 Depth=2
	jmp	.LBB259_9
.LBB259_19:                             # %while.end
                                        #   in Loop: Header=BB259_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB259_21
# %bb.20:                               # %if.then39
	jmp	.LBB259_62
.LBB259_21:                             # %if.end40
                                        #   in Loop: Header=BB259_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB259_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB259_23:                             # %if.end44
                                        #   in Loop: Header=BB259_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB259_24:                             # %for.cond
                                        #   Parent Loop BB259_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB259_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB259_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB259_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB259_24
.LBB259_27:                             # %for.end
                                        #   in Loop: Header=BB259_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB259_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB259_29:                             # %if.end53
                                        #   in Loop: Header=BB259_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB259_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB259_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB259_32
# %bb.31:                               # %if.then60
	jmp	.LBB259_33
.LBB259_32:                             # %if.end61
                                        #   in Loop: Header=BB259_5 Depth=1
	jmp	.LBB259_5
.LBB259_33:                             # %while.end62
	jmp	.LBB259_34
.LBB259_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_36
# %bb.35:                               # %if.then65
	jmp	.LBB259_66
.LBB259_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB259_38
# %bb.37:                               # %if.then70
	jmp	.LBB259_66
.LBB259_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_40
# %bb.39:                               # %if.then74
	jmp	.LBB259_66
.LBB259_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB259_42
# %bb.41:                               # %if.then79
	jmp	.LBB259_66
.LBB259_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB259_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB259_45
# %bb.44:                               # %if.then87
	jmp	.LBB259_66
.LBB259_45:                             # %if.end88
	jmp	.LBB259_46
.LBB259_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB259_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB259_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB259_80
.LBB259_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB259_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB259_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB259_53
# %bb.52:                               # %if.then100
	jmp	.LBB259_60
.LBB259_53:                             # %if.end101
                                        #   in Loop: Header=BB259_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_55
# %bb.54:                               # %if.then107
	jmp	.LBB259_66
.LBB259_55:                             # %if.end108
                                        #   in Loop: Header=BB259_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB259_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB259_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB259_57:                             # %if.end115
                                        #   in Loop: Header=BB259_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB259_59
# %bb.58:                               # %if.then118
	jmp	.LBB259_66
.LBB259_59:                             # %if.end119
                                        #   in Loop: Header=BB259_51 Depth=1
	jmp	.LBB259_51
.LBB259_60:                             # %while.end120
	jmp	.LBB259_34
.LBB259_61:                             # %if.end121
	jmp	.LBB259_62
.LBB259_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB259_79
# %bb.63:                               # %errhandler
	movq	.LJTI259_0(,%rax,8), %rax
	jmpq	*%rax
.LBB259_64:                             # %sw.bb
	callq	configError
.LBB259_65:                             # %sw.bb122
	jmp	.LBB259_66
.LBB259_66:                             # %errhandler_io
	callq	ioError
.LBB259_67:                             # %sw.bb123
	callq	crcError
.LBB259_68:                             # %sw.bb124
	callq	outOfMemory
.LBB259_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB259_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB259_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB259_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB259_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB259_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB259_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB259_80
.LBB259_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB259_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB259_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB259_80
.LBB259_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB259_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1180658356, -68(%rbp)  # imm = 0x465F6AB4
	jne	.LBB259_82
.LBB259_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_81
.Lfunc_end259:
	.size	uncompressStream.217, .Lfunc_end259-uncompressStream.217
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI259_0:
	.quad	.LBB259_64
	.quad	.LBB259_79
	.quad	.LBB259_69
	.quad	.LBB259_65
	.quad	.LBB259_70
	.quad	.LBB259_67
	.quad	.LBB259_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function countHardLinks.218
	.type	countHardLinks.218,@function
countHardLinks.218:                     # @countHardLinks.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$529935902, -20(%rbp)   # imm = 0x1F962E1E
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB260_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB260_3
.LBB260_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB260_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$529935902, -20(%rbp)   # imm = 0x1F962E1E
	jne	.LBB260_5
.LBB260_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_4
.Lfunc_end260:
	.size	countHardLinks.218, .Lfunc_end260-countHardLinks.218
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.219
	.type	hasSuffix.219,@function
hasSuffix.219:                          # @hasSuffix.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$136589002, -24(%rbp)   # imm = 0x8242ECA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB261_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB261_5
.LBB261_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB261_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB261_5
.LBB261_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB261_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$136589002, -24(%rbp)   # imm = 0x8242ECA
	jne	.LBB261_7
.LBB261_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_6
.Lfunc_end261:
	.size	hasSuffix.219, .Lfunc_end261-hasSuffix.219
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.220
	.type	uncompressStream.220,@function
uncompressStream.220:                   # @uncompressStream.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$732058053, -68(%rbp)   # imm = 0x2BA251C5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_2
# %bb.1:                                # %if.then
	jmp	.LBB262_66
.LBB262_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_4
# %bb.3:                                # %if.then3
	jmp	.LBB262_66
.LBB262_4:                              # %if.end4
	jmp	.LBB262_5
.LBB262_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB262_9 Depth 2
                                        #     Child Loop BB262_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB262_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB262_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB262_8
.LBB262_7:                              # %if.then9
	jmp	.LBB262_62
.LBB262_8:                              # %if.end10
                                        #   in Loop: Header=BB262_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB262_9:                              # %while.cond11
                                        #   Parent Loop BB262_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB262_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB262_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB262_12
# %bb.11:                               # %if.then19
	jmp	.LBB262_49
.LBB262_12:                             # %if.end20
                                        #   in Loop: Header=BB262_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB262_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB262_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB262_16
.LBB262_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB262_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB262_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB262_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB262_16:                             # %if.end32
                                        #   in Loop: Header=BB262_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_18
# %bb.17:                               # %if.then35
	jmp	.LBB262_66
.LBB262_18:                             # %if.end36
                                        #   in Loop: Header=BB262_9 Depth=2
	jmp	.LBB262_9
.LBB262_19:                             # %while.end
                                        #   in Loop: Header=BB262_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB262_21
# %bb.20:                               # %if.then39
	jmp	.LBB262_62
.LBB262_21:                             # %if.end40
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB262_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB262_23:                             # %if.end44
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB262_24:                             # %for.cond
                                        #   Parent Loop BB262_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB262_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB262_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB262_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB262_24
.LBB262_27:                             # %for.end
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB262_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB262_29:                             # %if.end53
                                        #   in Loop: Header=BB262_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB262_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB262_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB262_32
# %bb.31:                               # %if.then60
	jmp	.LBB262_33
.LBB262_32:                             # %if.end61
                                        #   in Loop: Header=BB262_5 Depth=1
	jmp	.LBB262_5
.LBB262_33:                             # %while.end62
	jmp	.LBB262_34
.LBB262_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_36
# %bb.35:                               # %if.then65
	jmp	.LBB262_66
.LBB262_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB262_38
# %bb.37:                               # %if.then70
	jmp	.LBB262_66
.LBB262_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_40
# %bb.39:                               # %if.then74
	jmp	.LBB262_66
.LBB262_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB262_42
# %bb.41:                               # %if.then79
	jmp	.LBB262_66
.LBB262_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB262_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB262_45
# %bb.44:                               # %if.then87
	jmp	.LBB262_66
.LBB262_45:                             # %if.end88
	jmp	.LBB262_46
.LBB262_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB262_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB262_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB262_80
.LBB262_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB262_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB262_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB262_53
# %bb.52:                               # %if.then100
	jmp	.LBB262_60
.LBB262_53:                             # %if.end101
                                        #   in Loop: Header=BB262_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_55
# %bb.54:                               # %if.then107
	jmp	.LBB262_66
.LBB262_55:                             # %if.end108
                                        #   in Loop: Header=BB262_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB262_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB262_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB262_57:                             # %if.end115
                                        #   in Loop: Header=BB262_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB262_59
# %bb.58:                               # %if.then118
	jmp	.LBB262_66
.LBB262_59:                             # %if.end119
                                        #   in Loop: Header=BB262_51 Depth=1
	jmp	.LBB262_51
.LBB262_60:                             # %while.end120
	jmp	.LBB262_34
.LBB262_61:                             # %if.end121
	jmp	.LBB262_62
.LBB262_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB262_79
# %bb.63:                               # %errhandler
	movq	.LJTI262_0(,%rax,8), %rax
	jmpq	*%rax
.LBB262_64:                             # %sw.bb
	callq	configError
.LBB262_65:                             # %sw.bb122
	jmp	.LBB262_66
.LBB262_66:                             # %errhandler_io
	callq	ioError
.LBB262_67:                             # %sw.bb123
	callq	crcError
.LBB262_68:                             # %sw.bb124
	callq	outOfMemory
.LBB262_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB262_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB262_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB262_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB262_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB262_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB262_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB262_80
.LBB262_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB262_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB262_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB262_80
.LBB262_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB262_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$732058053, -68(%rbp)   # imm = 0x2BA251C5
	jne	.LBB262_82
.LBB262_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_81
.Lfunc_end262:
	.size	uncompressStream.220, .Lfunc_end262-uncompressStream.220
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI262_0:
	.quad	.LBB262_64
	.quad	.LBB262_79
	.quad	.LBB262_69
	.quad	.LBB262_65
	.quad	.LBB262_70
	.quad	.LBB262_67
	.quad	.LBB262_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uncompress.221
	.type	uncompress.221,@function
uncompress.221:                         # @uncompress.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$862640272, -64(%rbp)   # imm = 0x336AD890
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB263_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB263_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB263_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB263_6
	jmp	.LBB263_4
.LBB263_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB263_14
	jmp	.LBB263_5
.LBB263_5:                              # %if.end
	subl	$3, %eax
	je	.LBB263_7
	jmp	.LBB263_15
.LBB263_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB263_15
.LBB263_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB263_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB263_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB263_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB263_11
# %bb.10:                               # %if.then6
	jmp	.LBB263_16
.LBB263_11:                             # %if.end7
                                        #   in Loop: Header=BB263_8 Depth=1
	jmp	.LBB263_12
.LBB263_12:                             # %for.inc
                                        #   in Loop: Header=BB263_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB263_8
.LBB263_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB263_15
.LBB263_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB263_15:                             # %sw.epilog
	jmp	.LBB263_16
.LBB263_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB263_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB263_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB263_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB263_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB263_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB263_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB263_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB263_29
.LBB263_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB263_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_28:                             # %if.end40
	jmp	.LBB263_29
.LBB263_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB263_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB263_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB263_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB263_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB263_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB263_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB263_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB263_38:                             # %if.end61
	jmp	.LBB263_39
.LBB263_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB263_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB263_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB263_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB263_44
.LBB263_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_44:                             # %if.end74
	jmp	.LBB263_45
.LBB263_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB263_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB263_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB263_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB263_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB263_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB263_54
	jmp	.LBB263_52
.LBB263_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB263_57
	jmp	.LBB263_53
.LBB263_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB263_62
	jmp	.LBB263_71
.LBB263_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB263_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_56:                             # %if.end100
	jmp	.LBB263_72
.LBB263_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB263_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB263_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB263_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_61:                             # %if.end114
	jmp	.LBB263_72
.LBB263_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB263_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB263_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB263_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB263_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB263_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB263_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB263_95
.LBB263_70:                             # %if.end141
	jmp	.LBB263_72
.LBB263_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB263_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB263_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB263_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB263_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB263_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB263_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB263_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB263_79:                             # %if.end161
	jmp	.LBB263_80
.LBB263_80:                             # %if.end162
	jmp	.LBB263_81
.LBB263_81:                             # %if.end163
	jmp	.LBB263_87
.LBB263_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB263_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB263_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB263_85:                             # %if.end173
	jmp	.LBB263_86
.LBB263_86:                             # %if.end174
	jmp	.LBB263_87
.LBB263_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB263_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB263_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB263_90:                             # %if.end182
	jmp	.LBB263_95
.LBB263_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB263_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB263_94
.LBB263_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB263_94:                             # %if.end190
	jmp	.LBB263_95
.LBB263_95:                             # %if.end191
	cmpl	$862640272, -64(%rbp)   # imm = 0x336AD890
	jne	.LBB263_97
.LBB263_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_96
.Lfunc_end263:
	.size	uncompress.221, .Lfunc_end263-uncompress.221
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.222
	.type	testf.222,@function
testf.222:                              # @testf.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$622736325, -44(%rbp)   # imm = 0x251E33C5
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB264_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB264_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB264_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB264_6
	jmp	.LBB264_4
.LBB264_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB264_8
	jmp	.LBB264_5
.LBB264_5:                              # %if.end
	subl	$3, %eax
	je	.LBB264_7
	jmp	.LBB264_9
.LBB264_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB264_9
.LBB264_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB264_9
.LBB264_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB264_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB264_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB264_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB264_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB264_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB264_37
.LBB264_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB264_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB264_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB264_37
.LBB264_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB264_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB264_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB264_37
.LBB264_20:                             # %if.end30
	jmp	.LBB264_21
.LBB264_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB264_23
	jmp	.LBB264_22
.LBB264_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB264_26
	jmp	.LBB264_29
.LBB264_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB264_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB264_37
.LBB264_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB264_30
.LBB264_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB264_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB264_37
.LBB264_28:                             # %if.end48
	jmp	.LBB264_30
.LBB264_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB264_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB264_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB264_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB264_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB264_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB264_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB264_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB264_37:                             # %if.end67
	cmpl	$622736325, -44(%rbp)   # imm = 0x251E33C5
	jne	.LBB264_39
.LBB264_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_38
.Lfunc_end264:
	.size	testf.222, .Lfunc_end264-testf.222
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.223
.LCPI265_0:
	.quad	4607182418800017408     # double 1
.LCPI265_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.223,@function
uInt64_to_double.223:                   # @uInt64_to_double.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI265_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$482081030, -28(%rbp)   # imm = 0x1CBBF906
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB265_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB265_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB265_1 Depth=1
	vmovsd	.LCPI265_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB265_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB265_1
.LBB265_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$482081030, -28(%rbp)   # imm = 0x1CBBF906
	jne	.LBB265_6
.LBB265_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB265_5
.Lfunc_end265:
	.size	uInt64_to_double.223, .Lfunc_end265-uInt64_to_double.223
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.224
	.type	snocString.224,@function
snocString.224:                         # @snocString.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1556572972, -44(%rbp)  # imm = 0x5CC76B2C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB266_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB266_6
.LBB266_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB266_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB266_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB266_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB266_3
.LBB266_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB266_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1556572972, -44(%rbp)  # imm = 0x5CC76B2C
	jne	.LBB266_8
.LBB266_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_7
.Lfunc_end266:
	.size	snocString.224, .Lfunc_end266-snocString.224
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.225
	.type	uncompressStream.225,@function
uncompressStream.225:                   # @uncompressStream.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1261114923, -68(%rbp)  # imm = 0x4B2B162B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_2
# %bb.1:                                # %if.then
	jmp	.LBB267_66
.LBB267_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_4
# %bb.3:                                # %if.then3
	jmp	.LBB267_66
.LBB267_4:                              # %if.end4
	jmp	.LBB267_5
.LBB267_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_9 Depth 2
                                        #     Child Loop BB267_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB267_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB267_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB267_8
.LBB267_7:                              # %if.then9
	jmp	.LBB267_62
.LBB267_8:                              # %if.end10
                                        #   in Loop: Header=BB267_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB267_9:                              # %while.cond11
                                        #   Parent Loop BB267_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB267_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB267_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB267_12
# %bb.11:                               # %if.then19
	jmp	.LBB267_49
.LBB267_12:                             # %if.end20
                                        #   in Loop: Header=BB267_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB267_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB267_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB267_16
.LBB267_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB267_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB267_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB267_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB267_16:                             # %if.end32
                                        #   in Loop: Header=BB267_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_18
# %bb.17:                               # %if.then35
	jmp	.LBB267_66
.LBB267_18:                             # %if.end36
                                        #   in Loop: Header=BB267_9 Depth=2
	jmp	.LBB267_9
.LBB267_19:                             # %while.end
                                        #   in Loop: Header=BB267_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB267_21
# %bb.20:                               # %if.then39
	jmp	.LBB267_62
.LBB267_21:                             # %if.end40
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB267_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB267_23:                             # %if.end44
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB267_24:                             # %for.cond
                                        #   Parent Loop BB267_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB267_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB267_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB267_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB267_24
.LBB267_27:                             # %for.end
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB267_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB267_29:                             # %if.end53
                                        #   in Loop: Header=BB267_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB267_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB267_32
# %bb.31:                               # %if.then60
	jmp	.LBB267_33
.LBB267_32:                             # %if.end61
                                        #   in Loop: Header=BB267_5 Depth=1
	jmp	.LBB267_5
.LBB267_33:                             # %while.end62
	jmp	.LBB267_34
.LBB267_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_36
# %bb.35:                               # %if.then65
	jmp	.LBB267_66
.LBB267_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB267_38
# %bb.37:                               # %if.then70
	jmp	.LBB267_66
.LBB267_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_40
# %bb.39:                               # %if.then74
	jmp	.LBB267_66
.LBB267_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB267_42
# %bb.41:                               # %if.then79
	jmp	.LBB267_66
.LBB267_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB267_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB267_45
# %bb.44:                               # %if.then87
	jmp	.LBB267_66
.LBB267_45:                             # %if.end88
	jmp	.LBB267_46
.LBB267_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB267_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB267_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB267_80
.LBB267_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB267_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB267_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB267_53
# %bb.52:                               # %if.then100
	jmp	.LBB267_60
.LBB267_53:                             # %if.end101
                                        #   in Loop: Header=BB267_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_55
# %bb.54:                               # %if.then107
	jmp	.LBB267_66
.LBB267_55:                             # %if.end108
                                        #   in Loop: Header=BB267_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB267_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB267_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB267_57:                             # %if.end115
                                        #   in Loop: Header=BB267_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB267_59
# %bb.58:                               # %if.then118
	jmp	.LBB267_66
.LBB267_59:                             # %if.end119
                                        #   in Loop: Header=BB267_51 Depth=1
	jmp	.LBB267_51
.LBB267_60:                             # %while.end120
	jmp	.LBB267_34
.LBB267_61:                             # %if.end121
	jmp	.LBB267_62
.LBB267_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB267_79
# %bb.63:                               # %errhandler
	movq	.LJTI267_0(,%rax,8), %rax
	jmpq	*%rax
.LBB267_64:                             # %sw.bb
	callq	configError
.LBB267_65:                             # %sw.bb122
	jmp	.LBB267_66
.LBB267_66:                             # %errhandler_io
	callq	ioError
.LBB267_67:                             # %sw.bb123
	callq	crcError
.LBB267_68:                             # %sw.bb124
	callq	outOfMemory
.LBB267_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB267_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB267_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB267_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB267_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB267_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB267_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB267_80
.LBB267_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB267_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB267_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB267_80
.LBB267_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB267_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1261114923, -68(%rbp)  # imm = 0x4B2B162B
	jne	.LBB267_82
.LBB267_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_81
.Lfunc_end267:
	.size	uncompressStream.225, .Lfunc_end267-uncompressStream.225
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI267_0:
	.quad	.LBB267_64
	.quad	.LBB267_79
	.quad	.LBB267_69
	.quad	.LBB267_65
	.quad	.LBB267_70
	.quad	.LBB267_67
	.quad	.LBB267_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.226
	.type	mapSuffix.226,@function
mapSuffix.226:                          # @mapSuffix.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1664179824, -36(%rbp)  # imm = 0x63315E70
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB268_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB268_3
.LBB268_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB268_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1664179824, -36(%rbp)  # imm = 0x63315E70
	jne	.LBB268_5
.LBB268_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_4
.Lfunc_end268:
	.size	mapSuffix.226, .Lfunc_end268-mapSuffix.226
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.227 # -- Begin function fopen_output_safely.227
	.p2align	4, 0x90
	.type	fopen_output_safely.227,@function
fopen_output_safely.227:                # @fopen_output_safely.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1704014980, -16(%rbp)  # imm = 0x65913484
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB269_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB269_5
.LBB269_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB269_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB269_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB269_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1704014980, -16(%rbp)  # imm = 0x65913484
	jne	.LBB269_7
.LBB269_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_6
.Lfunc_end269:
	.size	fopen_output_safely.227, .Lfunc_end269-fopen_output_safely.227
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.228
	.type	mapSuffix.228,@function
mapSuffix.228:                          # @mapSuffix.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$843439771, -36(%rbp)   # imm = 0x3245DE9B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB270_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB270_3
.LBB270_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB270_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$843439771, -36(%rbp)   # imm = 0x3245DE9B
	jne	.LBB270_5
.LBB270_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_4
.Lfunc_end270:
	.size	mapSuffix.228, .Lfunc_end270-mapSuffix.228
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.229
	.type	uncompress.229,@function
uncompress.229:                         # @uncompress.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$487486223, -68(%rbp)   # imm = 0x1D0E730F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB271_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB271_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB271_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB271_6
	jmp	.LBB271_4
.LBB271_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB271_14
	jmp	.LBB271_5
.LBB271_5:                              # %if.end
	subl	$3, %eax
	je	.LBB271_7
	jmp	.LBB271_15
.LBB271_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB271_15
.LBB271_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB271_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB271_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB271_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB271_11
# %bb.10:                               # %if.then6
	jmp	.LBB271_16
.LBB271_11:                             # %if.end7
                                        #   in Loop: Header=BB271_8 Depth=1
	jmp	.LBB271_12
.LBB271_12:                             # %for.inc
                                        #   in Loop: Header=BB271_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB271_8
.LBB271_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB271_15
.LBB271_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB271_15:                             # %sw.epilog
	jmp	.LBB271_16
.LBB271_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB271_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB271_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB271_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB271_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB271_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB271_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB271_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB271_29
.LBB271_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB271_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_28:                             # %if.end40
	jmp	.LBB271_29
.LBB271_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB271_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB271_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB271_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB271_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB271_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB271_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB271_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB271_38:                             # %if.end61
	jmp	.LBB271_39
.LBB271_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB271_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB271_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB271_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB271_44
.LBB271_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_44:                             # %if.end74
	jmp	.LBB271_45
.LBB271_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB271_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB271_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB271_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB271_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB271_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB271_54
	jmp	.LBB271_52
.LBB271_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB271_57
	jmp	.LBB271_53
.LBB271_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB271_62
	jmp	.LBB271_71
.LBB271_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB271_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_56:                             # %if.end100
	jmp	.LBB271_72
.LBB271_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB271_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB271_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB271_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_61:                             # %if.end114
	jmp	.LBB271_72
.LBB271_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB271_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB271_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB271_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB271_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB271_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB271_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB271_95
.LBB271_70:                             # %if.end141
	jmp	.LBB271_72
.LBB271_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB271_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB271_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB271_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB271_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB271_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB271_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB271_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB271_79:                             # %if.end161
	jmp	.LBB271_80
.LBB271_80:                             # %if.end162
	jmp	.LBB271_81
.LBB271_81:                             # %if.end163
	jmp	.LBB271_87
.LBB271_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB271_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB271_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB271_85:                             # %if.end173
	jmp	.LBB271_86
.LBB271_86:                             # %if.end174
	jmp	.LBB271_87
.LBB271_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB271_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB271_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB271_90:                             # %if.end182
	jmp	.LBB271_95
.LBB271_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB271_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB271_94
.LBB271_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB271_94:                             # %if.end190
	jmp	.LBB271_95
.LBB271_95:                             # %if.end191
	cmpl	$487486223, -68(%rbp)   # imm = 0x1D0E730F
	jne	.LBB271_97
.LBB271_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_96
.Lfunc_end271:
	.size	uncompress.229, .Lfunc_end271-uncompress.229
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.230
	.type	uInt64_toAscii.230,@function
uInt64_toAscii.230:                     # @uInt64_toAscii.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1233103393, -16(%rbp)  # imm = 0x497FAA21
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB272_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB272_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB272_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB272_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB272_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB272_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB272_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB272_4
.LBB272_7:                              # %for.end
	cmpl	$1233103393, -16(%rbp)  # imm = 0x497FAA21
	jne	.LBB272_9
.LBB272_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_8
.Lfunc_end272:
	.size	uInt64_toAscii.230, .Lfunc_end272-uInt64_toAscii.230
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.231
	.type	addFlagsFromEnvVar.231,@function
addFlagsFromEnvVar.231:                 # @addFlagsFromEnvVar.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2085960826, -24(%rbp)  # imm = 0x7C553C7A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB273_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB273_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB273_5 Depth 2
                                        #     Child Loop BB273_8 Depth 2
                                        #     Child Loop BB273_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB273_4
# %bb.3:                                # %if.then3
	jmp	.LBB273_21
.LBB273_4:                              # %if.end
                                        #   in Loop: Header=BB273_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB273_5:                              # %while.cond4
                                        #   Parent Loop BB273_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB273_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB273_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB273_5
.LBB273_7:                              # %while.end
                                        #   in Loop: Header=BB273_2 Depth=1
	jmp	.LBB273_8
.LBB273_8:                              # %while.cond12
                                        #   Parent Loop BB273_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB273_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB273_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB273_10:                             # %land.end
                                        #   in Loop: Header=BB273_8 Depth=2
	testb	$1, %al
	jne	.LBB273_11
	jmp	.LBB273_12
.LBB273_11:                             # %while.body27
                                        #   in Loop: Header=BB273_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB273_8
.LBB273_12:                             # %while.end28
                                        #   in Loop: Header=BB273_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB273_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB273_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB273_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB273_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB273_15:                             # %if.end35
                                        #   in Loop: Header=BB273_2 Depth=1
	movl	$0, -8(%rbp)
.LBB273_16:                             # %for.cond
                                        #   Parent Loop BB273_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB273_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB273_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB273_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB273_16
.LBB273_19:                             # %for.end
                                        #   in Loop: Header=BB273_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB273_20:                             # %if.end46
                                        #   in Loop: Header=BB273_2 Depth=1
	jmp	.LBB273_2
.LBB273_21:                             # %while.end47
	jmp	.LBB273_22
.LBB273_22:                             # %if.end48
	cmpl	$2085960826, -24(%rbp)  # imm = 0x7C553C7A
	jne	.LBB273_24
.LBB273_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_23
.Lfunc_end273:
	.size	addFlagsFromEnvVar.231, .Lfunc_end273-addFlagsFromEnvVar.231
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.232
	.type	notAStandardFile.232,@function
notAStandardFile.232:                   # @notAStandardFile.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$2017200764, -16(%rbp)  # imm = 0x783C0A7C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB274_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB274_5
.LBB274_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB274_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB274_5
.LBB274_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB274_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2017200764, -16(%rbp)  # imm = 0x783C0A7C
	jne	.LBB274_7
.LBB274_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_6
.Lfunc_end274:
	.size	notAStandardFile.232, .Lfunc_end274-notAStandardFile.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.233
	.type	uncompressStream.233,@function
uncompressStream.233:                   # @uncompressStream.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1560961744, -68(%rbp)  # imm = 0x5D0A62D0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_2
# %bb.1:                                # %if.then
	jmp	.LBB275_66
.LBB275_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_4
# %bb.3:                                # %if.then3
	jmp	.LBB275_66
.LBB275_4:                              # %if.end4
	jmp	.LBB275_5
.LBB275_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_9 Depth 2
                                        #     Child Loop BB275_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB275_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB275_8
.LBB275_7:                              # %if.then9
	jmp	.LBB275_62
.LBB275_8:                              # %if.end10
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB275_9:                              # %while.cond11
                                        #   Parent Loop BB275_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB275_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB275_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB275_12
# %bb.11:                               # %if.then19
	jmp	.LBB275_49
.LBB275_12:                             # %if.end20
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB275_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB275_16
.LBB275_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB275_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB275_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB275_16:                             # %if.end32
                                        #   in Loop: Header=BB275_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_18
# %bb.17:                               # %if.then35
	jmp	.LBB275_66
.LBB275_18:                             # %if.end36
                                        #   in Loop: Header=BB275_9 Depth=2
	jmp	.LBB275_9
.LBB275_19:                             # %while.end
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB275_21
# %bb.20:                               # %if.then39
	jmp	.LBB275_62
.LBB275_21:                             # %if.end40
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB275_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB275_23:                             # %if.end44
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB275_24:                             # %for.cond
                                        #   Parent Loop BB275_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB275_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB275_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB275_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB275_24
.LBB275_27:                             # %for.end
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB275_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB275_29:                             # %if.end53
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB275_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB275_32
# %bb.31:                               # %if.then60
	jmp	.LBB275_33
.LBB275_32:                             # %if.end61
                                        #   in Loop: Header=BB275_5 Depth=1
	jmp	.LBB275_5
.LBB275_33:                             # %while.end62
	jmp	.LBB275_34
.LBB275_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_36
# %bb.35:                               # %if.then65
	jmp	.LBB275_66
.LBB275_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB275_38
# %bb.37:                               # %if.then70
	jmp	.LBB275_66
.LBB275_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_40
# %bb.39:                               # %if.then74
	jmp	.LBB275_66
.LBB275_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB275_42
# %bb.41:                               # %if.then79
	jmp	.LBB275_66
.LBB275_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB275_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB275_45
# %bb.44:                               # %if.then87
	jmp	.LBB275_66
.LBB275_45:                             # %if.end88
	jmp	.LBB275_46
.LBB275_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB275_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB275_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB275_80
.LBB275_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB275_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB275_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB275_53
# %bb.52:                               # %if.then100
	jmp	.LBB275_60
.LBB275_53:                             # %if.end101
                                        #   in Loop: Header=BB275_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_55
# %bb.54:                               # %if.then107
	jmp	.LBB275_66
.LBB275_55:                             # %if.end108
                                        #   in Loop: Header=BB275_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB275_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB275_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB275_57:                             # %if.end115
                                        #   in Loop: Header=BB275_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_59
# %bb.58:                               # %if.then118
	jmp	.LBB275_66
.LBB275_59:                             # %if.end119
                                        #   in Loop: Header=BB275_51 Depth=1
	jmp	.LBB275_51
.LBB275_60:                             # %while.end120
	jmp	.LBB275_34
.LBB275_61:                             # %if.end121
	jmp	.LBB275_62
.LBB275_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB275_79
# %bb.63:                               # %errhandler
	movq	.LJTI275_0(,%rax,8), %rax
	jmpq	*%rax
.LBB275_64:                             # %sw.bb
	callq	configError
.LBB275_65:                             # %sw.bb122
	jmp	.LBB275_66
.LBB275_66:                             # %errhandler_io
	callq	ioError
.LBB275_67:                             # %sw.bb123
	callq	crcError
.LBB275_68:                             # %sw.bb124
	callq	outOfMemory
.LBB275_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB275_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB275_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB275_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB275_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB275_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB275_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB275_80
.LBB275_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB275_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB275_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB275_80
.LBB275_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB275_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1560961744, -68(%rbp)  # imm = 0x5D0A62D0
	jne	.LBB275_82
.LBB275_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_81
.Lfunc_end275:
	.size	uncompressStream.233, .Lfunc_end275-uncompressStream.233
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI275_0:
	.quad	.LBB275_64
	.quad	.LBB275_79
	.quad	.LBB275_69
	.quad	.LBB275_65
	.quad	.LBB275_70
	.quad	.LBB275_67
	.quad	.LBB275_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.234
	.type	mapSuffix.234,@function
mapSuffix.234:                          # @mapSuffix.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$628292639, -36(%rbp)   # imm = 0x2572FC1F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB276_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB276_3
.LBB276_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB276_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$628292639, -36(%rbp)   # imm = 0x2572FC1F
	jne	.LBB276_5
.LBB276_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_4
.Lfunc_end276:
	.size	mapSuffix.234, .Lfunc_end276-mapSuffix.234
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.235
.LCPI277_0:
	.quad	4607182418800017408     # double 1
.LCPI277_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.235,@function
uInt64_to_double.235:                   # @uInt64_to_double.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI277_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$433812652, -28(%rbp)   # imm = 0x19DB74AC
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB277_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB277_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB277_1 Depth=1
	vmovsd	.LCPI277_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB277_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_1
.LBB277_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$433812652, -28(%rbp)   # imm = 0x19DB74AC
	jne	.LBB277_6
.LBB277_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB277_5
.Lfunc_end277:
	.size	uInt64_to_double.235, .Lfunc_end277-uInt64_to_double.235
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.236
	.type	compress.236,@function
compress.236:                           # @compress.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1398161047, -60(%rbp)  # imm = 0x53563E97
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB278_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB278_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB278_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB278_6
	jmp	.LBB278_4
.LBB278_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB278_8
	jmp	.LBB278_5
.LBB278_5:                              # %if.end
	subl	$3, %eax
	je	.LBB278_7
	jmp	.LBB278_9
.LBB278_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB278_9
.LBB278_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB278_9
.LBB278_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB278_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB278_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB278_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB278_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB278_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB278_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB278_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB278_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB278_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB278_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB278_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB278_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB278_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_23:                             # %if.end34
                                        #   in Loop: Header=BB278_18 Depth=1
	jmp	.LBB278_24
.LBB278_24:                             # %for.inc
                                        #   in Loop: Header=BB278_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB278_18
.LBB278_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB278_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB278_30
.LBB278_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB278_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_29:                             # %if.end45
	jmp	.LBB278_30
.LBB278_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB278_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB278_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB278_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB278_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB278_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB278_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB278_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB278_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB278_41
.LBB278_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_41:                             # %if.end72
	jmp	.LBB278_42
.LBB278_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB278_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB278_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB278_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB278_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB278_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB278_51
	jmp	.LBB278_49
.LBB278_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB278_54
	jmp	.LBB278_50
.LBB278_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB278_61
	jmp	.LBB278_70
.LBB278_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB278_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_53:                             # %if.end98
	jmp	.LBB278_71
.LBB278_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB278_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB278_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB278_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB278_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_60:                             # %if.end119
	jmp	.LBB278_71
.LBB278_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB278_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB278_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB278_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB278_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB278_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB278_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB278_80
.LBB278_69:                             # %if.end146
	jmp	.LBB278_71
.LBB278_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB278_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB278_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB278_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB278_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB278_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB278_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB278_77:                             # %if.end163
	jmp	.LBB278_78
.LBB278_78:                             # %if.end164
	jmp	.LBB278_79
.LBB278_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB278_80:                             # %return
	cmpl	$1398161047, -60(%rbp)  # imm = 0x53563E97
	jne	.LBB278_82
.LBB278_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_81
.Lfunc_end278:
	.size	compress.236, .Lfunc_end278-compress.236
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.237
	.type	uncompressStream.237,@function
uncompressStream.237:                   # @uncompressStream.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1146218017, -68(%rbp)  # imm = 0x4451E621
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_2
# %bb.1:                                # %if.then
	jmp	.LBB279_66
.LBB279_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_4
# %bb.3:                                # %if.then3
	jmp	.LBB279_66
.LBB279_4:                              # %if.end4
	jmp	.LBB279_5
.LBB279_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB279_9 Depth 2
                                        #     Child Loop BB279_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB279_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB279_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB279_8
.LBB279_7:                              # %if.then9
	jmp	.LBB279_62
.LBB279_8:                              # %if.end10
                                        #   in Loop: Header=BB279_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB279_9:                              # %while.cond11
                                        #   Parent Loop BB279_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB279_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB279_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB279_12
# %bb.11:                               # %if.then19
	jmp	.LBB279_49
.LBB279_12:                             # %if.end20
                                        #   in Loop: Header=BB279_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB279_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB279_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB279_16
.LBB279_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB279_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB279_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB279_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB279_16:                             # %if.end32
                                        #   in Loop: Header=BB279_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_18
# %bb.17:                               # %if.then35
	jmp	.LBB279_66
.LBB279_18:                             # %if.end36
                                        #   in Loop: Header=BB279_9 Depth=2
	jmp	.LBB279_9
.LBB279_19:                             # %while.end
                                        #   in Loop: Header=BB279_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB279_21
# %bb.20:                               # %if.then39
	jmp	.LBB279_62
.LBB279_21:                             # %if.end40
                                        #   in Loop: Header=BB279_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB279_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB279_23:                             # %if.end44
                                        #   in Loop: Header=BB279_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -40(%rbp)
.LBB279_24:                             # %for.cond
                                        #   Parent Loop BB279_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB279_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB279_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB279_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB279_24
.LBB279_27:                             # %for.end
                                        #   in Loop: Header=BB279_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB279_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB279_29:                             # %if.end53
                                        #   in Loop: Header=BB279_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB279_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB279_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB279_32
# %bb.31:                               # %if.then60
	jmp	.LBB279_33
.LBB279_32:                             # %if.end61
                                        #   in Loop: Header=BB279_5 Depth=1
	jmp	.LBB279_5
.LBB279_33:                             # %while.end62
	jmp	.LBB279_34
.LBB279_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_36
# %bb.35:                               # %if.then65
	jmp	.LBB279_66
.LBB279_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB279_38
# %bb.37:                               # %if.then70
	jmp	.LBB279_66
.LBB279_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_40
# %bb.39:                               # %if.then74
	jmp	.LBB279_66
.LBB279_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB279_42
# %bb.41:                               # %if.then79
	jmp	.LBB279_66
.LBB279_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB279_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB279_45
# %bb.44:                               # %if.then87
	jmp	.LBB279_66
.LBB279_45:                             # %if.end88
	jmp	.LBB279_46
.LBB279_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB279_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB279_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB279_80
.LBB279_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB279_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB279_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB279_53
# %bb.52:                               # %if.then100
	jmp	.LBB279_60
.LBB279_53:                             # %if.end101
                                        #   in Loop: Header=BB279_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_55
# %bb.54:                               # %if.then107
	jmp	.LBB279_66
.LBB279_55:                             # %if.end108
                                        #   in Loop: Header=BB279_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB279_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB279_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB279_57:                             # %if.end115
                                        #   in Loop: Header=BB279_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB279_59
# %bb.58:                               # %if.then118
	jmp	.LBB279_66
.LBB279_59:                             # %if.end119
                                        #   in Loop: Header=BB279_51 Depth=1
	jmp	.LBB279_51
.LBB279_60:                             # %while.end120
	jmp	.LBB279_34
.LBB279_61:                             # %if.end121
	jmp	.LBB279_62
.LBB279_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB279_79
# %bb.63:                               # %errhandler
	movq	.LJTI279_0(,%rax,8), %rax
	jmpq	*%rax
.LBB279_64:                             # %sw.bb
	callq	configError
.LBB279_65:                             # %sw.bb122
	jmp	.LBB279_66
.LBB279_66:                             # %errhandler_io
	callq	ioError
.LBB279_67:                             # %sw.bb123
	callq	crcError
.LBB279_68:                             # %sw.bb124
	callq	outOfMemory
.LBB279_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB279_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB279_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB279_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB279_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB279_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB279_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB279_80
.LBB279_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB279_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB279_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB279_80
.LBB279_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB279_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1146218017, -68(%rbp)  # imm = 0x4451E621
	jne	.LBB279_82
.LBB279_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_81
.Lfunc_end279:
	.size	uncompressStream.237, .Lfunc_end279-uncompressStream.237
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI279_0:
	.quad	.LBB279_64
	.quad	.LBB279_79
	.quad	.LBB279_69
	.quad	.LBB279_65
	.quad	.LBB279_70
	.quad	.LBB279_67
	.quad	.LBB279_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.238
	.type	mapSuffix.238,@function
mapSuffix.238:                          # @mapSuffix.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2991595, -36(%rbp)     # imm = 0x2DA5EB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB280_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB280_3
.LBB280_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB280_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$2991595, -36(%rbp)     # imm = 0x2DA5EB
	jne	.LBB280_5
.LBB280_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_4
.Lfunc_end280:
	.size	mapSuffix.238, .Lfunc_end280-mapSuffix.238
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.239
.LCPI281_0:
	.quad	4636737291354636288     # double 100
.LCPI281_1:
	.quad	4607182418800017408     # double 1
.LCPI281_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.239,@function
compressStream.239:                     # @compressStream.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1300526313, -76(%rbp)  # imm = 0x4D8474E9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_2
# %bb.1:                                # %if.then
	jmp	.LBB281_46
.LBB281_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_4
# %bb.3:                                # %if.then3
	jmp	.LBB281_46
.LBB281_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB281_6
# %bb.5:                                # %if.then6
	jmp	.LBB281_40
.LBB281_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB281_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB281_8:                              # %if.end11
	jmp	.LBB281_9
.LBB281_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB281_11
# %bb.10:                               # %if.then14
	jmp	.LBB281_18
.LBB281_11:                             # %if.end15
                                        #   in Loop: Header=BB281_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_13
# %bb.12:                               # %if.then19
	jmp	.LBB281_46
.LBB281_13:                             # %if.end20
                                        #   in Loop: Header=BB281_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB281_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB281_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB281_15:                             # %if.end25
                                        #   in Loop: Header=BB281_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB281_17
# %bb.16:                               # %if.then28
	jmp	.LBB281_40
.LBB281_17:                             # %if.end29
                                        #   in Loop: Header=BB281_9 Depth=1
	jmp	.LBB281_9
.LBB281_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB281_20
# %bb.19:                               # %if.then32
	jmp	.LBB281_40
.LBB281_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_22
# %bb.21:                               # %if.then36
	jmp	.LBB281_46
.LBB281_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_24
# %bb.23:                               # %if.then41
	jmp	.LBB281_46
.LBB281_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB281_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_27
# %bb.26:                               # %if.then49
	jmp	.LBB281_46
.LBB281_27:                             # %if.end50
	jmp	.LBB281_28
.LBB281_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_30
# %bb.29:                               # %if.then54
	jmp	.LBB281_46
.LBB281_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_32
# %bb.31:                               # %if.then59
	jmp	.LBB281_46
.LBB281_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB281_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB281_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB281_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB281_37
.LBB281_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI281_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI281_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI281_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB281_37:                             # %if.end80
	jmp	.LBB281_38
.LBB281_38:                             # %if.end81
	cmpl	$1300526313, -76(%rbp)  # imm = 0x4D8474E9
	jne	.LBB281_48
.LBB281_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB281_43
	jmp	.LBB281_41
.LBB281_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB281_45
	jmp	.LBB281_42
.LBB281_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB281_44
	jmp	.LBB281_47
.LBB281_43:                             # %sw.bb
	callq	configError
.LBB281_44:                             # %sw.bb82
	callq	outOfMemory
.LBB281_45:                             # %sw.bb83
	jmp	.LBB281_46
.LBB281_46:                             # %errhandler_io
	callq	ioError
.LBB281_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB281_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB281_39
.Lfunc_end281:
	.size	compressStream.239, .Lfunc_end281-compressStream.239
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.240
.LCPI282_0:
	.quad	4636737291354636288     # double 100
.LCPI282_1:
	.quad	4607182418800017408     # double 1
.LCPI282_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.240,@function
compressStream.240:                     # @compressStream.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$405150078, -76(%rbp)   # imm = 0x1826197E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB282_2
# %bb.1:                                # %if.then
	jmp	.LBB282_46
.LBB282_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB282_4
# %bb.3:                                # %if.then3
	jmp	.LBB282_46
.LBB282_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB282_6
# %bb.5:                                # %if.then6
	jmp	.LBB282_40
.LBB282_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB282_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB282_8:                              # %if.end11
	jmp	.LBB282_9
.LBB282_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB282_11
# %bb.10:                               # %if.then14
	jmp	.LBB282_18
.LBB282_11:                             # %if.end15
                                        #   in Loop: Header=BB282_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB282_13
# %bb.12:                               # %if.then19
	jmp	.LBB282_46
.LBB282_13:                             # %if.end20
                                        #   in Loop: Header=BB282_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB282_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB282_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB282_15:                             # %if.end25
                                        #   in Loop: Header=BB282_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB282_17
# %bb.16:                               # %if.then28
	jmp	.LBB282_40
.LBB282_17:                             # %if.end29
                                        #   in Loop: Header=BB282_9 Depth=1
	jmp	.LBB282_9
.LBB282_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB282_20
# %bb.19:                               # %if.then32
	jmp	.LBB282_40
.LBB282_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB282_22
# %bb.21:                               # %if.then36
	jmp	.LBB282_46
.LBB282_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB282_24
# %bb.23:                               # %if.then41
	jmp	.LBB282_46
.LBB282_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB282_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB282_27
# %bb.26:                               # %if.then49
	jmp	.LBB282_46
.LBB282_27:                             # %if.end50
	jmp	.LBB282_28
.LBB282_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB282_30
# %bb.29:                               # %if.then54
	jmp	.LBB282_46
.LBB282_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB282_32
# %bb.31:                               # %if.then59
	jmp	.LBB282_46
.LBB282_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB282_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB282_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB282_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB282_37
.LBB282_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI282_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI282_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI282_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB282_37:                             # %if.end80
	jmp	.LBB282_38
.LBB282_38:                             # %if.end81
	cmpl	$405150078, -76(%rbp)   # imm = 0x1826197E
	jne	.LBB282_48
.LBB282_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB282_43
	jmp	.LBB282_41
.LBB282_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB282_45
	jmp	.LBB282_42
.LBB282_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB282_44
	jmp	.LBB282_47
.LBB282_43:                             # %sw.bb
	callq	configError
.LBB282_44:                             # %sw.bb82
	callq	outOfMemory
.LBB282_45:                             # %sw.bb83
	jmp	.LBB282_46
.LBB282_46:                             # %errhandler_io
	callq	ioError
.LBB282_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB282_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB282_39
.Lfunc_end282:
	.size	compressStream.240, .Lfunc_end282-compressStream.240
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.241
	.type	testf.241,@function
testf.241:                              # @testf.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$455126746, -44(%rbp)   # imm = 0x1B20AEDA
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB283_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB283_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB283_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB283_6
	jmp	.LBB283_4
.LBB283_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB283_8
	jmp	.LBB283_5
.LBB283_5:                              # %if.end
	subl	$3, %eax
	je	.LBB283_7
	jmp	.LBB283_9
.LBB283_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB283_9
.LBB283_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB283_9
.LBB283_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB283_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB283_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB283_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB283_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB283_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB283_37
.LBB283_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB283_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB283_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB283_37
.LBB283_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB283_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB283_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB283_37
.LBB283_20:                             # %if.end30
	jmp	.LBB283_21
.LBB283_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB283_23
	jmp	.LBB283_22
.LBB283_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB283_26
	jmp	.LBB283_29
.LBB283_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB283_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB283_37
.LBB283_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB283_30
.LBB283_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB283_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB283_37
.LBB283_28:                             # %if.end48
	jmp	.LBB283_30
.LBB283_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB283_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB283_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB283_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB283_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB283_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB283_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB283_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB283_37:                             # %if.end67
	cmpl	$455126746, -44(%rbp)   # imm = 0x1B20AEDA
	jne	.LBB283_39
.LBB283_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_38
.Lfunc_end283:
	.size	testf.241, .Lfunc_end283-testf.241
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.242
	.type	uncompress.242,@function
uncompress.242:                         # @uncompress.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$226091712, -60(%rbp)   # imm = 0xD79E2C0
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB284_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB284_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB284_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB284_6
	jmp	.LBB284_4
.LBB284_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB284_14
	jmp	.LBB284_5
.LBB284_5:                              # %if.end
	subl	$3, %eax
	je	.LBB284_7
	jmp	.LBB284_15
.LBB284_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB284_15
.LBB284_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB284_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB284_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB284_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB284_11
# %bb.10:                               # %if.then6
	jmp	.LBB284_16
.LBB284_11:                             # %if.end7
                                        #   in Loop: Header=BB284_8 Depth=1
	jmp	.LBB284_12
.LBB284_12:                             # %for.inc
                                        #   in Loop: Header=BB284_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB284_8
.LBB284_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB284_15
.LBB284_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB284_15:                             # %sw.epilog
	jmp	.LBB284_16
.LBB284_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB284_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB284_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB284_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB284_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB284_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB284_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB284_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB284_29
.LBB284_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB284_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_28:                             # %if.end40
	jmp	.LBB284_29
.LBB284_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB284_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB284_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB284_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB284_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB284_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB284_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB284_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB284_38:                             # %if.end61
	jmp	.LBB284_39
.LBB284_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB284_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB284_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB284_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB284_44
.LBB284_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_44:                             # %if.end74
	jmp	.LBB284_45
.LBB284_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB284_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB284_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB284_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB284_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB284_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB284_54
	jmp	.LBB284_52
.LBB284_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB284_57
	jmp	.LBB284_53
.LBB284_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB284_62
	jmp	.LBB284_71
.LBB284_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB284_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_56:                             # %if.end100
	jmp	.LBB284_72
.LBB284_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB284_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB284_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB284_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_61:                             # %if.end114
	jmp	.LBB284_72
.LBB284_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB284_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB284_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB284_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB284_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB284_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB284_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB284_95
.LBB284_70:                             # %if.end141
	jmp	.LBB284_72
.LBB284_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB284_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB284_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB284_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB284_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB284_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB284_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB284_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB284_79:                             # %if.end161
	jmp	.LBB284_80
.LBB284_80:                             # %if.end162
	jmp	.LBB284_81
.LBB284_81:                             # %if.end163
	jmp	.LBB284_87
.LBB284_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB284_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB284_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB284_85:                             # %if.end173
	jmp	.LBB284_86
.LBB284_86:                             # %if.end174
	jmp	.LBB284_87
.LBB284_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB284_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB284_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB284_90:                             # %if.end182
	jmp	.LBB284_95
.LBB284_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB284_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB284_94
.LBB284_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB284_94:                             # %if.end190
	jmp	.LBB284_95
.LBB284_95:                             # %if.end191
	cmpl	$226091712, -60(%rbp)   # imm = 0xD79E2C0
	jne	.LBB284_97
.LBB284_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_96
.Lfunc_end284:
	.size	uncompress.242, .Lfunc_end284-uncompress.242
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.243
	.type	testf.243,@function
testf.243:                              # @testf.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$96725970, -44(%rbp)    # imm = 0x5C3EBD2
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB285_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB285_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB285_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB285_6
	jmp	.LBB285_4
.LBB285_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB285_8
	jmp	.LBB285_5
.LBB285_5:                              # %if.end
	subl	$3, %eax
	je	.LBB285_7
	jmp	.LBB285_9
.LBB285_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB285_9
.LBB285_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB285_9
.LBB285_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB285_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB285_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB285_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB285_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB285_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB285_37
.LBB285_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB285_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB285_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB285_37
.LBB285_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB285_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB285_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB285_37
.LBB285_20:                             # %if.end30
	jmp	.LBB285_21
.LBB285_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB285_23
	jmp	.LBB285_22
.LBB285_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB285_26
	jmp	.LBB285_29
.LBB285_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB285_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB285_37
.LBB285_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB285_30
.LBB285_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB285_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB285_37
.LBB285_28:                             # %if.end48
	jmp	.LBB285_30
.LBB285_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB285_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB285_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB285_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB285_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB285_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB285_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB285_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB285_37:                             # %if.end67
	cmpl	$96725970, -44(%rbp)    # imm = 0x5C3EBD2
	jne	.LBB285_39
.LBB285_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_38
.Lfunc_end285:
	.size	testf.243, .Lfunc_end285-testf.243
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.244
.LCPI286_0:
	.quad	4607182418800017408     # double 1
.LCPI286_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.244,@function
uInt64_to_double.244:                   # @uInt64_to_double.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI286_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$473147457, -28(%rbp)   # imm = 0x1C33A841
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB286_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB286_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB286_1 Depth=1
	vmovsd	.LCPI286_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB286_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB286_1
.LBB286_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$473147457, -28(%rbp)   # imm = 0x1C33A841
	jne	.LBB286_6
.LBB286_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB286_5
.Lfunc_end286:
	.size	uInt64_to_double.244, .Lfunc_end286-uInt64_to_double.244
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.245
	.type	uncompress.245,@function
uncompress.245:                         # @uncompress.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1435203923, -68(%rbp)  # imm = 0x558B7953
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB287_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB287_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB287_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB287_6
	jmp	.LBB287_4
.LBB287_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB287_14
	jmp	.LBB287_5
.LBB287_5:                              # %if.end
	subl	$3, %eax
	je	.LBB287_7
	jmp	.LBB287_15
.LBB287_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB287_15
.LBB287_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB287_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB287_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB287_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB287_11
# %bb.10:                               # %if.then6
	jmp	.LBB287_16
.LBB287_11:                             # %if.end7
                                        #   in Loop: Header=BB287_8 Depth=1
	jmp	.LBB287_12
.LBB287_12:                             # %for.inc
                                        #   in Loop: Header=BB287_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB287_8
.LBB287_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB287_15
.LBB287_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB287_15:                             # %sw.epilog
	jmp	.LBB287_16
.LBB287_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB287_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB287_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB287_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB287_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB287_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB287_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB287_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB287_29
.LBB287_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB287_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_28:                             # %if.end40
	jmp	.LBB287_29
.LBB287_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB287_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB287_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB287_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB287_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB287_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB287_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB287_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB287_38:                             # %if.end61
	jmp	.LBB287_39
.LBB287_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB287_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB287_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB287_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB287_44
.LBB287_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_44:                             # %if.end74
	jmp	.LBB287_45
.LBB287_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB287_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB287_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB287_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB287_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB287_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB287_54
	jmp	.LBB287_52
.LBB287_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB287_57
	jmp	.LBB287_53
.LBB287_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB287_62
	jmp	.LBB287_71
.LBB287_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB287_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_56:                             # %if.end100
	jmp	.LBB287_72
.LBB287_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB287_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB287_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB287_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_61:                             # %if.end114
	jmp	.LBB287_72
.LBB287_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB287_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB287_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB287_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB287_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB287_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB287_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB287_95
.LBB287_70:                             # %if.end141
	jmp	.LBB287_72
.LBB287_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB287_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB287_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB287_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB287_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB287_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB287_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB287_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB287_79:                             # %if.end161
	jmp	.LBB287_80
.LBB287_80:                             # %if.end162
	jmp	.LBB287_81
.LBB287_81:                             # %if.end163
	jmp	.LBB287_87
.LBB287_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB287_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB287_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB287_85:                             # %if.end173
	jmp	.LBB287_86
.LBB287_86:                             # %if.end174
	jmp	.LBB287_87
.LBB287_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB287_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB287_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB287_90:                             # %if.end182
	jmp	.LBB287_95
.LBB287_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB287_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB287_94
.LBB287_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB287_94:                             # %if.end190
	jmp	.LBB287_95
.LBB287_95:                             # %if.end191
	cmpl	$1435203923, -68(%rbp)  # imm = 0x558B7953
	jne	.LBB287_97
.LBB287_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_96
.Lfunc_end287:
	.size	uncompress.245, .Lfunc_end287-uncompress.245
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.246
	.type	hasSuffix.246,@function
hasSuffix.246:                          # @hasSuffix.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$285845792, -24(%rbp)   # imm = 0x1109A920
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB288_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB288_5
.LBB288_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB288_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB288_5
.LBB288_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB288_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$285845792, -24(%rbp)   # imm = 0x1109A920
	jne	.LBB288_7
.LBB288_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_6
.Lfunc_end288:
	.size	hasSuffix.246, .Lfunc_end288-hasSuffix.246
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.247
	.type	snocString.247,@function
snocString.247:                         # @snocString.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1776303516, -44(%rbp)  # imm = 0x69E03D9C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB289_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB289_6
.LBB289_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB289_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB289_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB289_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB289_3
.LBB289_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB289_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1776303516, -44(%rbp)  # imm = 0x69E03D9C
	jne	.LBB289_8
.LBB289_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_7
.Lfunc_end289:
	.size	snocString.247, .Lfunc_end289-snocString.247
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.248
	.type	uncompressStream.248,@function
uncompressStream.248:                   # @uncompressStream.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1135448803, -68(%rbp)  # imm = 0x43AD92E3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_2
# %bb.1:                                # %if.then
	jmp	.LBB290_66
.LBB290_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_4
# %bb.3:                                # %if.then3
	jmp	.LBB290_66
.LBB290_4:                              # %if.end4
	jmp	.LBB290_5
.LBB290_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_9 Depth 2
                                        #     Child Loop BB290_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB290_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB290_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB290_8
.LBB290_7:                              # %if.then9
	jmp	.LBB290_62
.LBB290_8:                              # %if.end10
                                        #   in Loop: Header=BB290_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB290_9:                              # %while.cond11
                                        #   Parent Loop BB290_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB290_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB290_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB290_12
# %bb.11:                               # %if.then19
	jmp	.LBB290_49
.LBB290_12:                             # %if.end20
                                        #   in Loop: Header=BB290_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB290_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB290_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB290_16
.LBB290_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB290_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB290_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB290_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB290_16:                             # %if.end32
                                        #   in Loop: Header=BB290_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_18
# %bb.17:                               # %if.then35
	jmp	.LBB290_66
.LBB290_18:                             # %if.end36
                                        #   in Loop: Header=BB290_9 Depth=2
	jmp	.LBB290_9
.LBB290_19:                             # %while.end
                                        #   in Loop: Header=BB290_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB290_21
# %bb.20:                               # %if.then39
	jmp	.LBB290_62
.LBB290_21:                             # %if.end40
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB290_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB290_23:                             # %if.end44
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB290_24:                             # %for.cond
                                        #   Parent Loop BB290_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB290_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB290_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB290_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB290_24
.LBB290_27:                             # %for.end
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB290_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB290_29:                             # %if.end53
                                        #   in Loop: Header=BB290_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB290_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB290_32
# %bb.31:                               # %if.then60
	jmp	.LBB290_33
.LBB290_32:                             # %if.end61
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_5
.LBB290_33:                             # %while.end62
	jmp	.LBB290_34
.LBB290_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_36
# %bb.35:                               # %if.then65
	jmp	.LBB290_66
.LBB290_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB290_38
# %bb.37:                               # %if.then70
	jmp	.LBB290_66
.LBB290_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_40
# %bb.39:                               # %if.then74
	jmp	.LBB290_66
.LBB290_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB290_42
# %bb.41:                               # %if.then79
	jmp	.LBB290_66
.LBB290_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB290_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB290_45
# %bb.44:                               # %if.then87
	jmp	.LBB290_66
.LBB290_45:                             # %if.end88
	jmp	.LBB290_46
.LBB290_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB290_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB290_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB290_80
.LBB290_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB290_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB290_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB290_53
# %bb.52:                               # %if.then100
	jmp	.LBB290_60
.LBB290_53:                             # %if.end101
                                        #   in Loop: Header=BB290_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_55
# %bb.54:                               # %if.then107
	jmp	.LBB290_66
.LBB290_55:                             # %if.end108
                                        #   in Loop: Header=BB290_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB290_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB290_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB290_57:                             # %if.end115
                                        #   in Loop: Header=BB290_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB290_59
# %bb.58:                               # %if.then118
	jmp	.LBB290_66
.LBB290_59:                             # %if.end119
                                        #   in Loop: Header=BB290_51 Depth=1
	jmp	.LBB290_51
.LBB290_60:                             # %while.end120
	jmp	.LBB290_34
.LBB290_61:                             # %if.end121
	jmp	.LBB290_62
.LBB290_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB290_79
# %bb.63:                               # %errhandler
	movq	.LJTI290_0(,%rax,8), %rax
	jmpq	*%rax
.LBB290_64:                             # %sw.bb
	callq	configError
.LBB290_65:                             # %sw.bb122
	jmp	.LBB290_66
.LBB290_66:                             # %errhandler_io
	callq	ioError
.LBB290_67:                             # %sw.bb123
	callq	crcError
.LBB290_68:                             # %sw.bb124
	callq	outOfMemory
.LBB290_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB290_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB290_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB290_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB290_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB290_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB290_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB290_80
.LBB290_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB290_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB290_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB290_80
.LBB290_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB290_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1135448803, -68(%rbp)  # imm = 0x43AD92E3
	jne	.LBB290_82
.LBB290_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_81
.Lfunc_end290:
	.size	uncompressStream.248, .Lfunc_end290-uncompressStream.248
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI290_0:
	.quad	.LBB290_64
	.quad	.LBB290_79
	.quad	.LBB290_69
	.quad	.LBB290_65
	.quad	.LBB290_70
	.quad	.LBB290_67
	.quad	.LBB290_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compress.249
	.type	compress.249,@function
compress.249:                           # @compress.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$768844779, -64(%rbp)   # imm = 0x2DD3A3EB
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB291_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB291_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB291_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB291_6
	jmp	.LBB291_4
.LBB291_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB291_8
	jmp	.LBB291_5
.LBB291_5:                              # %if.end
	subl	$3, %eax
	je	.LBB291_7
	jmp	.LBB291_9
.LBB291_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB291_9
.LBB291_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB291_9
.LBB291_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB291_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB291_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB291_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB291_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB291_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB291_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB291_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB291_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB291_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB291_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB291_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB291_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB291_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_23:                             # %if.end34
                                        #   in Loop: Header=BB291_18 Depth=1
	jmp	.LBB291_24
.LBB291_24:                             # %for.inc
                                        #   in Loop: Header=BB291_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_18
.LBB291_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB291_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB291_30
.LBB291_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB291_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_29:                             # %if.end45
	jmp	.LBB291_30
.LBB291_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB291_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB291_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB291_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB291_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB291_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB291_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB291_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB291_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB291_41
.LBB291_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_41:                             # %if.end72
	jmp	.LBB291_42
.LBB291_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB291_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB291_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB291_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB291_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB291_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB291_51
	jmp	.LBB291_49
.LBB291_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB291_54
	jmp	.LBB291_50
.LBB291_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB291_61
	jmp	.LBB291_70
.LBB291_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB291_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_53:                             # %if.end98
	jmp	.LBB291_71
.LBB291_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB291_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB291_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB291_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB291_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_60:                             # %if.end119
	jmp	.LBB291_71
.LBB291_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB291_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB291_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB291_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB291_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB291_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB291_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB291_80
.LBB291_69:                             # %if.end146
	jmp	.LBB291_71
.LBB291_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB291_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB291_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB291_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB291_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB291_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB291_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB291_77:                             # %if.end163
	jmp	.LBB291_78
.LBB291_78:                             # %if.end164
	jmp	.LBB291_79
.LBB291_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB291_80:                             # %return
	cmpl	$768844779, -64(%rbp)   # imm = 0x2DD3A3EB
	jne	.LBB291_82
.LBB291_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_81
.Lfunc_end291:
	.size	compress.249, .Lfunc_end291-compress.249
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.250
.LCPI292_0:
	.quad	4636737291354636288     # double 100
.LCPI292_1:
	.quad	4607182418800017408     # double 1
.LCPI292_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.250,@function
compressStream.250:                     # @compressStream.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1660804232, -76(%rbp)  # imm = 0x62FDDC88
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB292_2
# %bb.1:                                # %if.then
	jmp	.LBB292_46
.LBB292_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB292_4
# %bb.3:                                # %if.then3
	jmp	.LBB292_46
.LBB292_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB292_6
# %bb.5:                                # %if.then6
	jmp	.LBB292_40
.LBB292_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB292_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB292_8:                              # %if.end11
	jmp	.LBB292_9
.LBB292_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB292_11
# %bb.10:                               # %if.then14
	jmp	.LBB292_18
.LBB292_11:                             # %if.end15
                                        #   in Loop: Header=BB292_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB292_13
# %bb.12:                               # %if.then19
	jmp	.LBB292_46
.LBB292_13:                             # %if.end20
                                        #   in Loop: Header=BB292_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB292_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB292_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB292_15:                             # %if.end25
                                        #   in Loop: Header=BB292_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB292_17
# %bb.16:                               # %if.then28
	jmp	.LBB292_40
.LBB292_17:                             # %if.end29
                                        #   in Loop: Header=BB292_9 Depth=1
	jmp	.LBB292_9
.LBB292_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB292_20
# %bb.19:                               # %if.then32
	jmp	.LBB292_40
.LBB292_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB292_22
# %bb.21:                               # %if.then36
	jmp	.LBB292_46
.LBB292_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB292_24
# %bb.23:                               # %if.then41
	jmp	.LBB292_46
.LBB292_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB292_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB292_27
# %bb.26:                               # %if.then49
	jmp	.LBB292_46
.LBB292_27:                             # %if.end50
	jmp	.LBB292_28
.LBB292_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB292_30
# %bb.29:                               # %if.then54
	jmp	.LBB292_46
.LBB292_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB292_32
# %bb.31:                               # %if.then59
	jmp	.LBB292_46
.LBB292_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB292_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB292_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB292_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB292_37
.LBB292_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI292_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI292_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI292_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB292_37:                             # %if.end80
	jmp	.LBB292_38
.LBB292_38:                             # %if.end81
	cmpl	$1660804232, -76(%rbp)  # imm = 0x62FDDC88
	jne	.LBB292_48
.LBB292_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB292_43
	jmp	.LBB292_41
.LBB292_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB292_45
	jmp	.LBB292_42
.LBB292_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB292_44
	jmp	.LBB292_47
.LBB292_43:                             # %sw.bb
	callq	configError
.LBB292_44:                             # %sw.bb82
	callq	outOfMemory
.LBB292_45:                             # %sw.bb83
	jmp	.LBB292_46
.LBB292_46:                             # %errhandler_io
	callq	ioError
.LBB292_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB292_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB292_39
.Lfunc_end292:
	.size	compressStream.250, .Lfunc_end292-compressStream.250
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.251
	.type	compress.251,@function
compress.251:                           # @compress.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$521584745, -60(%rbp)   # imm = 0x1F16C069
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB293_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB293_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB293_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB293_6
	jmp	.LBB293_4
.LBB293_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB293_8
	jmp	.LBB293_5
.LBB293_5:                              # %if.end
	subl	$3, %eax
	je	.LBB293_7
	jmp	.LBB293_9
.LBB293_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB293_9
.LBB293_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB293_9
.LBB293_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB293_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB293_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB293_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB293_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB293_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB293_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB293_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB293_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB293_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB293_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB293_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB293_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB293_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_23:                             # %if.end34
                                        #   in Loop: Header=BB293_18 Depth=1
	jmp	.LBB293_24
.LBB293_24:                             # %for.inc
                                        #   in Loop: Header=BB293_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB293_18
.LBB293_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB293_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB293_30
.LBB293_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB293_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_29:                             # %if.end45
	jmp	.LBB293_30
.LBB293_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB293_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB293_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB293_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB293_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB293_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB293_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB293_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB293_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB293_41
.LBB293_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_41:                             # %if.end72
	jmp	.LBB293_42
.LBB293_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB293_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB293_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB293_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB293_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB293_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB293_51
	jmp	.LBB293_49
.LBB293_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB293_54
	jmp	.LBB293_50
.LBB293_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB293_61
	jmp	.LBB293_70
.LBB293_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB293_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_53:                             # %if.end98
	jmp	.LBB293_71
.LBB293_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB293_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB293_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB293_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB293_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_60:                             # %if.end119
	jmp	.LBB293_71
.LBB293_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB293_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB293_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB293_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB293_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB293_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB293_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB293_80
.LBB293_69:                             # %if.end146
	jmp	.LBB293_71
.LBB293_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB293_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB293_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB293_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB293_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB293_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB293_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB293_77:                             # %if.end163
	jmp	.LBB293_78
.LBB293_78:                             # %if.end164
	jmp	.LBB293_79
.LBB293_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB293_80:                             # %return
	cmpl	$521584745, -60(%rbp)   # imm = 0x1F16C069
	jne	.LBB293_82
.LBB293_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_81
.Lfunc_end293:
	.size	compress.251, .Lfunc_end293-compress.251
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.252
	.type	uncompressStream.252,@function
uncompressStream.252:                   # @uncompressStream.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$2007160357, -68(%rbp)  # imm = 0x77A2D625
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_2
# %bb.1:                                # %if.then
	jmp	.LBB294_66
.LBB294_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_4
# %bb.3:                                # %if.then3
	jmp	.LBB294_66
.LBB294_4:                              # %if.end4
	jmp	.LBB294_5
.LBB294_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_9 Depth 2
                                        #     Child Loop BB294_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB294_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB294_8
.LBB294_7:                              # %if.then9
	jmp	.LBB294_62
.LBB294_8:                              # %if.end10
                                        #   in Loop: Header=BB294_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB294_9:                              # %while.cond11
                                        #   Parent Loop BB294_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB294_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB294_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB294_12
# %bb.11:                               # %if.then19
	jmp	.LBB294_49
.LBB294_12:                             # %if.end20
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB294_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB294_16
.LBB294_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB294_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB294_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB294_16:                             # %if.end32
                                        #   in Loop: Header=BB294_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_18
# %bb.17:                               # %if.then35
	jmp	.LBB294_66
.LBB294_18:                             # %if.end36
                                        #   in Loop: Header=BB294_9 Depth=2
	jmp	.LBB294_9
.LBB294_19:                             # %while.end
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB294_21
# %bb.20:                               # %if.then39
	jmp	.LBB294_62
.LBB294_21:                             # %if.end40
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB294_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB294_23:                             # %if.end44
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -44(%rbp)
.LBB294_24:                             # %for.cond
                                        #   Parent Loop BB294_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB294_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB294_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB294_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB294_24
.LBB294_27:                             # %for.end
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB294_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB294_29:                             # %if.end53
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB294_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB294_32
# %bb.31:                               # %if.then60
	jmp	.LBB294_33
.LBB294_32:                             # %if.end61
                                        #   in Loop: Header=BB294_5 Depth=1
	jmp	.LBB294_5
.LBB294_33:                             # %while.end62
	jmp	.LBB294_34
.LBB294_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_36
# %bb.35:                               # %if.then65
	jmp	.LBB294_66
.LBB294_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB294_38
# %bb.37:                               # %if.then70
	jmp	.LBB294_66
.LBB294_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_40
# %bb.39:                               # %if.then74
	jmp	.LBB294_66
.LBB294_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB294_42
# %bb.41:                               # %if.then79
	jmp	.LBB294_66
.LBB294_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB294_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB294_45
# %bb.44:                               # %if.then87
	jmp	.LBB294_66
.LBB294_45:                             # %if.end88
	jmp	.LBB294_46
.LBB294_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB294_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB294_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB294_80
.LBB294_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB294_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB294_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB294_53
# %bb.52:                               # %if.then100
	jmp	.LBB294_60
.LBB294_53:                             # %if.end101
                                        #   in Loop: Header=BB294_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_55
# %bb.54:                               # %if.then107
	jmp	.LBB294_66
.LBB294_55:                             # %if.end108
                                        #   in Loop: Header=BB294_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB294_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB294_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB294_57:                             # %if.end115
                                        #   in Loop: Header=BB294_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_59
# %bb.58:                               # %if.then118
	jmp	.LBB294_66
.LBB294_59:                             # %if.end119
                                        #   in Loop: Header=BB294_51 Depth=1
	jmp	.LBB294_51
.LBB294_60:                             # %while.end120
	jmp	.LBB294_34
.LBB294_61:                             # %if.end121
	jmp	.LBB294_62
.LBB294_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB294_79
# %bb.63:                               # %errhandler
	movq	.LJTI294_0(,%rax,8), %rax
	jmpq	*%rax
.LBB294_64:                             # %sw.bb
	callq	configError
.LBB294_65:                             # %sw.bb122
	jmp	.LBB294_66
.LBB294_66:                             # %errhandler_io
	callq	ioError
.LBB294_67:                             # %sw.bb123
	callq	crcError
.LBB294_68:                             # %sw.bb124
	callq	outOfMemory
.LBB294_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB294_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB294_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB294_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB294_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB294_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB294_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB294_80
.LBB294_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB294_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB294_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB294_80
.LBB294_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB294_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$2007160357, -68(%rbp)  # imm = 0x77A2D625
	jne	.LBB294_82
.LBB294_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_81
.Lfunc_end294:
	.size	uncompressStream.252, .Lfunc_end294-uncompressStream.252
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI294_0:
	.quad	.LBB294_64
	.quad	.LBB294_79
	.quad	.LBB294_69
	.quad	.LBB294_65
	.quad	.LBB294_70
	.quad	.LBB294_67
	.quad	.LBB294_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uncompressStream.253
	.type	uncompressStream.253,@function
uncompressStream.253:                   # @uncompressStream.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$238529130, -68(%rbp)   # imm = 0xE37AA6A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_2
# %bb.1:                                # %if.then
	jmp	.LBB295_66
.LBB295_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_4
# %bb.3:                                # %if.then3
	jmp	.LBB295_66
.LBB295_4:                              # %if.end4
	jmp	.LBB295_5
.LBB295_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_9 Depth 2
                                        #     Child Loop BB295_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB295_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB295_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB295_8
.LBB295_7:                              # %if.then9
	jmp	.LBB295_62
.LBB295_8:                              # %if.end10
                                        #   in Loop: Header=BB295_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB295_9:                              # %while.cond11
                                        #   Parent Loop BB295_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB295_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB295_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB295_12
# %bb.11:                               # %if.then19
	jmp	.LBB295_49
.LBB295_12:                             # %if.end20
                                        #   in Loop: Header=BB295_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB295_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB295_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB295_16
.LBB295_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB295_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB295_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB295_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB295_16:                             # %if.end32
                                        #   in Loop: Header=BB295_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_18
# %bb.17:                               # %if.then35
	jmp	.LBB295_66
.LBB295_18:                             # %if.end36
                                        #   in Loop: Header=BB295_9 Depth=2
	jmp	.LBB295_9
.LBB295_19:                             # %while.end
                                        #   in Loop: Header=BB295_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB295_21
# %bb.20:                               # %if.then39
	jmp	.LBB295_62
.LBB295_21:                             # %if.end40
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB295_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB295_23:                             # %if.end44
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -40(%rbp)
.LBB295_24:                             # %for.cond
                                        #   Parent Loop BB295_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB295_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB295_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB295_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB295_24
.LBB295_27:                             # %for.end
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB295_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB295_29:                             # %if.end53
                                        #   in Loop: Header=BB295_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB295_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB295_32
# %bb.31:                               # %if.then60
	jmp	.LBB295_33
.LBB295_32:                             # %if.end61
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_5
.LBB295_33:                             # %while.end62
	jmp	.LBB295_34
.LBB295_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_36
# %bb.35:                               # %if.then65
	jmp	.LBB295_66
.LBB295_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB295_38
# %bb.37:                               # %if.then70
	jmp	.LBB295_66
.LBB295_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_40
# %bb.39:                               # %if.then74
	jmp	.LBB295_66
.LBB295_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB295_42
# %bb.41:                               # %if.then79
	jmp	.LBB295_66
.LBB295_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB295_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB295_45
# %bb.44:                               # %if.then87
	jmp	.LBB295_66
.LBB295_45:                             # %if.end88
	jmp	.LBB295_46
.LBB295_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB295_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB295_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB295_80
.LBB295_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB295_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB295_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB295_53
# %bb.52:                               # %if.then100
	jmp	.LBB295_60
.LBB295_53:                             # %if.end101
                                        #   in Loop: Header=BB295_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_55
# %bb.54:                               # %if.then107
	jmp	.LBB295_66
.LBB295_55:                             # %if.end108
                                        #   in Loop: Header=BB295_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB295_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB295_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB295_57:                             # %if.end115
                                        #   in Loop: Header=BB295_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB295_59
# %bb.58:                               # %if.then118
	jmp	.LBB295_66
.LBB295_59:                             # %if.end119
                                        #   in Loop: Header=BB295_51 Depth=1
	jmp	.LBB295_51
.LBB295_60:                             # %while.end120
	jmp	.LBB295_34
.LBB295_61:                             # %if.end121
	jmp	.LBB295_62
.LBB295_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB295_79
# %bb.63:                               # %errhandler
	movq	.LJTI295_0(,%rax,8), %rax
	jmpq	*%rax
.LBB295_64:                             # %sw.bb
	callq	configError
.LBB295_65:                             # %sw.bb122
	jmp	.LBB295_66
.LBB295_66:                             # %errhandler_io
	callq	ioError
.LBB295_67:                             # %sw.bb123
	callq	crcError
.LBB295_68:                             # %sw.bb124
	callq	outOfMemory
.LBB295_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB295_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB295_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB295_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB295_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB295_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB295_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB295_80
.LBB295_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB295_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB295_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB295_80
.LBB295_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB295_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$238529130, -68(%rbp)   # imm = 0xE37AA6A
	jne	.LBB295_82
.LBB295_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_81
.Lfunc_end295:
	.size	uncompressStream.253, .Lfunc_end295-uncompressStream.253
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI295_0:
	.quad	.LBB295_64
	.quad	.LBB295_79
	.quad	.LBB295_69
	.quad	.LBB295_65
	.quad	.LBB295_70
	.quad	.LBB295_67
	.quad	.LBB295_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.254
	.type	mapSuffix.254,@function
mapSuffix.254:                          # @mapSuffix.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1048198698, -36(%rbp)  # imm = 0x3E7A3E2A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB296_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB296_3
.LBB296_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB296_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1048198698, -36(%rbp)  # imm = 0x3E7A3E2A
	jne	.LBB296_5
.LBB296_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_4
.Lfunc_end296:
	.size	mapSuffix.254, .Lfunc_end296-mapSuffix.254
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.255
	.type	uncompress.255,@function
uncompress.255:                         # @uncompress.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$854236690, -64(%rbp)   # imm = 0x32EA9E12
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB297_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB297_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB297_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB297_6
	jmp	.LBB297_4
.LBB297_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB297_14
	jmp	.LBB297_5
.LBB297_5:                              # %if.end
	subl	$3, %eax
	je	.LBB297_7
	jmp	.LBB297_15
.LBB297_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB297_15
.LBB297_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB297_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB297_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB297_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB297_11
# %bb.10:                               # %if.then6
	jmp	.LBB297_16
.LBB297_11:                             # %if.end7
                                        #   in Loop: Header=BB297_8 Depth=1
	jmp	.LBB297_12
.LBB297_12:                             # %for.inc
                                        #   in Loop: Header=BB297_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB297_8
.LBB297_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB297_15
.LBB297_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB297_15:                             # %sw.epilog
	jmp	.LBB297_16
.LBB297_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB297_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB297_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB297_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB297_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB297_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB297_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB297_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB297_29
.LBB297_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB297_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_28:                             # %if.end40
	jmp	.LBB297_29
.LBB297_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB297_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB297_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB297_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB297_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB297_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB297_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB297_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB297_38:                             # %if.end61
	jmp	.LBB297_39
.LBB297_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB297_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB297_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB297_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB297_44
.LBB297_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_44:                             # %if.end74
	jmp	.LBB297_45
.LBB297_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB297_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB297_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB297_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB297_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB297_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB297_54
	jmp	.LBB297_52
.LBB297_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB297_57
	jmp	.LBB297_53
.LBB297_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB297_62
	jmp	.LBB297_71
.LBB297_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB297_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_56:                             # %if.end100
	jmp	.LBB297_72
.LBB297_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB297_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB297_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB297_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_61:                             # %if.end114
	jmp	.LBB297_72
.LBB297_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB297_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB297_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB297_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB297_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB297_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB297_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB297_95
.LBB297_70:                             # %if.end141
	jmp	.LBB297_72
.LBB297_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB297_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB297_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB297_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB297_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB297_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB297_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB297_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB297_79:                             # %if.end161
	jmp	.LBB297_80
.LBB297_80:                             # %if.end162
	jmp	.LBB297_81
.LBB297_81:                             # %if.end163
	jmp	.LBB297_87
.LBB297_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB297_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB297_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB297_85:                             # %if.end173
	jmp	.LBB297_86
.LBB297_86:                             # %if.end174
	jmp	.LBB297_87
.LBB297_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB297_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB297_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB297_90:                             # %if.end182
	jmp	.LBB297_95
.LBB297_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB297_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB297_94
.LBB297_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB297_94:                             # %if.end190
	jmp	.LBB297_95
.LBB297_95:                             # %if.end191
	cmpl	$854236690, -64(%rbp)   # imm = 0x32EA9E12
	jne	.LBB297_97
.LBB297_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_96
.Lfunc_end297:
	.size	uncompress.255, .Lfunc_end297-uncompress.255
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.256
	.type	hasSuffix.256,@function
hasSuffix.256:                          # @hasSuffix.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$994139938, -24(%rbp)   # imm = 0x3B415F22
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB298_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB298_5
.LBB298_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB298_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB298_5
.LBB298_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB298_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$994139938, -24(%rbp)   # imm = 0x3B415F22
	jne	.LBB298_7
.LBB298_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_6
.Lfunc_end298:
	.size	hasSuffix.256, .Lfunc_end298-hasSuffix.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.257
	.type	countHardLinks.257,@function
countHardLinks.257:                     # @countHardLinks.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1771377407, -16(%rbp)  # imm = 0x699512FF
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB299_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB299_3
.LBB299_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB299_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1771377407, -16(%rbp)  # imm = 0x699512FF
	jne	.LBB299_5
.LBB299_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_4
.Lfunc_end299:
	.size	countHardLinks.257, .Lfunc_end299-countHardLinks.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.258
	.type	hasSuffix.258,@function
hasSuffix.258:                          # @hasSuffix.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1009189541, -24(%rbp)  # imm = 0x3C2702A5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB300_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB300_5
.LBB300_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB300_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB300_5
.LBB300_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB300_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1009189541, -24(%rbp)  # imm = 0x3C2702A5
	jne	.LBB300_7
.LBB300_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_6
.Lfunc_end300:
	.size	hasSuffix.258, .Lfunc_end300-hasSuffix.258
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.259
	.type	hasSuffix.259,@function
hasSuffix.259:                          # @hasSuffix.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$277747636, -24(%rbp)   # imm = 0x108E17B4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB301_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB301_5
.LBB301_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB301_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB301_5
.LBB301_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB301_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$277747636, -24(%rbp)   # imm = 0x108E17B4
	jne	.LBB301_7
.LBB301_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_6
.Lfunc_end301:
	.size	hasSuffix.259, .Lfunc_end301-hasSuffix.259
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.260
	.type	notAStandardFile.260,@function
notAStandardFile.260:                   # @notAStandardFile.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1893707296, -20(%rbp)  # imm = 0x70DFAE20
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB302_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB302_5
.LBB302_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB302_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB302_5
.LBB302_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB302_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1893707296, -20(%rbp)  # imm = 0x70DFAE20
	jne	.LBB302_7
.LBB302_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_6
.Lfunc_end302:
	.size	notAStandardFile.260, .Lfunc_end302-notAStandardFile.260
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.261
	.type	uncompress.261,@function
uncompress.261:                         # @uncompress.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$908701864, -68(%rbp)   # imm = 0x3629B0A8
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB303_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB303_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB303_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB303_6
	jmp	.LBB303_4
.LBB303_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB303_14
	jmp	.LBB303_5
.LBB303_5:                              # %if.end
	subl	$3, %eax
	je	.LBB303_7
	jmp	.LBB303_15
.LBB303_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB303_15
.LBB303_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB303_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB303_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB303_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB303_11
# %bb.10:                               # %if.then6
	jmp	.LBB303_16
.LBB303_11:                             # %if.end7
                                        #   in Loop: Header=BB303_8 Depth=1
	jmp	.LBB303_12
.LBB303_12:                             # %for.inc
                                        #   in Loop: Header=BB303_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB303_8
.LBB303_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB303_15
.LBB303_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB303_15:                             # %sw.epilog
	jmp	.LBB303_16
.LBB303_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB303_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB303_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB303_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB303_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB303_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB303_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB303_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB303_29
.LBB303_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB303_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_28:                             # %if.end40
	jmp	.LBB303_29
.LBB303_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB303_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB303_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB303_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB303_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB303_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB303_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB303_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB303_38:                             # %if.end61
	jmp	.LBB303_39
.LBB303_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB303_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB303_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB303_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB303_44
.LBB303_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_44:                             # %if.end74
	jmp	.LBB303_45
.LBB303_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB303_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB303_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB303_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB303_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB303_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB303_54
	jmp	.LBB303_52
.LBB303_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB303_57
	jmp	.LBB303_53
.LBB303_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB303_62
	jmp	.LBB303_71
.LBB303_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB303_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_56:                             # %if.end100
	jmp	.LBB303_72
.LBB303_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB303_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB303_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB303_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_61:                             # %if.end114
	jmp	.LBB303_72
.LBB303_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB303_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB303_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB303_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB303_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB303_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB303_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB303_95
.LBB303_70:                             # %if.end141
	jmp	.LBB303_72
.LBB303_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB303_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB303_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB303_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB303_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB303_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB303_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB303_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB303_79:                             # %if.end161
	jmp	.LBB303_80
.LBB303_80:                             # %if.end162
	jmp	.LBB303_81
.LBB303_81:                             # %if.end163
	jmp	.LBB303_87
.LBB303_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB303_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB303_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB303_85:                             # %if.end173
	jmp	.LBB303_86
.LBB303_86:                             # %if.end174
	jmp	.LBB303_87
.LBB303_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB303_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB303_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB303_90:                             # %if.end182
	jmp	.LBB303_95
.LBB303_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB303_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB303_94
.LBB303_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB303_94:                             # %if.end190
	jmp	.LBB303_95
.LBB303_95:                             # %if.end191
	cmpl	$908701864, -68(%rbp)   # imm = 0x3629B0A8
	jne	.LBB303_97
.LBB303_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_96
.Lfunc_end303:
	.size	uncompress.261, .Lfunc_end303-uncompress.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.262
	.type	countHardLinks.262,@function
countHardLinks.262:                     # @countHardLinks.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$526931476, -20(%rbp)   # imm = 0x1F685614
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB304_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB304_3
.LBB304_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB304_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$526931476, -20(%rbp)   # imm = 0x1F685614
	jne	.LBB304_5
.LBB304_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_4
.Lfunc_end304:
	.size	countHardLinks.262, .Lfunc_end304-countHardLinks.262
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.263
	.type	notAStandardFile.263,@function
notAStandardFile.263:                   # @notAStandardFile.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$2007646235, -20(%rbp)  # imm = 0x77AA401B
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB305_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB305_5
.LBB305_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB305_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB305_5
.LBB305_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB305_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2007646235, -20(%rbp)  # imm = 0x77AA401B
	jne	.LBB305_7
.LBB305_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_6
.Lfunc_end305:
	.size	notAStandardFile.263, .Lfunc_end305-notAStandardFile.263
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.264
	.type	uInt64_qrm10.264,@function
uInt64_qrm10.264:                       # @uInt64_qrm10.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1927873142, -24(%rbp)  # imm = 0x72E90276
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB306_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB306_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB306_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB306_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_1
.LBB306_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1927873142, -24(%rbp)  # imm = 0x72E90276
	jne	.LBB306_6
.LBB306_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_5
.Lfunc_end306:
	.size	uInt64_qrm10.264, .Lfunc_end306-uInt64_qrm10.264
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.265
	.type	mapSuffix.265,@function
mapSuffix.265:                          # @mapSuffix.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$742136223, -36(%rbp)   # imm = 0x2C3C199F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB307_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB307_3
.LBB307_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB307_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$742136223, -36(%rbp)   # imm = 0x2C3C199F
	jne	.LBB307_5
.LBB307_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_4
.Lfunc_end307:
	.size	mapSuffix.265, .Lfunc_end307-mapSuffix.265
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.266
	.type	uncompressStream.266,@function
uncompressStream.266:                   # @uncompressStream.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$436484133, -68(%rbp)   # imm = 0x1A043825
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_2
# %bb.1:                                # %if.then
	jmp	.LBB308_66
.LBB308_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_4
# %bb.3:                                # %if.then3
	jmp	.LBB308_66
.LBB308_4:                              # %if.end4
	jmp	.LBB308_5
.LBB308_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB308_9 Depth 2
                                        #     Child Loop BB308_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB308_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB308_8
.LBB308_7:                              # %if.then9
	jmp	.LBB308_62
.LBB308_8:                              # %if.end10
                                        #   in Loop: Header=BB308_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB308_9:                              # %while.cond11
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB308_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB308_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB308_12
# %bb.11:                               # %if.then19
	jmp	.LBB308_49
.LBB308_12:                             # %if.end20
                                        #   in Loop: Header=BB308_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB308_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB308_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB308_16
.LBB308_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB308_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB308_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB308_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB308_16:                             # %if.end32
                                        #   in Loop: Header=BB308_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_18
# %bb.17:                               # %if.then35
	jmp	.LBB308_66
.LBB308_18:                             # %if.end36
                                        #   in Loop: Header=BB308_9 Depth=2
	jmp	.LBB308_9
.LBB308_19:                             # %while.end
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB308_21
# %bb.20:                               # %if.then39
	jmp	.LBB308_62
.LBB308_21:                             # %if.end40
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB308_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB308_23:                             # %if.end44
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB308_24:                             # %for.cond
                                        #   Parent Loop BB308_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB308_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB308_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB308_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB308_24
.LBB308_27:                             # %for.end
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB308_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB308_29:                             # %if.end53
                                        #   in Loop: Header=BB308_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB308_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB308_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB308_32
# %bb.31:                               # %if.then60
	jmp	.LBB308_33
.LBB308_32:                             # %if.end61
                                        #   in Loop: Header=BB308_5 Depth=1
	jmp	.LBB308_5
.LBB308_33:                             # %while.end62
	jmp	.LBB308_34
.LBB308_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_36
# %bb.35:                               # %if.then65
	jmp	.LBB308_66
.LBB308_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB308_38
# %bb.37:                               # %if.then70
	jmp	.LBB308_66
.LBB308_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_40
# %bb.39:                               # %if.then74
	jmp	.LBB308_66
.LBB308_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB308_42
# %bb.41:                               # %if.then79
	jmp	.LBB308_66
.LBB308_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB308_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB308_45
# %bb.44:                               # %if.then87
	jmp	.LBB308_66
.LBB308_45:                             # %if.end88
	jmp	.LBB308_46
.LBB308_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB308_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB308_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB308_80
.LBB308_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB308_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB308_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB308_53
# %bb.52:                               # %if.then100
	jmp	.LBB308_60
.LBB308_53:                             # %if.end101
                                        #   in Loop: Header=BB308_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_55
# %bb.54:                               # %if.then107
	jmp	.LBB308_66
.LBB308_55:                             # %if.end108
                                        #   in Loop: Header=BB308_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB308_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB308_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB308_57:                             # %if.end115
                                        #   in Loop: Header=BB308_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB308_59
# %bb.58:                               # %if.then118
	jmp	.LBB308_66
.LBB308_59:                             # %if.end119
                                        #   in Loop: Header=BB308_51 Depth=1
	jmp	.LBB308_51
.LBB308_60:                             # %while.end120
	jmp	.LBB308_34
.LBB308_61:                             # %if.end121
	jmp	.LBB308_62
.LBB308_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB308_79
# %bb.63:                               # %errhandler
	movq	.LJTI308_0(,%rax,8), %rax
	jmpq	*%rax
.LBB308_64:                             # %sw.bb
	callq	configError
.LBB308_65:                             # %sw.bb122
	jmp	.LBB308_66
.LBB308_66:                             # %errhandler_io
	callq	ioError
.LBB308_67:                             # %sw.bb123
	callq	crcError
.LBB308_68:                             # %sw.bb124
	callq	outOfMemory
.LBB308_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB308_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB308_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB308_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB308_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB308_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB308_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB308_80
.LBB308_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB308_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB308_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB308_80
.LBB308_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB308_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$436484133, -68(%rbp)   # imm = 0x1A043825
	jne	.LBB308_82
.LBB308_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_81
.Lfunc_end308:
	.size	uncompressStream.266, .Lfunc_end308-uncompressStream.266
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI308_0:
	.quad	.LBB308_64
	.quad	.LBB308_79
	.quad	.LBB308_69
	.quad	.LBB308_65
	.quad	.LBB308_70
	.quad	.LBB308_67
	.quad	.LBB308_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.267
	.type	mapSuffix.267,@function
mapSuffix.267:                          # @mapSuffix.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1407654177, -36(%rbp)  # imm = 0x53E71921
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB309_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB309_3
.LBB309_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB309_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1407654177, -36(%rbp)  # imm = 0x53E71921
	jne	.LBB309_5
.LBB309_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_4
.Lfunc_end309:
	.size	mapSuffix.267, .Lfunc_end309-mapSuffix.267
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.268
	.type	countHardLinks.268,@function
countHardLinks.268:                     # @countHardLinks.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$833970431, -20(%rbp)   # imm = 0x31B560FF
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB310_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB310_3
.LBB310_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB310_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$833970431, -20(%rbp)   # imm = 0x31B560FF
	jne	.LBB310_5
.LBB310_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_4
.Lfunc_end310:
	.size	countHardLinks.268, .Lfunc_end310-countHardLinks.268
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.269
	.type	compress.269,@function
compress.269:                           # @compress.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1095397231, -60(%rbp)  # imm = 0x414A6F6F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB311_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB311_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB311_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB311_6
	jmp	.LBB311_4
.LBB311_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB311_8
	jmp	.LBB311_5
.LBB311_5:                              # %if.end
	subl	$3, %eax
	je	.LBB311_7
	jmp	.LBB311_9
.LBB311_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB311_9
.LBB311_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB311_9
.LBB311_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB311_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB311_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB311_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB311_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB311_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB311_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB311_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB311_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB311_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB311_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB311_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB311_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB311_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_23:                             # %if.end34
                                        #   in Loop: Header=BB311_18 Depth=1
	jmp	.LBB311_24
.LBB311_24:                             # %for.inc
                                        #   in Loop: Header=BB311_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB311_18
.LBB311_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB311_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB311_30
.LBB311_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB311_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_29:                             # %if.end45
	jmp	.LBB311_30
.LBB311_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB311_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB311_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB311_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB311_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB311_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB311_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB311_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB311_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB311_41
.LBB311_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_41:                             # %if.end72
	jmp	.LBB311_42
.LBB311_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB311_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB311_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB311_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB311_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB311_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB311_51
	jmp	.LBB311_49
.LBB311_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB311_54
	jmp	.LBB311_50
.LBB311_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB311_61
	jmp	.LBB311_70
.LBB311_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB311_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_53:                             # %if.end98
	jmp	.LBB311_71
.LBB311_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB311_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB311_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB311_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB311_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_60:                             # %if.end119
	jmp	.LBB311_71
.LBB311_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB311_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB311_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB311_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB311_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB311_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB311_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB311_80
.LBB311_69:                             # %if.end146
	jmp	.LBB311_71
.LBB311_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB311_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB311_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB311_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB311_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB311_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB311_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB311_77:                             # %if.end163
	jmp	.LBB311_78
.LBB311_78:                             # %if.end164
	jmp	.LBB311_79
.LBB311_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB311_80:                             # %return
	cmpl	$1095397231, -60(%rbp)  # imm = 0x414A6F6F
	jne	.LBB311_82
.LBB311_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_81
.Lfunc_end311:
	.size	compress.269, .Lfunc_end311-compress.269
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.270
	.type	uInt64_qrm10.270,@function
uInt64_qrm10.270:                       # @uInt64_qrm10.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2081129343, -24(%rbp)  # imm = 0x7C0B837F
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB312_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB312_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB312_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB312_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB312_1
.LBB312_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2081129343, -24(%rbp)  # imm = 0x7C0B837F
	jne	.LBB312_6
.LBB312_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_5
.Lfunc_end312:
	.size	uInt64_qrm10.270, .Lfunc_end312-uInt64_qrm10.270
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.271
	.type	uncompress.271,@function
uncompress.271:                         # @uncompress.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1149437345, -64(%rbp)  # imm = 0x448305A1
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB313_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB313_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB313_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB313_6
	jmp	.LBB313_4
.LBB313_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB313_14
	jmp	.LBB313_5
.LBB313_5:                              # %if.end
	subl	$3, %eax
	je	.LBB313_7
	jmp	.LBB313_15
.LBB313_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB313_15
.LBB313_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB313_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB313_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB313_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB313_11
# %bb.10:                               # %if.then6
	jmp	.LBB313_16
.LBB313_11:                             # %if.end7
                                        #   in Loop: Header=BB313_8 Depth=1
	jmp	.LBB313_12
.LBB313_12:                             # %for.inc
                                        #   in Loop: Header=BB313_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB313_8
.LBB313_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB313_15
.LBB313_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB313_15:                             # %sw.epilog
	jmp	.LBB313_16
.LBB313_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB313_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB313_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB313_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB313_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB313_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB313_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB313_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB313_29
.LBB313_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB313_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_28:                             # %if.end40
	jmp	.LBB313_29
.LBB313_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB313_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB313_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB313_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB313_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB313_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB313_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB313_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB313_38:                             # %if.end61
	jmp	.LBB313_39
.LBB313_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB313_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB313_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB313_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB313_44
.LBB313_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_44:                             # %if.end74
	jmp	.LBB313_45
.LBB313_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB313_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB313_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB313_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB313_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB313_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB313_54
	jmp	.LBB313_52
.LBB313_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB313_57
	jmp	.LBB313_53
.LBB313_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB313_62
	jmp	.LBB313_71
.LBB313_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB313_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_56:                             # %if.end100
	jmp	.LBB313_72
.LBB313_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB313_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB313_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB313_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_61:                             # %if.end114
	jmp	.LBB313_72
.LBB313_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB313_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB313_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB313_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB313_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB313_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB313_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB313_95
.LBB313_70:                             # %if.end141
	jmp	.LBB313_72
.LBB313_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB313_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB313_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB313_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB313_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB313_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB313_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB313_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB313_79:                             # %if.end161
	jmp	.LBB313_80
.LBB313_80:                             # %if.end162
	jmp	.LBB313_81
.LBB313_81:                             # %if.end163
	jmp	.LBB313_87
.LBB313_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB313_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB313_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB313_85:                             # %if.end173
	jmp	.LBB313_86
.LBB313_86:                             # %if.end174
	jmp	.LBB313_87
.LBB313_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB313_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB313_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB313_90:                             # %if.end182
	jmp	.LBB313_95
.LBB313_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB313_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB313_94
.LBB313_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB313_94:                             # %if.end190
	jmp	.LBB313_95
.LBB313_95:                             # %if.end191
	cmpl	$1149437345, -64(%rbp)  # imm = 0x448305A1
	jne	.LBB313_97
.LBB313_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_96
.Lfunc_end313:
	.size	uncompress.271, .Lfunc_end313-uncompress.271
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.272
	.type	hasSuffix.272,@function
hasSuffix.272:                          # @hasSuffix.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1438139178, -24(%rbp)  # imm = 0x55B8432A
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB314_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB314_5
.LBB314_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB314_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB314_5
.LBB314_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB314_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1438139178, -24(%rbp)  # imm = 0x55B8432A
	jne	.LBB314_7
.LBB314_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_6
.Lfunc_end314:
	.size	hasSuffix.272, .Lfunc_end314-hasSuffix.272
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.273
	.type	snocString.273,@function
snocString.273:                         # @snocString.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$846635651, -44(%rbp)   # imm = 0x3276A283
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB315_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB315_6
.LBB315_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB315_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB315_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB315_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB315_3
.LBB315_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB315_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$846635651, -44(%rbp)   # imm = 0x3276A283
	jne	.LBB315_8
.LBB315_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_7
.Lfunc_end315:
	.size	snocString.273, .Lfunc_end315-snocString.273
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.274
	.type	countHardLinks.274,@function
countHardLinks.274:                     # @countHardLinks.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$968172373, -20(%rbp)   # imm = 0x39B52355
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB316_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB316_3
.LBB316_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB316_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$968172373, -20(%rbp)   # imm = 0x39B52355
	jne	.LBB316_5
.LBB316_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_4
.Lfunc_end316:
	.size	countHardLinks.274, .Lfunc_end316-countHardLinks.274
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.275
	.type	snocString.275,@function
snocString.275:                         # @snocString.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1561543864, -44(%rbp)  # imm = 0x5D1344B8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB317_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB317_6
.LBB317_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB317_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB317_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB317_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB317_3
.LBB317_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB317_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1561543864, -44(%rbp)  # imm = 0x5D1344B8
	jne	.LBB317_8
.LBB317_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_7
.Lfunc_end317:
	.size	snocString.275, .Lfunc_end317-snocString.275
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.276
	.type	uncompress.276,@function
uncompress.276:                         # @uncompress.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$24736920, -64(%rbp)    # imm = 0x1797498
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB318_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB318_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB318_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB318_6
	jmp	.LBB318_4
.LBB318_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB318_14
	jmp	.LBB318_5
.LBB318_5:                              # %if.end
	subl	$3, %eax
	je	.LBB318_7
	jmp	.LBB318_15
.LBB318_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB318_15
.LBB318_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB318_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB318_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB318_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB318_11
# %bb.10:                               # %if.then6
	jmp	.LBB318_16
.LBB318_11:                             # %if.end7
                                        #   in Loop: Header=BB318_8 Depth=1
	jmp	.LBB318_12
.LBB318_12:                             # %for.inc
                                        #   in Loop: Header=BB318_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB318_8
.LBB318_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB318_15
.LBB318_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB318_15:                             # %sw.epilog
	jmp	.LBB318_16
.LBB318_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB318_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB318_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB318_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB318_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB318_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB318_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB318_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB318_29
.LBB318_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB318_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_28:                             # %if.end40
	jmp	.LBB318_29
.LBB318_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB318_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB318_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB318_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB318_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB318_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB318_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB318_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB318_38:                             # %if.end61
	jmp	.LBB318_39
.LBB318_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB318_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB318_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB318_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB318_44
.LBB318_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_44:                             # %if.end74
	jmp	.LBB318_45
.LBB318_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB318_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB318_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB318_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB318_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB318_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB318_54
	jmp	.LBB318_52
.LBB318_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB318_57
	jmp	.LBB318_53
.LBB318_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB318_62
	jmp	.LBB318_71
.LBB318_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB318_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_56:                             # %if.end100
	jmp	.LBB318_72
.LBB318_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB318_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB318_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB318_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_61:                             # %if.end114
	jmp	.LBB318_72
.LBB318_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB318_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB318_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB318_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB318_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB318_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB318_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB318_95
.LBB318_70:                             # %if.end141
	jmp	.LBB318_72
.LBB318_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB318_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB318_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB318_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB318_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB318_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB318_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB318_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB318_79:                             # %if.end161
	jmp	.LBB318_80
.LBB318_80:                             # %if.end162
	jmp	.LBB318_81
.LBB318_81:                             # %if.end163
	jmp	.LBB318_87
.LBB318_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB318_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB318_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB318_85:                             # %if.end173
	jmp	.LBB318_86
.LBB318_86:                             # %if.end174
	jmp	.LBB318_87
.LBB318_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB318_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB318_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB318_90:                             # %if.end182
	jmp	.LBB318_95
.LBB318_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB318_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB318_94
.LBB318_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB318_94:                             # %if.end190
	jmp	.LBB318_95
.LBB318_95:                             # %if.end191
	cmpl	$24736920, -64(%rbp)    # imm = 0x1797498
	jne	.LBB318_97
.LBB318_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_96
.Lfunc_end318:
	.size	uncompress.276, .Lfunc_end318-uncompress.276
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.277
	.type	uInt64_qrm10.277,@function
uInt64_qrm10.277:                       # @uInt64_qrm10.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$86298817, -24(%rbp)    # imm = 0x524D0C1
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB319_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB319_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB319_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB319_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB319_1
.LBB319_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$86298817, -24(%rbp)    # imm = 0x524D0C1
	jne	.LBB319_6
.LBB319_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_5
.Lfunc_end319:
	.size	uInt64_qrm10.277, .Lfunc_end319-uInt64_qrm10.277
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.278
	.type	uncompress.278,@function
uncompress.278:                         # @uncompress.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2111846682, -60(%rbp)  # imm = 0x7DE0391A
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB320_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB320_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB320_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB320_6
	jmp	.LBB320_4
.LBB320_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB320_14
	jmp	.LBB320_5
.LBB320_5:                              # %if.end
	subl	$3, %eax
	je	.LBB320_7
	jmp	.LBB320_15
.LBB320_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB320_15
.LBB320_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB320_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB320_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB320_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB320_11
# %bb.10:                               # %if.then6
	jmp	.LBB320_16
.LBB320_11:                             # %if.end7
                                        #   in Loop: Header=BB320_8 Depth=1
	jmp	.LBB320_12
.LBB320_12:                             # %for.inc
                                        #   in Loop: Header=BB320_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB320_8
.LBB320_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB320_15
.LBB320_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB320_15:                             # %sw.epilog
	jmp	.LBB320_16
.LBB320_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB320_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB320_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB320_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB320_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB320_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB320_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB320_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB320_29
.LBB320_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB320_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_28:                             # %if.end40
	jmp	.LBB320_29
.LBB320_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB320_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB320_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB320_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB320_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB320_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB320_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB320_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB320_38:                             # %if.end61
	jmp	.LBB320_39
.LBB320_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB320_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB320_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB320_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB320_44
.LBB320_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_44:                             # %if.end74
	jmp	.LBB320_45
.LBB320_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB320_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB320_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB320_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB320_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB320_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB320_54
	jmp	.LBB320_52
.LBB320_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB320_57
	jmp	.LBB320_53
.LBB320_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB320_62
	jmp	.LBB320_71
.LBB320_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB320_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_56:                             # %if.end100
	jmp	.LBB320_72
.LBB320_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB320_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB320_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB320_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_61:                             # %if.end114
	jmp	.LBB320_72
.LBB320_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB320_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB320_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB320_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB320_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB320_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB320_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB320_95
.LBB320_70:                             # %if.end141
	jmp	.LBB320_72
.LBB320_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB320_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB320_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB320_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB320_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB320_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB320_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB320_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB320_79:                             # %if.end161
	jmp	.LBB320_80
.LBB320_80:                             # %if.end162
	jmp	.LBB320_81
.LBB320_81:                             # %if.end163
	jmp	.LBB320_87
.LBB320_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB320_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB320_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB320_85:                             # %if.end173
	jmp	.LBB320_86
.LBB320_86:                             # %if.end174
	jmp	.LBB320_87
.LBB320_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB320_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB320_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB320_90:                             # %if.end182
	jmp	.LBB320_95
.LBB320_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB320_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB320_94
.LBB320_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB320_94:                             # %if.end190
	jmp	.LBB320_95
.LBB320_95:                             # %if.end191
	cmpl	$2111846682, -60(%rbp)  # imm = 0x7DE0391A
	jne	.LBB320_97
.LBB320_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_96
.Lfunc_end320:
	.size	uncompress.278, .Lfunc_end320-uncompress.278
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.279
	.type	countHardLinks.279,@function
countHardLinks.279:                     # @countHardLinks.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1880575294, -16(%rbp)  # imm = 0x70174D3E
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB321_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB321_3
.LBB321_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB321_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1880575294, -16(%rbp)  # imm = 0x70174D3E
	jne	.LBB321_5
.LBB321_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_4
.Lfunc_end321:
	.size	countHardLinks.279, .Lfunc_end321-countHardLinks.279
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.280
	.type	countHardLinks.280,@function
countHardLinks.280:                     # @countHardLinks.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$959987073, -20(%rbp)   # imm = 0x39383D81
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB322_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB322_3
.LBB322_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB322_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$959987073, -20(%rbp)   # imm = 0x39383D81
	jne	.LBB322_5
.LBB322_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_4
.Lfunc_end322:
	.size	countHardLinks.280, .Lfunc_end322-countHardLinks.280
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.281
	.type	snocString.281,@function
snocString.281:                         # @snocString.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$904150113, -44(%rbp)   # imm = 0x35E43C61
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB323_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB323_6
.LBB323_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB323_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB323_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB323_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB323_3
.LBB323_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB323_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$904150113, -44(%rbp)   # imm = 0x35E43C61
	jne	.LBB323_8
.LBB323_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_7
.Lfunc_end323:
	.size	snocString.281, .Lfunc_end323-snocString.281
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.282
	.type	uInt64_qrm10.282,@function
uInt64_qrm10.282:                       # @uInt64_qrm10.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$970582008, -24(%rbp)   # imm = 0x39D9E7F8
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB324_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB324_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB324_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB324_1
.LBB324_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$970582008, -24(%rbp)   # imm = 0x39D9E7F8
	jne	.LBB324_6
.LBB324_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_5
.Lfunc_end324:
	.size	uInt64_qrm10.282, .Lfunc_end324-uInt64_qrm10.282
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.283
	.type	snocString.283,@function
snocString.283:                         # @snocString.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1594616609, -44(%rbp)  # imm = 0x5F0BEB21
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB325_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB325_6
.LBB325_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB325_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB325_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB325_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB325_3
.LBB325_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB325_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1594616609, -44(%rbp)  # imm = 0x5F0BEB21
	jne	.LBB325_8
.LBB325_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_7
.Lfunc_end325:
	.size	snocString.283, .Lfunc_end325-snocString.283
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.284
	.type	uInt64_qrm10.284,@function
uInt64_qrm10.284:                       # @uInt64_qrm10.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$964931189, -24(%rbp)   # imm = 0x3983AE75
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB326_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB326_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB326_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB326_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_1
.LBB326_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$964931189, -24(%rbp)   # imm = 0x3983AE75
	jne	.LBB326_6
.LBB326_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_5
.Lfunc_end326:
	.size	uInt64_qrm10.284, .Lfunc_end326-uInt64_qrm10.284
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.285
	.type	uInt64_qrm10.285,@function
uInt64_qrm10.285:                       # @uInt64_qrm10.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1615943201, -24(%rbp)  # imm = 0x60515621
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB327_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB327_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB327_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB327_1
.LBB327_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1615943201, -24(%rbp)  # imm = 0x60515621
	jne	.LBB327_6
.LBB327_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_5
.Lfunc_end327:
	.size	uInt64_qrm10.285, .Lfunc_end327-uInt64_qrm10.285
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.286
	.type	countHardLinks.286,@function
countHardLinks.286:                     # @countHardLinks.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$674313839, -20(%rbp)   # imm = 0x2831366F
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB328_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB328_3
.LBB328_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB328_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$674313839, -20(%rbp)   # imm = 0x2831366F
	jne	.LBB328_5
.LBB328_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_4
.Lfunc_end328:
	.size	countHardLinks.286, .Lfunc_end328-countHardLinks.286
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.287
	.type	uInt64_toAscii.287,@function
uInt64_toAscii.287:                     # @uInt64_toAscii.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2063457941, -16(%rbp)  # imm = 0x7AFDDE95
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB329_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB329_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB329_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB329_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB329_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB329_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB329_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_4
.LBB329_7:                              # %for.end
	cmpl	$2063457941, -16(%rbp)  # imm = 0x7AFDDE95
	jne	.LBB329_9
.LBB329_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_8
.Lfunc_end329:
	.size	uInt64_toAscii.287, .Lfunc_end329-uInt64_toAscii.287
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.288
	.type	uInt64_qrm10.288,@function
uInt64_qrm10.288:                       # @uInt64_qrm10.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$666529143, -24(%rbp)   # imm = 0x27BA6D77
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB330_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB330_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB330_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB330_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB330_1
.LBB330_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$666529143, -24(%rbp)   # imm = 0x27BA6D77
	jne	.LBB330_6
.LBB330_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB330_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB330_5
.Lfunc_end330:
	.size	uInt64_qrm10.288, .Lfunc_end330-uInt64_qrm10.288
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.289
	.type	uInt64_toAscii.289,@function
uInt64_toAscii.289:                     # @uInt64_toAscii.289
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1509561690, -12(%rbp)  # imm = 0x59FA155A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB331_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB331_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB331_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB331_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB331_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB331_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB331_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB331_4
.LBB331_7:                              # %for.end
	cmpl	$1509561690, -12(%rbp)  # imm = 0x59FA155A
	jne	.LBB331_9
.LBB331_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB331_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB331_8
.Lfunc_end331:
	.size	uInt64_toAscii.289, .Lfunc_end331-uInt64_toAscii.289
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.290
.LCPI332_0:
	.quad	4607182418800017408     # double 1
.LCPI332_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.290,@function
uInt64_to_double.290:                   # @uInt64_to_double.290
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI332_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1456417894, -28(%rbp)  # imm = 0x56CF2C66
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB332_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB332_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB332_1 Depth=1
	vmovsd	.LCPI332_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB332_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB332_1
.LBB332_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1456417894, -28(%rbp)  # imm = 0x56CF2C66
	jne	.LBB332_6
.LBB332_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB332_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB332_5
.Lfunc_end332:
	.size	uInt64_to_double.290, .Lfunc_end332-uInt64_to_double.290
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.291
	.type	uInt64_toAscii.291,@function
uInt64_toAscii.291:                     # @uInt64_toAscii.291
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1277561104, -12(%rbp)  # imm = 0x4C260910
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB333_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB333_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB333_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB333_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB333_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB333_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB333_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB333_4
.LBB333_7:                              # %for.end
	cmpl	$1277561104, -12(%rbp)  # imm = 0x4C260910
	jne	.LBB333_9
.LBB333_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB333_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB333_8
.Lfunc_end333:
	.size	uInt64_toAscii.291, .Lfunc_end333-uInt64_toAscii.291
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.292
	.type	uInt64_toAscii.292,@function
uInt64_toAscii.292:                     # @uInt64_toAscii.292
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$827018096, -16(%rbp)   # imm = 0x314B4B70
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB334_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB334_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB334_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB334_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB334_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB334_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB334_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB334_4
.LBB334_7:                              # %for.end
	cmpl	$827018096, -16(%rbp)   # imm = 0x314B4B70
	jne	.LBB334_9
.LBB334_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB334_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB334_8
.Lfunc_end334:
	.size	uInt64_toAscii.292, .Lfunc_end334-uInt64_toAscii.292
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.293
	.type	snocString.293,@function
snocString.293:                         # @snocString.293
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1472543197, -44(%rbp)  # imm = 0x57C539DD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB335_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB335_6
.LBB335_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB335_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB335_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB335_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB335_3
.LBB335_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB335_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1472543197, -44(%rbp)  # imm = 0x57C539DD
	jne	.LBB335_8
.LBB335_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB335_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB335_7
.Lfunc_end335:
	.size	snocString.293, .Lfunc_end335-snocString.293
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.294
	.type	uInt64_toAscii.294,@function
uInt64_toAscii.294:                     # @uInt64_toAscii.294
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$739626638, -16(%rbp)   # imm = 0x2C15CE8E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB336_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB336_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB336_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB336_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB336_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB336_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB336_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB336_4
.LBB336_7:                              # %for.end
	cmpl	$739626638, -16(%rbp)   # imm = 0x2C15CE8E
	jne	.LBB336_9
.LBB336_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB336_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB336_8
.Lfunc_end336:
	.size	uInt64_toAscii.294, .Lfunc_end336-uInt64_toAscii.294
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.295
.LCPI337_0:
	.quad	4607182418800017408     # double 1
.LCPI337_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.295,@function
uInt64_to_double.295:                   # @uInt64_to_double.295
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI337_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$934319041, -28(%rbp)   # imm = 0x37B093C1
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB337_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB337_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB337_1 Depth=1
	vmovsd	.LCPI337_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB337_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB337_1
.LBB337_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$934319041, -28(%rbp)   # imm = 0x37B093C1
	jne	.LBB337_6
.LBB337_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB337_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB337_5
.Lfunc_end337:
	.size	uInt64_to_double.295, .Lfunc_end337-uInt64_to_double.295
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.296
.LCPI338_0:
	.quad	4607182418800017408     # double 1
.LCPI338_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.296,@function
uInt64_to_double.296:                   # @uInt64_to_double.296
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI338_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$2093328980, -28(%rbp)  # imm = 0x7CC5AA54
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB338_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB338_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB338_1 Depth=1
	vmovsd	.LCPI338_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB338_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB338_1
.LBB338_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2093328980, -28(%rbp)  # imm = 0x7CC5AA54
	jne	.LBB338_6
.LBB338_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB338_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB338_5
.Lfunc_end338:
	.size	uInt64_to_double.296, .Lfunc_end338-uInt64_to_double.296
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.297
	.type	uInt64_qrm10.297,@function
uInt64_qrm10.297:                       # @uInt64_qrm10.297
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$747323752, -24(%rbp)   # imm = 0x2C8B4168
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB339_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB339_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB339_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB339_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB339_1
.LBB339_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$747323752, -24(%rbp)   # imm = 0x2C8B4168
	jne	.LBB339_6
.LBB339_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB339_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB339_5
.Lfunc_end339:
	.size	uInt64_qrm10.297, .Lfunc_end339-uInt64_qrm10.297
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.298
	.type	uInt64_qrm10.298,@function
uInt64_qrm10.298:                       # @uInt64_qrm10.298
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1153796704, -24(%rbp)  # imm = 0x44C58A60
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB340_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB340_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB340_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB340_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB340_1
.LBB340_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1153796704, -24(%rbp)  # imm = 0x44C58A60
	jne	.LBB340_6
.LBB340_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB340_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB340_5
.Lfunc_end340:
	.size	uInt64_qrm10.298, .Lfunc_end340-uInt64_qrm10.298
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.299
	.type	uInt64_qrm10.299,@function
uInt64_qrm10.299:                       # @uInt64_qrm10.299
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1505513535, -24(%rbp)  # imm = 0x59BC503F
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB341_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB341_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB341_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB341_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB341_1
.LBB341_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1505513535, -24(%rbp)  # imm = 0x59BC503F
	jne	.LBB341_6
.LBB341_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB341_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB341_5
.Lfunc_end341:
	.size	uInt64_qrm10.299, .Lfunc_end341-uInt64_qrm10.299
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.300
	.type	uInt64_qrm10.300,@function
uInt64_qrm10.300:                       # @uInt64_qrm10.300
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$439713395, -24(%rbp)   # imm = 0x1A357E73
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB342_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB342_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB342_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB342_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB342_1
.LBB342_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$439713395, -24(%rbp)   # imm = 0x1A357E73
	jne	.LBB342_6
.LBB342_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB342_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB342_5
.Lfunc_end342:
	.size	uInt64_qrm10.300, .Lfunc_end342-uInt64_qrm10.300
	.cfi_endproc
                                        # -- End function
	.type	outputHandleJustInCase,@object # @outputHandleJustInCase
	.comm	outputHandleJustInCase,8,8
	.type	smallMode,@object       # @smallMode
	.comm	smallMode,1,1
	.type	keepInputFiles,@object  # @keepInputFiles
	.comm	keepInputFiles,1,1
	.type	forceOverwrite,@object  # @forceOverwrite
	.comm	forceOverwrite,1,1
	.type	noisy,@object           # @noisy
	.comm	noisy,1,1
	.type	verbosity,@object       # @verbosity
	.comm	verbosity,4,4
	.type	blockSize100k,@object   # @blockSize100k
	.comm	blockSize100k,4,4
	.type	testFailsExist,@object  # @testFailsExist
	.comm	testFailsExist,1,1
	.type	unzFailsExist,@object   # @unzFailsExist
	.comm	unzFailsExist,1,1
	.type	numFileNames,@object    # @numFileNames
	.comm	numFileNames,4,4
	.type	numFilesProcessed,@object # @numFilesProcessed
	.comm	numFilesProcessed,4,4
	.type	workFactor,@object      # @workFactor
	.comm	workFactor,4,4
	.type	deleteOutputOnInterrupt,@object # @deleteOutputOnInterrupt
	.comm	deleteOutputOnInterrupt,1,1
	.type	exitValue,@object       # @exitValue
	.comm	exitValue,4,4
	.type	inName,@object          # @inName
	.comm	inName,1034,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"(none)"
	.size	.L.str, 7

	.type	outName,@object         # @outName
	.comm	outName,1034,16
	.type	progNameReally,@object  # @progNameReally
	.comm	progNameReally,1034,16
	.type	progName,@object        # @progName
	.comm	progName,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"BZIP2"
	.size	.L.str.1, 6

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"BZIP"
	.size	.L.str.2, 5

	.type	longestFileName,@object # @longestFileName
	.comm	longestFileName,4,4
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"--"
	.size	.L.str.3, 3

	.type	srcMode,@object         # @srcMode
	.comm	srcMode,4,4
	.type	opMode,@object          # @opMode
	.comm	opMode,4,4
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"unzip"
	.size	.L.str.4, 6

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"UNZIP"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"z2cat"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Z2CAT"
	.size	.L.str.7, 6

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"zcat"
	.size	.L.str.8, 5

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"ZCAT"
	.size	.L.str.9, 5

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%s: Bad flag `%s'\n"
	.size	.L.str.10, 19

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"--stdout"
	.size	.L.str.11, 9

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"--decompress"
	.size	.L.str.12, 13

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"--compress"
	.size	.L.str.13, 11

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"--force"
	.size	.L.str.14, 8

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"--test"
	.size	.L.str.15, 7

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"--keep"
	.size	.L.str.16, 7

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"--small"
	.size	.L.str.17, 8

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"--quiet"
	.size	.L.str.18, 8

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"--version"
	.size	.L.str.19, 10

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"--license"
	.size	.L.str.20, 10

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"--exponential"
	.size	.L.str.21, 14

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"--repetitive-best"
	.size	.L.str.22, 18

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"--repetitive-fast"
	.size	.L.str.23, 18

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"--fast"
	.size	.L.str.24, 7

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"--best"
	.size	.L.str.25, 7

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"--verbose"
	.size	.L.str.26, 10

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"--help"
	.size	.L.str.27, 7

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"%s: -c and -t cannot be used together.\n"
	.size	.L.str.28, 40

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.29, 113

	.type	tmpName,@object         # @tmpName
	.comm	tmpName,1034,16
	.type	zSuffix,@object         # @zSuffix
	.data
	.globl	zSuffix
	.p2align	4
zSuffix:
	.quad	.L.str.30
	.quad	.L.str.31
	.quad	.L.str.32
	.quad	.L.str.33
	.size	zSuffix, 32

	.type	.L.str.30,@object       # @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	".bz2"
	.size	.L.str.30, 5

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	".bz"
	.size	.L.str.31, 4

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	".tbz2"
	.size	.L.str.32, 6

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	".tbz"
	.size	.L.str.33, 5

	.type	unzSuffix,@object       # @unzSuffix
	.data
	.globl	unzSuffix
	.p2align	4
unzSuffix:
	.quad	.L.str.34
	.quad	.L.str.34
	.quad	.L.str.35
	.quad	.L.str.35
	.size	unzSuffix, 32

	.type	.L.str.34,@object       # @.str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.34:
	.zero	1
	.size	.L.str.34, 1

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	".tar"
	.size	.L.str.35, 5

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n\n   Possible causes are (most likely first):\n   (1) This computer has unreliable memory or cache hardware\n       (a surprisingly common problem; try a different machine.)\n   (2) A bug in the compiler used to create this executable\n       (unlikely, if you didn't compile bzip2 yourself.)\n   (3) A real bug in bzip2 -- I hope this should never be the case.\n   The user's manual, Section 4.3, has more info on (1) and (2).\n   \n   If you suspect this is a bug in bzip2, or are unsure about (1)\n   or (2), feel free to report it to me at: jseward@bzip.org.\n   Section 4.3 of the user's manual describes the info a useful\n   bug report should have.  If the manual is available on your\n   system, please try and read it before mailing me.  If you don't\n   have the manual or can't be bothered to read it, mail me anyway.\n\n"
	.size	.L.str.36, 869

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n\n   Possible causes are (most likely first):\n   (1) The compressed data is corrupted, and bzip2's usual checks\n       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n   (2) This computer has unreliable memory or cache hardware\n       (a surprisingly common problem; try a different machine.)\n   (3) A bug in the compiler used to create this executable\n       (unlikely, if you didn't compile bzip2 yourself.)\n   (4) A real bug in bzip2 -- I hope this should never be the case.\n   The user's manual, Section 4.3, has more info on (2) and (3).\n   \n   If you suspect this is a bug in bzip2, or are unsure about (2)\n   or (3), feel free to report it to me at: jseward@bzip.org.\n   Section 4.3 of the user's manual describes the info a useful\n   bug report should have.  If the manual is available on your\n   system, please try and read it before mailing me.  If you don't\n   have the manual or can't be bothered to read it, mail me anyway.\n\n"
	.size	.L.str.37, 996

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"\tInput file = %s, output file = %s\n"
	.size	.L.str.38, 36

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"%s: Deleting output file %s, if it exists.\n"
	.size	.L.str.39, 44

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"%s: WARNING: deletion of output file (apparently) failed.\n"
	.size	.L.str.40, 59

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"%s: WARNING: deletion of output file suppressed\n"
	.size	.L.str.41, 49

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"%s:    since input file no longer exists.  Output file\n"
	.size	.L.str.42, 56

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"%s:    `%s' may be incomplete.\n"
	.size	.L.str.43, 32

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"%s:    I suggest doing an integrity test (bzip2 -tv) of it.\n"
	.size	.L.str.44, 61

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"%s: WARNING: some files have not been processed:\n%s:    %d specified on command line, %d not processed yet.\n\n"
	.size	.L.str.45, 110

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.46, 241

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"bzip2: file name\n`%s'\nis suspiciously (more than %d chars) long.\nTry using a reasonable file name instead.  Sorry! :-)\n"
	.size	.L.str.47, 120

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"\n%s: couldn't allocate enough memory\n"
	.size	.L.str.48, 38

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"bzip2, a block-sorting file compressor.  Version %s.\n   \n   Copyright (C) 1996-2005 by Julian Seward.\n   \n   This program is free software; you can redistribute it and/or modify\n   it under the terms set out in the LICENSE file, which is included\n   in the bzip2-1.0 source distribution.\n   \n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   LICENSE file for more details.\n   \n"
	.size	.L.str.49, 529

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"bzip2, a block-sorting file compressor.  Version %s.\n\n   usage: %s [flags and input files in any order]\n\n   -h --help           print this message\n   -d --decompress     force decompression\n   -z --compress       force compression\n   -k --keep           keep (don't delete) input files\n   -f --force          overwrite existing output files\n   -t --test           test compressed file integrity\n   -c --stdout         output to standard out\n   -q --quiet          suppress noncritical error messages\n   -v --verbose        be verbose (a 2nd -v gives more)\n   -L --license        display software version & license\n   -V --version        display software version & license\n   -s --small          use less memory (at most 2500k)\n   -1 .. -9            set block size to 100k .. 900k\n   --fast              alias for -1\n   --best              alias for -9\n\n   If invoked as `bzip2', default action is to compress.\n              as `bunzip2',  default action is to decompress.\n              as `bzcat', default action is to decompress to stdout.\n\n   If no file names are given, bzip2 compresses or decompresses\n   from standard input to standard output.  You can combine\n   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n\n"
	.size	.L.str.50, 1230

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"%s: %s is redundant in versions 0.9.5 and above\n"
	.size	.L.str.51, 49

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"\n%s: Control-C or similar caught, quitting.\n"
	.size	.L.str.52, 45

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"compress: bad modes\n"
	.size	.L.str.53, 21

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"(stdin)"
	.size	.L.str.54, 8

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"(stdout)"
	.size	.L.str.55, 9

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"%s: There are no files matching `%s'.\n"
	.size	.L.str.56, 39

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"%s: Can't open input file %s: %s.\n"
	.size	.L.str.57, 35

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"%s: Input file %s already has %s suffix.\n"
	.size	.L.str.58, 42

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"%s: Input file %s is a directory.\n"
	.size	.L.str.59, 35

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"%s: Input file %s is not a normal file.\n"
	.size	.L.str.60, 41

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"%s: Output file %s already exists.\n"
	.size	.L.str.61, 36

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"%s: Input file %s has %d other link%s.\n"
	.size	.L.str.62, 40

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"s"
	.size	.L.str.63, 2

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"%s: I won't write compressed data to a terminal.\n"
	.size	.L.str.64, 50

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"%s: For help, type: `%s --help'.\n"
	.size	.L.str.65, 34

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"rb"
	.size	.L.str.66, 3

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"wb"
	.size	.L.str.67, 3

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"%s: Can't create output file %s: %s.\n"
	.size	.L.str.68, 38

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"compress: bad srcMode"
	.size	.L.str.69, 22

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"  %s: "
	.size	.L.str.70, 7

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"\n%s: PANIC -- internal consistency error:\n\t%s\n\tThis is a BUG.  Please report it to me at:\n\tjseward@bzip.org\n"
	.size	.L.str.71, 109

	.type	fileMetaInfo,@object    # @fileMetaInfo
	.local	fileMetaInfo
	.comm	fileMetaInfo,144,8
	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	" "
	.size	.L.str.72, 2

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"\n"
	.size	.L.str.73, 2

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	" no data compressed.\n"
	.size	.L.str.74, 22

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\n"
	.size	.L.str.75, 57

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"compress:unexpected error"
	.size	.L.str.76, 26

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"bzip2: I'm not configured correctly for this platform!\n\tI require Int32, Int16 and Char to have sizes\n\tof 4, 2 and 1 bytes to run properly, and they don't.\n\tProbably you can fix this by defining them correctly,\n\tand recompiling.  Bye!\n"
	.size	.L.str.77, 236

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"\n%s: I/O or other error, bailing out.  Possible reason follows.\n"
	.size	.L.str.78, 65

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"uncompress: bad modes\n"
	.size	.L.str.79, 23

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	".out"
	.size	.L.str.80, 5

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"%s: Can't guess original name for %s -- using %s\n"
	.size	.L.str.81, 50

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"%s: I won't read compressed data from a terminal.\n"
	.size	.L.str.82, 51

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"%s: Can't open input file %s:%s.\n"
	.size	.L.str.83, 34

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"uncompress: bad srcMode"
	.size	.L.str.84, 24

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"done\n"
	.size	.L.str.85, 6

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"not a bzip2 file.\n"
	.size	.L.str.86, 19

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"%s: %s is not a bzip2 file.\n"
	.size	.L.str.87, 29

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"decompress:bzReadGetUnused"
	.size	.L.str.88, 27

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"\n    "
	.size	.L.str.89, 6

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"\n%s: %s: trailing garbage after EOF ignored\n"
	.size	.L.str.90, 45

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"decompress:unexpected error"
	.size	.L.str.91, 28

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"\n%s: Data integrity error when decompressing.\n"
	.size	.L.str.92, 47

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"\n%s: Compressed file ends unexpectedly;\n\tperhaps it is corrupted?  *Possible* reason follows.\n"
	.size	.L.str.93, 95

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"testf: bad modes\n"
	.size	.L.str.94, 18

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"%s: Can't open input %s: %s.\n"
	.size	.L.str.95, 30

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"testf: bad srcMode"
	.size	.L.str.96, 19

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"ok\n"
	.size	.L.str.97, 4

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"test:bzReadGetUnused"
	.size	.L.str.98, 21

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"%s: %s: "
	.size	.L.str.99, 9

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"data integrity (CRC) error in data\n"
	.size	.L.str.100, 36

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"file ends unexpectedly\n"
	.size	.L.str.101, 24

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"bad magic number (file not created by bzip2)\n"
	.size	.L.str.102, 46

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"trailing garbage after EOF ignored\n"
	.size	.L.str.103, 36

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"test:unexpected error"
	.size	.L.str.104, 22


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
