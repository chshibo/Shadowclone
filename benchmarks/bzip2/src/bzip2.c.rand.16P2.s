	.text
	.file	"bzip2.c"
	.globl	fopen_output_safely     # -- Begin function fopen_output_safely
	.p2align	4, 0x90
	.type	fopen_output_safely,@function
fopen_output_safely:                    # @fopen_output_safely
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_fopen_output_safely.40
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_fopen_output_safely.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_fopen_output_safely.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_fopen_output_safely.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_fopen_output_safely.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_fopen_output_safely.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.102
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_fopen_output_safely.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.127
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_fopen_output_safely.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.129
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_fopen_output_safely.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_fopen_output_safely.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.137
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_fopen_output_safely.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.178
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_fopen_output_safely.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.189
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_fopen_output_safely.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.215
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_fopen_output_safely.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.226
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_fopen_output_safely.251
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.251
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_fopen_output_safely.266
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	fopen_output_safely.266
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	fopen_output_safely, .Lfunc_end0-fopen_output_safely
	.cfi_endproc
                                        # -- End function
	.globl	main                    # -- Begin function main
	.p2align	4, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$0, -76(%rbp)
	movl	%edi, -52(%rbp)
	movq	%rsi, -64(%rbp)
	movq	$0, outputHandleJustInCase
	movb	$0, smallMode
	movb	$0, keepInputFiles
	movb	$0, forceOverwrite
	movb	$1, noisy
	movl	$0, verbosity
	movl	$9, blockSize100k
	movb	$0, testFailsExist
	movb	$0, unzFailsExist
	movl	$0, numFileNames
	movl	$0, numFilesProcessed
	movl	$30, workFactor
	movb	$0, deleteOutputOnInterrupt
	movl	$0, exitValue
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	movl	$11, %edi
	movabsq	$mySIGSEGVorSIGBUScatcher, %rsi
	callq	signal
	movl	$7, %edi
	movabsq	$mySIGSEGVorSIGBUScatcher, %rsi
	callq	signal
	movabsq	$inName, %rdi
	movabsq	$.L.str, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str, %rsi
	callq	copyFileName
	movq	-64(%rbp), %rax
	movq	(%rax), %rsi
	movabsq	$progNameReally, %rdi
	callq	copyFileName
	movabsq	$progNameReally, %rax
	movq	%rax, progName
	movq	%rax, -48(%rbp)
.LBB1_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$0, %eax
	je	.LBB1_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	movsbl	(%rax), %eax
	cmpl	$47, %eax
	jne	.LBB1_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, progName
.LBB1_4:                                # %if.end
                                        #   in Loop: Header=BB1_1 Depth=1
	jmp	.LBB1_5
.LBB1_5:                                # %for.inc
                                        #   in Loop: Header=BB1_1 Depth=1
	movq	-48(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB1_1
.LBB1_6:                                # %for.end
	movq	$0, -32(%rbp)
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.1, %rsi
	callq	addFlagsFromEnvVar
	leaq	-32(%rbp), %rdi
	movabsq	$.L.str.2, %rsi
	callq	addFlagsFromEnvVar
	movl	$1, -40(%rbp)
.LBB1_7:                                # %for.cond6
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB1_10
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB1_7 Depth=1
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	snocString
	movq	%rax, -32(%rbp)
# %bb.9:                                # %for.inc12
                                        #   in Loop: Header=BB1_7 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB1_7
.LBB1_10:                               # %for.end13
	movl	$7, longestFileName
	movl	$0, numFileNames
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_11:                               # %for.cond14
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_21
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_14
# %bb.13:                               # %if.then21
                                        #   in Loop: Header=BB1_11 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_20
.LBB1_14:                               # %if.end22
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_17
# %bb.15:                               # %land.lhs.true
                                        #   in Loop: Header=BB1_11 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_17
# %bb.16:                               # %if.then29
                                        #   in Loop: Header=BB1_11 Depth=1
	jmp	.LBB1_20
.LBB1_17:                               # %if.end30
                                        #   in Loop: Header=BB1_11 Depth=1
	movl	numFileNames, %eax
	addl	$1, %eax
	movl	%eax, numFileNames
	movl	longestFileName, %ebx
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	cmpl	%eax, %ebx
	jge	.LBB1_19
# %bb.18:                               # %if.then37
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	strlen
	movl	%eax, longestFileName
.LBB1_19:                               # %if.end41
                                        #   in Loop: Header=BB1_11 Depth=1
	jmp	.LBB1_20
.LBB1_20:                               # %for.inc42
                                        #   in Loop: Header=BB1_11 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_11
.LBB1_21:                               # %for.end43
	cmpl	$0, numFileNames
	jne	.LBB1_23
# %bb.22:                               # %if.then46
	movl	$1, srcMode
	jmp	.LBB1_24
.LBB1_23:                               # %if.else
	movl	$3, srcMode
.LBB1_24:                               # %if.end47
	movl	$1, opMode
	movq	progName, %rdi
	movabsq	$.L.str.4, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_26
# %bb.25:                               # %lor.lhs.false
	movq	progName, %rdi
	movabsq	$.L.str.5, %rsi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB1_27
.LBB1_26:                               # %if.then54
	movl	$2, opMode
.LBB1_27:                               # %if.end55
	movq	progName, %rdi
	movabsq	$.L.str.6, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.28:                               # %lor.lhs.false59
	movq	progName, %rdi
	movabsq	$.L.str.7, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.29:                               # %lor.lhs.false63
	movq	progName, %rdi
	movabsq	$.L.str.8, %rsi
	callq	strstr
	cmpq	$0, %rax
	jne	.LBB1_31
# %bb.30:                               # %lor.lhs.false67
	movq	progName, %rdi
	movabsq	$.L.str.9, %rsi
	callq	strstr
	cmpq	$0, %rax
	je	.LBB1_32
.LBB1_31:                               # %if.then71
	movl	$2, opMode
	movl	numFileNames, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, srcMode
.LBB1_32:                               # %if.end74
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_33:                               # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_39 Depth 2
	cmpq	$0, -24(%rbp)
	je	.LBB1_68
# %bb.34:                               # %for.body78
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_36
# %bb.35:                               # %if.then83
	jmp	.LBB1_69
.LBB1_36:                               # %if.end84
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_66
# %bb.37:                               # %land.lhs.true90
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	1(%rax), %eax
	cmpl	$45, %eax
	je	.LBB1_66
# %bb.38:                               # %if.then96
                                        #   in Loop: Header=BB1_33 Depth=1
	movl	$1, -36(%rbp)
.LBB1_39:                               # %for.cond97
                                        #   Parent Loop BB1_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB1_65
# %bb.40:                               # %for.body104
                                        #   in Loop: Header=BB1_39 Depth=2
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	addl	$-49, %eax
	movl	%eax, %ecx
	subl	$73, %ecx
	ja	.LBB1_62
# %bb.41:                               # %for.body104
                                        #   in Loop: Header=BB1_39 Depth=2
	movq	.LJTI1_0(,%rax,8), %rax
	jmpq	*%rax
.LBB1_42:                               # %sw.bb
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, srcMode
	jmp	.LBB1_63
.LBB1_43:                               # %sw.bb109
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, opMode
	jmp	.LBB1_63
.LBB1_44:                               # %sw.bb110
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$1, opMode
	jmp	.LBB1_63
.LBB1_45:                               # %sw.bb111
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, forceOverwrite
	jmp	.LBB1_63
.LBB1_46:                               # %sw.bb112
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$3, opMode
	jmp	.LBB1_63
.LBB1_47:                               # %sw.bb113
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, keepInputFiles
	jmp	.LBB1_63
.LBB1_48:                               # %sw.bb114
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$1, smallMode
	jmp	.LBB1_63
.LBB1_49:                               # %sw.bb115
                                        #   in Loop: Header=BB1_39 Depth=2
	movb	$0, noisy
	jmp	.LBB1_63
.LBB1_50:                               # %sw.bb116
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$1, blockSize100k
	jmp	.LBB1_63
.LBB1_51:                               # %sw.bb117
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$2, blockSize100k
	jmp	.LBB1_63
.LBB1_52:                               # %sw.bb118
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$3, blockSize100k
	jmp	.LBB1_63
.LBB1_53:                               # %sw.bb119
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$4, blockSize100k
	jmp	.LBB1_63
.LBB1_54:                               # %sw.bb120
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$5, blockSize100k
	jmp	.LBB1_63
.LBB1_55:                               # %sw.bb121
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$6, blockSize100k
	jmp	.LBB1_63
.LBB1_56:                               # %sw.bb122
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$7, blockSize100k
	jmp	.LBB1_63
.LBB1_57:                               # %sw.bb123
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$8, blockSize100k
	jmp	.LBB1_63
.LBB1_58:                               # %sw.bb124
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	$9, blockSize100k
	jmp	.LBB1_63
.LBB1_59:                               # %sw.bb125
                                        #   in Loop: Header=BB1_39 Depth=2
	callq	license
	jmp	.LBB1_63
.LBB1_60:                               # %sw.bb126
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	verbosity, %eax
	addl	$1, %eax
	movl	%eax, verbosity
	jmp	.LBB1_63
.LBB1_61:                               # %sw.bb128
	movq	progName, %rdi
	callq	usage
	xorl	%edi, %edi
	callq	exit
.LBB1_62:                               # %sw.default
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movabsq	$.L.str.10, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	usage
	movl	$1, %edi
	callq	exit
.LBB1_63:                               # %sw.epilog
                                        #   in Loop: Header=BB1_39 Depth=2
	jmp	.LBB1_64
.LBB1_64:                               # %for.inc131
                                        #   in Loop: Header=BB1_39 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB1_39
.LBB1_65:                               # %for.end133
                                        #   in Loop: Header=BB1_33 Depth=1
	jmp	.LBB1_66
.LBB1_66:                               # %if.end134
                                        #   in Loop: Header=BB1_33 Depth=1
	jmp	.LBB1_67
.LBB1_67:                               # %for.inc135
                                        #   in Loop: Header=BB1_33 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_33
.LBB1_68:                               # %for.end137.loopexit
	jmp	.LBB1_69
.LBB1_69:                               # %for.end137
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_70:                               # %for.cond138
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_128
# %bb.71:                               # %for.body141
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_73
# %bb.72:                               # %if.then146
	jmp	.LBB1_129
.LBB1_73:                               # %if.end147
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.11, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_75
# %bb.74:                               # %if.then152
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$2, srcMode
	jmp	.LBB1_126
.LBB1_75:                               # %if.else153
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.12, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_77
# %bb.76:                               # %if.then158
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$2, opMode
	jmp	.LBB1_125
.LBB1_77:                               # %if.else159
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.13, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_79
# %bb.78:                               # %if.then164
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, opMode
	jmp	.LBB1_124
.LBB1_79:                               # %if.else165
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.14, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_81
# %bb.80:                               # %if.then170
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, forceOverwrite
	jmp	.LBB1_123
.LBB1_81:                               # %if.else171
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.15, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_83
# %bb.82:                               # %if.then176
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$3, opMode
	jmp	.LBB1_122
.LBB1_83:                               # %if.else177
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.16, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_85
# %bb.84:                               # %if.then182
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, keepInputFiles
	jmp	.LBB1_121
.LBB1_85:                               # %if.else183
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.17, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_87
# %bb.86:                               # %if.then188
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$1, smallMode
	jmp	.LBB1_120
.LBB1_87:                               # %if.else189
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.18, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_89
# %bb.88:                               # %if.then194
                                        #   in Loop: Header=BB1_70 Depth=1
	movb	$0, noisy
	jmp	.LBB1_119
.LBB1_89:                               # %if.else195
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.19, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_91
# %bb.90:                               # %if.then200
                                        #   in Loop: Header=BB1_70 Depth=1
	callq	license
	jmp	.LBB1_118
.LBB1_91:                               # %if.else201
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.20, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_93
# %bb.92:                               # %if.then206
                                        #   in Loop: Header=BB1_70 Depth=1
	callq	license
	jmp	.LBB1_117
.LBB1_93:                               # %if.else207
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.21, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_95
# %bb.94:                               # %if.then212
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, workFactor
	jmp	.LBB1_116
.LBB1_95:                               # %if.else213
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.22, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_97
# %bb.96:                               # %if.then218
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	redundant
	jmp	.LBB1_115
.LBB1_97:                               # %if.else220
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.23, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_99
# %bb.98:                               # %if.then225
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	redundant
	jmp	.LBB1_114
.LBB1_99:                               # %if.else227
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.24, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_101
# %bb.100:                              # %if.then232
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$1, blockSize100k
	jmp	.LBB1_113
.LBB1_101:                              # %if.else233
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.25, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_103
# %bb.102:                              # %if.then238
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	$9, blockSize100k
	jmp	.LBB1_112
.LBB1_103:                              # %if.else239
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.26, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_105
# %bb.104:                              # %if.then244
                                        #   in Loop: Header=BB1_70 Depth=1
	movl	verbosity, %eax
	addl	$1, %eax
	movl	%eax, verbosity
	jmp	.LBB1_111
.LBB1_105:                              # %if.else246
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.27, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_107
# %bb.106:                              # %if.then251
	movq	progName, %rdi
	callq	usage
	xorl	%edi, %edi
	callq	exit
.LBB1_107:                              # %if.else252
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$.L.str.3, %rsi
	movl	$2, %edx
	callq	strncmp
	cmpl	$0, %eax
	jne	.LBB1_109
# %bb.108:                              # %if.then257
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-24(%rbp), %rax
	movq	(%rax), %rcx
	movabsq	$.L.str.10, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	usage
	movl	$1, %edi
	callq	exit
.LBB1_109:                              # %if.end260
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_110
.LBB1_110:                              # %if.end261
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_111
.LBB1_111:                              # %if.end262
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_112
.LBB1_112:                              # %if.end263
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_113
.LBB1_113:                              # %if.end264
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_114
.LBB1_114:                              # %if.end265
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_115
.LBB1_115:                              # %if.end266
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_116
.LBB1_116:                              # %if.end267
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_117
.LBB1_117:                              # %if.end268
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_118
.LBB1_118:                              # %if.end269
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_119
.LBB1_119:                              # %if.end270
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_120
.LBB1_120:                              # %if.end271
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_121
.LBB1_121:                              # %if.end272
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_122
.LBB1_122:                              # %if.end273
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_123
.LBB1_123:                              # %if.end274
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_124
.LBB1_124:                              # %if.end275
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_125
.LBB1_125:                              # %if.end276
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_126
.LBB1_126:                              # %if.end277
                                        #   in Loop: Header=BB1_70 Depth=1
	jmp	.LBB1_127
.LBB1_127:                              # %for.inc278
                                        #   in Loop: Header=BB1_70 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_70
.LBB1_128:                              # %for.end280.loopexit
	jmp	.LBB1_129
.LBB1_129:                              # %for.end280
	cmpl	$4, verbosity
	jle	.LBB1_131
# %bb.130:                              # %if.then283
	movl	$4, verbosity
.LBB1_131:                              # %if.end284
	cmpl	$1, opMode
	jne	.LBB1_135
# %bb.132:                              # %land.lhs.true287
	movzbl	smallMode, %eax
	cmpl	$0, %eax
	je	.LBB1_135
# %bb.133:                              # %land.lhs.true290
	cmpl	$2, blockSize100k
	jle	.LBB1_135
# %bb.134:                              # %if.then293
	movl	$2, blockSize100k
.LBB1_135:                              # %if.end294
	cmpl	$3, opMode
	jne	.LBB1_138
# %bb.136:                              # %land.lhs.true297
	cmpl	$2, srcMode
	jne	.LBB1_138
# %bb.137:                              # %if.then300
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.28, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	exit
.LBB1_138:                              # %if.end302
	cmpl	$2, srcMode
	jne	.LBB1_141
# %bb.139:                              # %land.lhs.true305
	cmpl	$0, numFileNames
	jne	.LBB1_141
# %bb.140:                              # %if.then308
	movl	$1, srcMode
.LBB1_141:                              # %if.end309
	cmpl	$1, opMode
	je	.LBB1_143
# %bb.142:                              # %if.then312
	movl	$0, blockSize100k
.LBB1_143:                              # %if.end313
	cmpl	$3, srcMode
	jne	.LBB1_145
# %bb.144:                              # %if.then316
	movl	$2, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
	movl	$15, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
	movl	$1, %edi
	movabsq	$mySignalCatcher, %rsi
	callq	signal
.LBB1_145:                              # %if.end320
	cmpl	$1, opMode
	jne	.LBB1_159
# %bb.146:                              # %if.then323
	cmpl	$1, srcMode
	jne	.LBB1_148
# %bb.147:                              # %if.then326
	xorl	%edi, %edi
	callq	compress
	jmp	.LBB1_158
.LBB1_148:                              # %if.else327
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_149:                              # %for.cond328
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_157
# %bb.150:                              # %for.body331
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_152
# %bb.151:                              # %if.then336
                                        #   in Loop: Header=BB1_149 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_156
.LBB1_152:                              # %if.end337
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_155
# %bb.153:                              # %land.lhs.true343
                                        #   in Loop: Header=BB1_149 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_155
# %bb.154:                              # %if.then346
                                        #   in Loop: Header=BB1_149 Depth=1
	jmp	.LBB1_156
.LBB1_155:                              # %if.end347
                                        #   in Loop: Header=BB1_149 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	compress
.LBB1_156:                              # %for.inc350
                                        #   in Loop: Header=BB1_149 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_149
.LBB1_157:                              # %for.end352
	jmp	.LBB1_158
.LBB1_158:                              # %if.end353
	jmp	.LBB1_192
.LBB1_159:                              # %if.else354
	cmpl	$2, opMode
	jne	.LBB1_175
# %bb.160:                              # %if.then357
	movb	$0, unzFailsExist
	cmpl	$1, srcMode
	jne	.LBB1_162
# %bb.161:                              # %if.then360
	xorl	%edi, %edi
	callq	uncompress
	jmp	.LBB1_172
.LBB1_162:                              # %if.else361
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_163:                              # %for.cond362
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_171
# %bb.164:                              # %for.body365
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_166
# %bb.165:                              # %if.then370
                                        #   in Loop: Header=BB1_163 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_170
.LBB1_166:                              # %if.end371
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_169
# %bb.167:                              # %land.lhs.true377
                                        #   in Loop: Header=BB1_163 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_169
# %bb.168:                              # %if.then380
                                        #   in Loop: Header=BB1_163 Depth=1
	jmp	.LBB1_170
.LBB1_169:                              # %if.end381
                                        #   in Loop: Header=BB1_163 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	uncompress
.LBB1_170:                              # %for.inc384
                                        #   in Loop: Header=BB1_163 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_163
.LBB1_171:                              # %for.end386
	jmp	.LBB1_172
.LBB1_172:                              # %if.end387
	cmpb	$0, unzFailsExist
	je	.LBB1_174
# %bb.173:                              # %if.then389
	movl	$2, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB1_174:                              # %if.end390
	jmp	.LBB1_191
.LBB1_175:                              # %if.else391
	movb	$0, testFailsExist
	cmpl	$1, srcMode
	jne	.LBB1_177
# %bb.176:                              # %if.then394
	xorl	%edi, %edi
	callq	testf
	jmp	.LBB1_187
.LBB1_177:                              # %if.else395
	movb	$1, -9(%rbp)
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_178:                              # %for.cond396
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_186
# %bb.179:                              # %for.body399
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movl	$.L.str.3, %esi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB1_181
# %bb.180:                              # %if.then404
                                        #   in Loop: Header=BB1_178 Depth=1
	movb	$0, -9(%rbp)
	jmp	.LBB1_185
.LBB1_181:                              # %if.end405
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movsbl	(%rax), %eax
	cmpl	$45, %eax
	jne	.LBB1_184
# %bb.182:                              # %land.lhs.true411
                                        #   in Loop: Header=BB1_178 Depth=1
	movzbl	-9(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB1_184
# %bb.183:                              # %if.then414
                                        #   in Loop: Header=BB1_178 Depth=1
	jmp	.LBB1_185
.LBB1_184:                              # %if.end415
                                        #   in Loop: Header=BB1_178 Depth=1
	movl	numFilesProcessed, %eax
	addl	$1, %eax
	movl	%eax, numFilesProcessed
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	testf
.LBB1_185:                              # %for.inc418
                                        #   in Loop: Header=BB1_178 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_178
.LBB1_186:                              # %for.end420
	jmp	.LBB1_187
.LBB1_187:                              # %if.end421
	movzbl	testFailsExist, %eax
	cmpl	$0, %eax
	je	.LBB1_190
# %bb.188:                              # %land.lhs.true424
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB1_190
# %bb.189:                              # %if.then427
	movq	stderr, %rdi
	movabsq	$.L.str.29, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$2, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB1_190:                              # %if.end429
	jmp	.LBB1_191
.LBB1_191:                              # %if.end430
	jmp	.LBB1_192
.LBB1_192:                              # %if.end431
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB1_193:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpq	$0, -24(%rbp)
	je	.LBB1_197
# %bb.194:                              # %while.body
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-24(%rbp), %rax
	cmpq	$0, (%rax)
	je	.LBB1_196
# %bb.195:                              # %if.then438
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	callq	free
.LBB1_196:                              # %if.end440
                                        #   in Loop: Header=BB1_193 Depth=1
	movq	-24(%rbp), %rdi
	callq	free
	movq	-72(%rbp), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB1_193
.LBB1_197:                              # %while.end
	movl	exitValue, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	main, .Lfunc_end1-main
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI1_0:
	.quad	.LBB1_50
	.quad	.LBB1_51
	.quad	.LBB1_52
	.quad	.LBB1_53
	.quad	.LBB1_54
	.quad	.LBB1_55
	.quad	.LBB1_56
	.quad	.LBB1_57
	.quad	.LBB1_58
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_59
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_59
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_42
	.quad	.LBB1_43
	.quad	.LBB1_62
	.quad	.LBB1_45
	.quad	.LBB1_62
	.quad	.LBB1_61
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_47
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_49
	.quad	.LBB1_62
	.quad	.LBB1_48
	.quad	.LBB1_46
	.quad	.LBB1_62
	.quad	.LBB1_60
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_62
	.quad	.LBB1_44
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mySIGSEGVorSIGBUScatcher
	.type	mySIGSEGVorSIGBUScatcher,@function
mySIGSEGVorSIGBUScatcher:               # @mySIGSEGVorSIGBUScatcher
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	cmpl	$1, opMode
	jne	.LBB2_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.36, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB2_3
.LBB2_2:                                # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.37, %rsi
	movb	$0, %al
	callq	fprintf
.LBB2_3:                                # %if.end
	callq	showFileNames
	cmpl	$1, opMode
	jne	.LBB2_5
# %bb.4:                                # %if.then3
	movl	$3, %edi
	callq	cleanUpAndFail
.LBB2_5:                                # %if.else4
	callq	cadvise
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end2:
	.size	mySIGSEGVorSIGBUScatcher, .Lfunc_end2-mySIGSEGVorSIGBUScatcher
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copyFileName
	.type	copyFileName,@function
copyFileName:                           # @copyFileName
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_2
# %bb.1:                                # %func_copyFileName.25
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyFileName.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_copyFileName.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyFileName.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	copyFileName, .Lfunc_end3-copyFileName
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar
	.type	addFlagsFromEnvVar,@function
addFlagsFromEnvVar:                     # @addFlagsFromEnvVar
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_addFlagsFromEnvVar.10
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.10
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_addFlagsFromEnvVar.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_addFlagsFromEnvVar.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.48
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_addFlagsFromEnvVar.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_addFlagsFromEnvVar.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_addFlagsFromEnvVar.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.179
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_addFlagsFromEnvVar.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.187
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_addFlagsFromEnvVar.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_addFlagsFromEnvVar.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.234
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_addFlagsFromEnvVar.235
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.235
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_addFlagsFromEnvVar.238
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.238
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_addFlagsFromEnvVar.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.246
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_addFlagsFromEnvVar.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.248
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_addFlagsFromEnvVar.275
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.275
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_addFlagsFromEnvVar.288
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.288
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_addFlagsFromEnvVar.289
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	addFlagsFromEnvVar.289
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	addFlagsFromEnvVar, .Lfunc_end4-addFlagsFromEnvVar
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString
	.type	snocString,@function
snocString:                             # @snocString
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_snocString.69
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_snocString.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_snocString.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.85
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_snocString.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.150
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_snocString.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.166
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_snocString.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.167
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_snocString.191
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.191
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_snocString.202
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.202
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_snocString.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.237
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_snocString.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.244
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_snocString.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.253
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_snocString.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.261
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_snocString.277
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.277
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_snocString.286
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.286
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_snocString.287
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.287
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_snocString.290
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	snocString.290
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	snocString, .Lfunc_end5-snocString
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function license
	.type	license,@function
license:                                # @license
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	stderr, %rbx
	callq	BZ2_bzlibVersion
	movq	%rbx, %rdi
	movabsq	$.L.str.49, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	license, .Lfunc_end6-license
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function usage
	.type	usage,@function
usage:                                  # @usage
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, -16(%rbp)
	movq	stderr, %rbx
	callq	BZ2_bzlibVersion
	movq	-16(%rbp), %rcx
	movq	%rbx, %rdi
	movabsq	$.L.str.50, %rsi
	movq	%rax, %rdx
	movb	$0, %al
	callq	fprintf
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	usage, .Lfunc_end7-usage
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function redundant
	.type	redundant,@function
redundant:                              # @redundant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-8(%rbp), %rcx
	movabsq	$.L.str.51, %rsi
	movb	$0, %al
	callq	fprintf
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	redundant, .Lfunc_end8-redundant
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mySignalCatcher
	.type	mySignalCatcher,@function
mySignalCatcher:                        # @mySignalCatcher
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.52, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end9:
	.size	mySignalCatcher, .Lfunc_end9-mySignalCatcher
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress
	.type	compress,@function
compress:                               # @compress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_17
# %bb.1:                                # %func_compress.4
	movq	%rbx, %rdi
	callq	compress.4
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_compress.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_compress.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_compress.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_compress.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.111
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_compress.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.162
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_compress.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.186
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_compress.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.205
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %func_compress.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.212
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_10:                              # %func_compress.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.213
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_11:                              # %func_compress.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_12:                              # %func_compress.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.223
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_13:                              # %func_compress.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.225
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_14:                              # %func_compress.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.258
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_15:                              # %func_compress.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.260
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_16:                              # %func_compress.274
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	compress.274
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB10_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB10_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB10_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB10_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB10_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB10_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB10_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB10_15
	jmp	.LBB10_16
.Lfunc_end10:
	.size	compress, .Lfunc_end10-compress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress
	.type	uncompress,@function
uncompress:                             # @uncompress
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_17
# %bb.1:                                # %func_uncompress.6
	movq	%rbx, %rdi
	callq	uncompress.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_uncompress.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_uncompress.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.19
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_uncompress.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_uncompress.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_uncompress.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_uncompress.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_uncompress.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %func_uncompress.140
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.140
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_10:                              # %func_uncompress.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.164
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_11:                              # %func_uncompress.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.169
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_12:                              # %func_uncompress.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_13:                              # %func_uncompress.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.181
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_14:                              # %func_uncompress.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.184
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_15:                              # %func_uncompress.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.193
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_16:                              # %func_uncompress.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uncompress.199
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB11_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB11_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB11_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB11_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB11_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB11_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB11_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB11_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB11_15
	jmp	.LBB11_16
.Lfunc_end11:
	.size	uncompress, .Lfunc_end11-uncompress
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function setExit
	.type	setExit,@function
setExit:                                # @setExit
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	cmpl	exitValue, %eax
	jle	.LBB12_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %eax
	movl	%eax, exitValue
.LBB12_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end12:
	.size	setExit, .Lfunc_end12-setExit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf
	.type	testf,@function
testf:                                  # @testf
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_17
# %bb.1:                                # %func_testf.99
	movq	%rbx, %rdi
	callq	testf.99
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_testf.110
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.110
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_testf.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.122
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_testf.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_testf.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.139
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_testf.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_testf.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.152
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_testf.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.204
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %func_testf.210
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.210
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_testf.232
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.232
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_11:                              # %func_testf.250
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.250
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_12:                              # %func_testf.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.257
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_13:                              # %func_testf.268
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_14:                              # %func_testf.272
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.272
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_15:                              # %func_testf.273
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.273
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_16:                              # %func_testf.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testf.282
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB13_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB13_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB13_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB13_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB13_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB13_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB13_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB13_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB13_15
	jmp	.LBB13_16
.Lfunc_end13:
	.size	testf, .Lfunc_end13-testf
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function showFileNames
	.type	showFileNames,@function
showFileNames:                          # @showFileNames
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB14_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movabsq	$.L.str.38, %rsi
	movabsq	$inName, %rdx
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB14_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	showFileNames, .Lfunc_end14-showFileNames
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail
	.type	cleanUpAndFail,@function
cleanUpAndFail:                         # @cleanUpAndFail
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_cleanUpAndFail.21
	movl	%ebx, %edi
	callq	cleanUpAndFail.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_cleanUpAndFail.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_cleanUpAndFail.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_cleanUpAndFail.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_cleanUpAndFail.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_cleanUpAndFail.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	cleanUpAndFail.126
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	cleanUpAndFail, .Lfunc_end15-cleanUpAndFail
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cadvise
	.type	cadvise,@function
cadvise:                                # @cadvise
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB16_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movabsq	$.L.str.46, %rsi
	movb	$0, %al
	callq	fprintf
.LBB16_2:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	cadvise, .Lfunc_end16-cadvise
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mkCell
	.type	mkCell,@function
mkCell:                                 # @mkCell
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$16, %edi
	callq	myMalloc
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movq	$0, (%rax)
	movq	-8(%rbp), %rax
	movq	$0, 8(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	mkCell, .Lfunc_end17-mkCell
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc
	.type	myMalloc,@function
myMalloc:                               # @myMalloc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_2
# %bb.1:                                # %func_myMalloc.3
	movl	%ebx, %edi
	callq	myMalloc.3
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_myMalloc.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	myMalloc.16
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	myMalloc, .Lfunc_end18-myMalloc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function outOfMemory
	.type	outOfMemory,@function
outOfMemory:                            # @outOfMemory
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.48, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end19:
	.size	outOfMemory, .Lfunc_end19-outOfMemory
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function panic
	.type	panic,@function
panic:                                  # @panic
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	-8(%rbp), %rcx
	movabsq	$.L.str.71, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	movl	$3, %edi
	callq	cleanUpAndFail
.Lfunc_end20:
	.size	panic, .Lfunc_end20-panic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function containsDubiousChars
	.type	containsDubiousChars,@function
containsDubiousChars:                   # @containsDubiousChars
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	containsDubiousChars, .Lfunc_end21-containsDubiousChars
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists
	.type	fileExists,@function
fileExists:                             # @fileExists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_7
# %bb.1:                                # %func_fileExists.13
	movq	%rbx, %rdi
	callq	fileExists.13
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_fileExists.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.29
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_fileExists.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.37
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_fileExists.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.54
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_fileExists.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.58
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_fileExists.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fileExists.64
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
	jmp	.LBB22_6
.Lfunc_end22:
	.size	fileExists, .Lfunc_end22-fileExists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix
	.type	hasSuffix,@function
hasSuffix:                              # @hasSuffix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_17
# %bb.1:                                # %func_hasSuffix.1
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.1
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_hasSuffix.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.39
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_hasSuffix.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.51
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_hasSuffix.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.57
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_hasSuffix.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.75
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_hasSuffix.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.83
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_hasSuffix.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.93
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_hasSuffix.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.103
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %func_hasSuffix.106
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.106
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              # %func_hasSuffix.143
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.143
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_11:                              # %func_hasSuffix.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.157
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_12:                              # %func_hasSuffix.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.175
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_13:                              # %func_hasSuffix.185
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.185
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_14:                              # %func_hasSuffix.195
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.195
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_15:                              # %func_hasSuffix.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.221
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_16:                              # %func_hasSuffix.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	hasSuffix.228
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB23_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB23_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB23_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB23_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB23_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB23_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB23_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB23_15
	jmp	.LBB23_16
.Lfunc_end23:
	.size	hasSuffix, .Lfunc_end23-hasSuffix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile
	.type	notAStandardFile,@function
notAStandardFile:                       # @notAStandardFile
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_17
# %bb.1:                                # %func_notAStandardFile.95
	movq	%rbx, %rdi
	callq	notAStandardFile.95
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_notAStandardFile.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.98
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_notAStandardFile.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.107
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_notAStandardFile.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.116
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_notAStandardFile.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.134
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_notAStandardFile.159
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.159
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_notAStandardFile.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.176
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_notAStandardFile.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.198
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %func_notAStandardFile.242
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.242
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_10:                              # %func_notAStandardFile.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.245
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_11:                              # %func_notAStandardFile.256
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.256
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_12:                              # %func_notAStandardFile.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.262
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_13:                              # %func_notAStandardFile.265
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.265
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_14:                              # %func_notAStandardFile.276
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.276
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_15:                              # %func_notAStandardFile.278
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.278
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_16:                              # %func_notAStandardFile.294
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	notAStandardFile.294
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB24_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB24_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB24_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB24_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB24_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB24_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB24_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB24_15
	jmp	.LBB24_16
.Lfunc_end24:
	.size	notAStandardFile, .Lfunc_end24-notAStandardFile
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks
	.type	countHardLinks,@function
countHardLinks:                         # @countHardLinks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_17
# %bb.1:                                # %func_countHardLinks.18
	movq	%rbx, %rdi
	callq	countHardLinks.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_countHardLinks.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.30
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_countHardLinks.78
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_countHardLinks.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.90
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_countHardLinks.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_countHardLinks.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_countHardLinks.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.174
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_countHardLinks.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.182
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %func_countHardLinks.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.209
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_10:                              # %func_countHardLinks.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.214
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_11:                              # %func_countHardLinks.217
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.217
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_12:                              # %func_countHardLinks.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.224
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_13:                              # %func_countHardLinks.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.243
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_14:                              # %func_countHardLinks.271
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.271
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_15:                              # %func_countHardLinks.295
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.295
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_16:                              # %func_countHardLinks.296
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	countHardLinks.296
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB25_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB25_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB25_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB25_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB25_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB25_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB25_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB25_15
	jmp	.LBB25_16
.Lfunc_end25:
	.size	countHardLinks, .Lfunc_end25-countHardLinks
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo
	.type	saveInputFileMetaInfo,@function
saveInputFileMetaInfo:                  # @saveInputFileMetaInfo
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_saveInputFileMetaInfo.2
	movq	%rbx, %rdi
	callq	saveInputFileMetaInfo.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_saveInputFileMetaInfo.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	saveInputFileMetaInfo.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	saveInputFileMetaInfo, .Lfunc_end26-saveInputFileMetaInfo
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad
	.type	pad,@function
pad:                                    # @pad
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_pad.45
	movq	%rbx, %rdi
	callq	pad.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_pad.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	pad.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	pad, .Lfunc_end27-pad
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressStream
	.type	compressStream,@function
compressStream:                         # @compressStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_17
# %bb.1:                                # %func_compressStream.5
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_compressStream.9
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_compressStream.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_compressStream.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_compressStream.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.124
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_compressStream.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.158
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_compressStream.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.161
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_compressStream.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.171
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %func_compressStream.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.177
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_10:                              # %func_compressStream.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.194
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_11:                              # %func_compressStream.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.219
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_12:                              # %func_compressStream.239
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.239
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_13:                              # %func_compressStream.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.254
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_14:                              # %func_compressStream.255
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.255
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_15:                              # %func_compressStream.267
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.267
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_16:                              # %func_compressStream.284
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compressStream.284
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB28_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB28_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB28_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB28_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB28_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB28_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB28_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB28_15
	jmp	.LBB28_16
.Lfunc_end28:
	.size	compressStream, .Lfunc_end28-compressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile
	.type	applySavedMetaInfoToOutputFile,@function
applySavedMetaInfoToOutputFile:         # @applySavedMetaInfoToOutputFile
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB29_7
# %bb.1:                                # %func_applySavedMetaInfoToOutputFile.104
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.104
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_applySavedMetaInfoToOutputFile.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.119
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_applySavedMetaInfoToOutputFile.149
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.149
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_applySavedMetaInfoToOutputFile.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.154
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %func_applySavedMetaInfoToOutputFile.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.156
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_applySavedMetaInfoToOutputFile.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	applySavedMetaInfoToOutputFile.160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB29_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB29_5
	jmp	.LBB29_6
.Lfunc_end29:
	.size	applySavedMetaInfoToOutputFile, .Lfunc_end29-applySavedMetaInfoToOutputFile
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ioError
	.type	ioError,@function
ioError:                                # @ioError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.78, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	callq	showFileNames
	movl	$1, %edi
	callq	cleanUpAndFail
.Lfunc_end30:
	.size	ioError, .Lfunc_end30-ioError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof
	.type	myfeof,@function
myfeof:                                 # @myfeof
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_7
# %bb.1:                                # %func_myfeof.11
	movq	%rbx, %rdi
	callq	myfeof.11
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_myfeof.20
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.20
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_myfeof.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.36
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_myfeof.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.66
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_myfeof.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.105
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_myfeof.112
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	myfeof.112
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
	jmp	.LBB31_6
.Lfunc_end31:
	.size	myfeof, .Lfunc_end31-myfeof
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s
	.type	uInt64_from_UInt32s,@function
uInt64_from_UInt32s:                    # @uInt64_from_UInt32s
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB32_7
# %bb.1:                                # %func_uInt64_from_UInt32s.15
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_uInt64_from_UInt32s.23
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_uInt64_from_UInt32s.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.74
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_uInt64_from_UInt32s.79
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_uInt64_from_UInt32s.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_uInt64_from_UInt32s.97
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	uInt64_from_UInt32s.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
	jmp	.LBB32_6
.Lfunc_end32:
	.size	uInt64_from_UInt32s, .Lfunc_end32-uInt64_from_UInt32s
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_to_double
	.type	uInt64_to_double,@function
uInt64_to_double:                       # @uInt64_to_double
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB33_17
# %bb.1:                                # %func_uInt64_to_double.8
	movq	%rbx, %rdi
	callq	uInt64_to_double.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_uInt64_to_double.12
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.12
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_uInt64_to_double.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_uInt64_to_double.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_uInt64_to_double.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_uInt64_to_double.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_uInt64_to_double.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.96
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_uInt64_to_double.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.123
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %func_uInt64_to_double.145
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_10:                              # %func_uInt64_to_double.201
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.201
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_11:                              # %func_uInt64_to_double.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.240
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_12:                              # %func_uInt64_to_double.263
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.263
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_13:                              # %func_uInt64_to_double.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_14:                              # %func_uInt64_to_double.269
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.269
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_15:                              # %func_uInt64_to_double.283
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.283
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_16:                              # %func_uInt64_to_double.293
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_to_double.293
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB33_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB33_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB33_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB33_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB33_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB33_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB33_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB33_15
	jmp	.LBB33_16
.Lfunc_end33:
	.size	uInt64_to_double, .Lfunc_end33-uInt64_to_double
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii
	.type	uInt64_toAscii,@function
uInt64_toAscii:                         # @uInt64_toAscii
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB34_17
# %bb.1:                                # %func_uInt64_toAscii.109
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.109
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_uInt64_toAscii.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.120
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_uInt64_toAscii.132
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.132
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_uInt64_toAscii.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.138
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_uInt64_toAscii.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.163
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_uInt64_toAscii.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.168
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_uInt64_toAscii.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_uInt64_toAscii.196
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.196
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %func_uInt64_toAscii.229
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.229
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_10:                              # %func_uInt64_toAscii.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.231
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_11:                              # %func_uInt64_toAscii.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.241
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_12:                              # %func_uInt64_toAscii.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.259
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_13:                              # %func_uInt64_toAscii.280
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.280
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_14:                              # %func_uInt64_toAscii.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.281
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_15:                              # %func_uInt64_toAscii.291
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.291
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_16:                              # %func_uInt64_toAscii.298
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uInt64_toAscii.298
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB34_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB34_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB34_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB34_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB34_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB34_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB34_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB34_15
	jmp	.LBB34_16
.Lfunc_end34:
	.size	uInt64_toAscii, .Lfunc_end34-uInt64_toAscii
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function configError
	.type	configError,@function
configError:                            # @configError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movabsq	$.L.str.77, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$3, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end35:
	.size	configError, .Lfunc_end35-configError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10
	.type	uInt64_qrm10,@function
uInt64_qrm10:                           # @uInt64_qrm10
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_17
# %bb.1:                                # %func_uInt64_qrm10.32
	movq	%rbx, %rdi
	callq	uInt64_qrm10.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_uInt64_qrm10.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_uInt64_qrm10.84
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.84
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_uInt64_qrm10.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.89
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_uInt64_qrm10.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_uInt64_qrm10.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.133
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_uInt64_qrm10.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.147
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_uInt64_qrm10.151
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.151
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %func_uInt64_qrm10.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_10:                              # %func_uInt64_qrm10.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.172
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_11:                              # %func_uInt64_qrm10.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.173
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_12:                              # %func_uInt64_qrm10.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.206
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_13:                              # %func_uInt64_qrm10.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.211
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_14:                              # %func_uInt64_qrm10.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.222
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_15:                              # %func_uInt64_qrm10.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.227
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_16:                              # %func_uInt64_qrm10.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_qrm10.249
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB36_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB36_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB36_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB36_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB36_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB36_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB36_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB36_15
	jmp	.LBB36_16
.Lfunc_end36:
	.size	uInt64_qrm10, .Lfunc_end36-uInt64_qrm10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero
	.type	uInt64_isZero,@function
uInt64_isZero:                          # @uInt64_isZero
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB37_7
# %bb.1:                                # %func_uInt64_isZero.14
	movq	%rbx, %rdi
	callq	uInt64_isZero.14
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_uInt64_isZero.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.22
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_uInt64_isZero.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.31
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_uInt64_isZero.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.42
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_uInt64_isZero.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.86
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_uInt64_isZero.117
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	uInt64_isZero.117
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
	jmp	.LBB37_6
.Lfunc_end37:
	.size	uInt64_isZero, .Lfunc_end37-uInt64_isZero
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix
	.type	mapSuffix,@function
mapSuffix:                              # @mapSuffix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB38_17
# %bb.1:                                # %func_mapSuffix.24
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.24
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_mapSuffix.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.46
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_mapSuffix.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.70
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_mapSuffix.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.91
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_mapSuffix.92
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.92
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_mapSuffix.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.100
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_mapSuffix.115
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.115
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_mapSuffix.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.142
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %func_mapSuffix.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.153
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_10:                              # %func_mapSuffix.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.183
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_11:                              # %func_mapSuffix.197
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.197
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_12:                              # %func_mapSuffix.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.200
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_13:                              # %func_mapSuffix.208
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.208
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_14:                              # %func_mapSuffix.297
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.297
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_15:                              # %func_mapSuffix.299
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.299
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_16:                              # %func_mapSuffix.300
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	mapSuffix.300
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB38_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB38_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB38_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB38_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB38_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB38_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB38_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB38_15
	jmp	.LBB38_16
.Lfunc_end38:
	.size	mapSuffix, .Lfunc_end38-mapSuffix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream
	.type	uncompressStream,@function
uncompressStream:                       # @uncompressStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB39_17
# %bb.1:                                # %func_uncompressStream.7
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.7
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_uncompressStream.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.60
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_uncompressStream.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.81
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_uncompressStream.101
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.101
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_uncompressStream.114
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.114
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_uncompressStream.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.146
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_uncompressStream.218
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.218
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_uncompressStream.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.230
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %func_uncompressStream.233
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.233
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_10:                              # %func_uncompressStream.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.236
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_11:                              # %func_uncompressStream.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.247
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_12:                              # %func_uncompressStream.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.252
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_13:                              # %func_uncompressStream.270
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.270
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_14:                              # %func_uncompressStream.279
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.279
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_15:                              # %func_uncompressStream.285
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.285
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_16:                              # %func_uncompressStream.292
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	uncompressStream.292
	movzbl	%al, %eax
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB39_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB39_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB39_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB39_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB39_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB39_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB39_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB39_15
	jmp	.LBB39_16
.Lfunc_end39:
	.size	uncompressStream, .Lfunc_end39-uncompressStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function crcError
	.type	crcError,@function
crcError:                               # @crcError
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.92, %rsi
	movb	$0, %al
	callq	fprintf
	callq	showFileNames
	callq	cadvise
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end40:
	.size	crcError, .Lfunc_end40-crcError
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compressedStreamEOF
	.type	compressedStreamEOF,@function
compressedStreamEOF:                    # @compressedStreamEOF
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	cmpb	$0, noisy
	je	.LBB41_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.93, %rsi
	movb	$0, %al
	callq	fprintf
	movq	progName, %rdi
	callq	perror
	callq	showFileNames
	callq	cadvise
.LBB41_2:                               # %if.end
	movl	$2, %edi
	callq	cleanUpAndFail
.Lfunc_end41:
	.size	compressedStreamEOF, .Lfunc_end41-compressedStreamEOF
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream
	.type	testStream,@function
testStream:                             # @testStream
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB42_17
# %bb.1:                                # %func_testStream.26
	movq	%rbx, %rdi
	callq	testStream.26
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_testStream.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.33
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_3:                               # %func_testStream.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.35
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_4:                               # %func_testStream.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.38
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_5:                               # %func_testStream.50
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.50
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_6:                               # %func_testStream.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.52
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_7:                               # %func_testStream.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.62
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_8:                               # %func_testStream.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.68
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_9:                               # %func_testStream.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.108
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_10:                              # %func_testStream.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.148
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_11:                              # %func_testStream.155
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.155
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_12:                              # %func_testStream.165
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.165
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_13:                              # %func_testStream.188
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.188
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_14:                              # %func_testStream.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.192
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_15:                              # %func_testStream.203
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.203
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_16:                              # %func_testStream.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	testStream.207
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_17:                              # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB42_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB42_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB42_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB42_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB42_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB42_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB42_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB42_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB42_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB42_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB42_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB42_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB42_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB42_15
	jmp	.LBB42_16
.Lfunc_end42:
	.size	testStream, .Lfunc_end42-testStream
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.1
	.type	hasSuffix.1,@function
hasSuffix.1:                            # @hasSuffix.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$62061908, -24(%rbp)    # imm = 0x3B2FD54
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB43_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB43_5
.LBB43_2:                               # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB43_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB43_5
.LBB43_4:                               # %if.end10
	movb	$0, -9(%rbp)
.LBB43_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$62061908, -24(%rbp)    # imm = 0x3B2FD54
	jne	.LBB43_7
.LBB43_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_6
.Lfunc_end43:
	.size	hasSuffix.1, .Lfunc_end43-hasSuffix.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo.2
	.type	saveInputFileMetaInfo.2,@function
saveInputFileMetaInfo.2:                # @saveInputFileMetaInfo.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$852125184, -8(%rbp)    # imm = 0x32CA6600
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movabsq	$fileMetaInfo, %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB44_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB44_2:                               # %if.end
	cmpl	$852125184, -8(%rbp)    # imm = 0x32CA6600
	jne	.LBB44_4
.LBB44_3:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_3
.Lfunc_end44:
	.size	saveInputFileMetaInfo.2, .Lfunc_end44-saveInputFileMetaInfo.2
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc.3
	.type	myMalloc.3,@function
myMalloc.3:                             # @myMalloc.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$980737270, -12(%rbp)   # imm = 0x3A74DCF6
	movl	%edi, -16(%rbp)
	movslq	-16(%rbp), %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	callq	outOfMemory
.LBB45_2:                               # %if.end
	movq	-24(%rbp), %rbx
	cmpl	$980737270, -12(%rbp)   # imm = 0x3A74DCF6
	jne	.LBB45_4
.LBB45_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_3
.Lfunc_end45:
	.size	myMalloc.3, .Lfunc_end45-myMalloc.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.4
	.type	compress.4,@function
compress.4:                             # @compress.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$912453343, -60(%rbp)   # imm = 0x3662EEDF
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB46_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB46_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB46_3:                               # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB46_6
	jmp	.LBB46_4
.LBB46_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB46_8
	jmp	.LBB46_5
.LBB46_5:                               # %if.end
	subl	$3, %eax
	je	.LBB46_7
	jmp	.LBB46_9
.LBB46_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB46_9
.LBB46_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB46_9
.LBB46_8:                               # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB46_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB46_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB46_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB46_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB46_13:                              # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_14:                              # %if.end12
	cmpl	$1, srcMode
	je	.LBB46_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB46_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_17:                              # %if.end22
	movl	$0, -20(%rbp)
.LBB46_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB46_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB46_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB46_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB46_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB46_22:                              # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_23:                              # %if.end34
                                        #   in Loop: Header=BB46_18 Depth=1
	jmp	.LBB46_24
.LBB46_24:                              # %for.inc
                                        #   in Loop: Header=BB46_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_18
.LBB46_25:                              # %for.end
	cmpl	$3, srcMode
	je	.LBB46_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB46_30
.LBB46_27:                              # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB46_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_29:                              # %if.end45
	jmp	.LBB46_30
.LBB46_30:                              # %if.end46
	cmpl	$3, srcMode
	jne	.LBB46_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB46_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB46_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB46_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB46_35:                              # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_36:                              # %if.end60
	cmpl	$3, srcMode
	jne	.LBB46_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB46_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB46_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB46_41
.LBB46_40:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_41:                              # %if.end72
	jmp	.LBB46_42
.LBB46_42:                              # %if.end73
	cmpl	$3, srcMode
	jne	.LBB46_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB46_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB46_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_46:                              # %if.end86
	cmpl	$3, srcMode
	jne	.LBB46_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB46_48:                              # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB46_51
	jmp	.LBB46_49
.LBB46_49:                              # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB46_54
	jmp	.LBB46_50
.LBB46_50:                              # %if.end90
	subl	$3, %eax
	je	.LBB46_61
	jmp	.LBB46_70
.LBB46_51:                              # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB46_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_53:                              # %if.end98
	jmp	.LBB46_71
.LBB46_54:                              # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB46_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB46_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB46_57:                              # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_58:                              # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB46_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_60:                              # %if.end119
	jmp	.LBB46_71
.LBB46_61:                              # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB46_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB46_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB46_64:                              # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_65:                              # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB46_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB46_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB46_68:                              # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB46_80
.LBB46_69:                              # %if.end146
	jmp	.LBB46_71
.LBB46_70:                              # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB46_71:                              # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB46_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB46_73:                              # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB46_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB46_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB46_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB46_77:                              # %if.end163
	jmp	.LBB46_78
.LBB46_78:                              # %if.end164
	jmp	.LBB46_79
.LBB46_79:                              # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB46_80:                              # %return
	cmpl	$912453343, -60(%rbp)   # imm = 0x3662EEDF
	jne	.LBB46_82
.LBB46_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_81
.Lfunc_end46:
	.size	compress.4, .Lfunc_end46-compress.4
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.5
.LCPI47_0:
	.quad	4636737291354636288     # double 100
.LCPI47_1:
	.quad	4607182418800017408     # double 1
.LCPI47_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.5,@function
compressStream.5:                       # @compressStream.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$391596712, -76(%rbp)   # imm = 0x17574AA8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB47_2
# %bb.1:                                # %if.then
	jmp	.LBB47_46
.LBB47_2:                               # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB47_4
# %bb.3:                                # %if.then3
	jmp	.LBB47_46
.LBB47_4:                               # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB47_6
# %bb.5:                                # %if.then6
	jmp	.LBB47_40
.LBB47_6:                               # %if.end7
	cmpl	$2, verbosity
	jl	.LBB47_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB47_8:                               # %if.end11
	jmp	.LBB47_9
.LBB47_9:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB47_11
# %bb.10:                               # %if.then14
	jmp	.LBB47_18
.LBB47_11:                              # %if.end15
                                        #   in Loop: Header=BB47_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB47_13
# %bb.12:                               # %if.then19
	jmp	.LBB47_46
.LBB47_13:                              # %if.end20
                                        #   in Loop: Header=BB47_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB47_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB47_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB47_15:                              # %if.end25
                                        #   in Loop: Header=BB47_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB47_17
# %bb.16:                               # %if.then28
	jmp	.LBB47_40
.LBB47_17:                              # %if.end29
                                        #   in Loop: Header=BB47_9 Depth=1
	jmp	.LBB47_9
.LBB47_18:                              # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB47_20
# %bb.19:                               # %if.then32
	jmp	.LBB47_40
.LBB47_20:                              # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB47_22
# %bb.21:                               # %if.then36
	jmp	.LBB47_46
.LBB47_22:                              # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB47_24
# %bb.23:                               # %if.then41
	jmp	.LBB47_46
.LBB47_24:                              # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB47_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB47_27
# %bb.26:                               # %if.then49
	jmp	.LBB47_46
.LBB47_27:                              # %if.end50
	jmp	.LBB47_28
.LBB47_28:                              # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB47_30
# %bb.29:                               # %if.then54
	jmp	.LBB47_46
.LBB47_30:                              # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB47_32
# %bb.31:                               # %if.then59
	jmp	.LBB47_46
.LBB47_32:                              # %if.end60
	cmpl	$1, verbosity
	jl	.LBB47_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB47_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB47_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB47_37
.LBB47_36:                              # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI47_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	.LCPI47_1(%rip), %xmm3  # xmm3 = mem[0],zero
	vmovsd	.LCPI47_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB47_37:                              # %if.end80
	jmp	.LBB47_38
.LBB47_38:                              # %if.end81
	cmpl	$391596712, -76(%rbp)   # imm = 0x17574AA8
	jne	.LBB47_48
.LBB47_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_40:                              # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB47_43
	jmp	.LBB47_41
.LBB47_41:                              # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB47_45
	jmp	.LBB47_42
.LBB47_42:                              # %errhandler
	subl	$-3, %eax
	je	.LBB47_44
	jmp	.LBB47_47
.LBB47_43:                              # %sw.bb
	callq	configError
.LBB47_44:                              # %sw.bb82
	callq	outOfMemory
.LBB47_45:                              # %sw.bb83
	jmp	.LBB47_46
.LBB47_46:                              # %errhandler_io
	callq	ioError
.LBB47_47:                              # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB47_48:                              # %func_exit
	callq	detect_breach
	jmp	.LBB47_39
.Lfunc_end47:
	.size	compressStream.5, .Lfunc_end47-compressStream.5
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.6
	.type	uncompress.6,@function
uncompress.6:                           # @uncompress.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$834003602, -60(%rbp)   # imm = 0x31B5E292
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB48_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB48_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB48_3:                               # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB48_6
	jmp	.LBB48_4
.LBB48_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB48_14
	jmp	.LBB48_5
.LBB48_5:                               # %if.end
	subl	$3, %eax
	je	.LBB48_7
	jmp	.LBB48_15
.LBB48_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB48_15
.LBB48_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB48_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB48_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB48_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB48_11
# %bb.10:                               # %if.then6
	jmp	.LBB48_16
.LBB48_11:                              # %if.end7
                                        #   in Loop: Header=BB48_8 Depth=1
	jmp	.LBB48_12
.LBB48_12:                              # %for.inc
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB48_8
.LBB48_13:                              # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB48_15
.LBB48_14:                              # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB48_15:                              # %sw.epilog
	jmp	.LBB48_16
.LBB48_16:                              # %zzz
	cmpl	$1, srcMode
	je	.LBB48_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB48_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB48_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB48_20:                              # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_21:                              # %if.end19
	cmpl	$1, srcMode
	je	.LBB48_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB48_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_24:                              # %if.end29
	cmpl	$3, srcMode
	je	.LBB48_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB48_29
.LBB48_26:                              # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB48_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_28:                              # %if.end40
	jmp	.LBB48_29
.LBB48_29:                              # %if.end41
	cmpl	$3, srcMode
	jne	.LBB48_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB48_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB48_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB48_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB48_34:                              # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_35:                              # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB48_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB48_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB48_38:                              # %if.end61
	jmp	.LBB48_39
.LBB48_39:                              # %if.end62
	cmpl	$3, srcMode
	jne	.LBB48_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB48_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB48_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB48_44
.LBB48_43:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_44:                              # %if.end74
	jmp	.LBB48_45
.LBB48_45:                              # %if.end75
	cmpl	$3, srcMode
	jne	.LBB48_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB48_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB48_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_49:                              # %if.end88
	cmpl	$3, srcMode
	jne	.LBB48_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB48_51:                              # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB48_54
	jmp	.LBB48_52
.LBB48_52:                              # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB48_57
	jmp	.LBB48_53
.LBB48_53:                              # %if.end92
	subl	$3, %eax
	je	.LBB48_62
	jmp	.LBB48_71
.LBB48_54:                              # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB48_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_56:                              # %if.end100
	jmp	.LBB48_72
.LBB48_57:                              # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB48_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB48_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB48_60:                              # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_61:                              # %if.end114
	jmp	.LBB48_72
.LBB48_62:                              # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB48_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB48_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB48_65:                              # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_66:                              # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB48_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB48_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB48_69:                              # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB48_95
.LBB48_70:                              # %if.end141
	jmp	.LBB48_72
.LBB48_71:                              # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB48_72:                              # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB48_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB48_74:                              # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB48_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB48_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB48_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB48_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB48_79:                              # %if.end161
	jmp	.LBB48_80
.LBB48_80:                              # %if.end162
	jmp	.LBB48_81
.LBB48_81:                              # %if.end163
	jmp	.LBB48_87
.LBB48_82:                              # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB48_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB48_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB48_85:                              # %if.end173
	jmp	.LBB48_86
.LBB48_86:                              # %if.end174
	jmp	.LBB48_87
.LBB48_87:                              # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB48_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB48_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB48_90:                              # %if.end182
	jmp	.LBB48_95
.LBB48_91:                              # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB48_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB48_94
.LBB48_93:                              # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB48_94:                              # %if.end190
	jmp	.LBB48_95
.LBB48_95:                              # %if.end191
	cmpl	$834003602, -60(%rbp)   # imm = 0x31B5E292
	jne	.LBB48_97
.LBB48_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_97:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_96
.Lfunc_end48:
	.size	uncompress.6, .Lfunc_end48-uncompress.6
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.7
	.type	uncompressStream.7,@function
uncompressStream.7:                     # @uncompressStream.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$877249455, -68(%rbp)   # imm = 0x3449C3AF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_2
# %bb.1:                                # %if.then
	jmp	.LBB49_66
.LBB49_2:                               # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_4
# %bb.3:                                # %if.then3
	jmp	.LBB49_66
.LBB49_4:                               # %if.end4
	jmp	.LBB49_5
.LBB49_5:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_9 Depth 2
                                        #     Child Loop BB49_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB49_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB49_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB49_8
.LBB49_7:                               # %if.then9
	jmp	.LBB49_62
.LBB49_8:                               # %if.end10
                                        #   in Loop: Header=BB49_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB49_9:                               # %while.cond11
                                        #   Parent Loop BB49_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB49_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB49_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB49_12
# %bb.11:                               # %if.then19
	jmp	.LBB49_49
.LBB49_12:                              # %if.end20
                                        #   in Loop: Header=BB49_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB49_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB49_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB49_16
.LBB49_14:                              # %land.lhs.true
                                        #   in Loop: Header=BB49_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB49_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB49_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB49_16:                              # %if.end32
                                        #   in Loop: Header=BB49_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_18
# %bb.17:                               # %if.then35
	jmp	.LBB49_66
.LBB49_18:                              # %if.end36
                                        #   in Loop: Header=BB49_9 Depth=2
	jmp	.LBB49_9
.LBB49_19:                              # %while.end
                                        #   in Loop: Header=BB49_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB49_21
# %bb.20:                               # %if.then39
	jmp	.LBB49_62
.LBB49_21:                              # %if.end40
                                        #   in Loop: Header=BB49_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB49_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB49_23:                              # %if.end44
                                        #   in Loop: Header=BB49_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -44(%rbp)
.LBB49_24:                              # %for.cond
                                        #   Parent Loop BB49_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB49_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB49_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB49_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB49_24
.LBB49_27:                              # %for.end
                                        #   in Loop: Header=BB49_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB49_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB49_29:                              # %if.end53
                                        #   in Loop: Header=BB49_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB49_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB49_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB49_32
# %bb.31:                               # %if.then60
	jmp	.LBB49_33
.LBB49_32:                              # %if.end61
                                        #   in Loop: Header=BB49_5 Depth=1
	jmp	.LBB49_5
.LBB49_33:                              # %while.end62
	jmp	.LBB49_34
.LBB49_34:                              # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_36
# %bb.35:                               # %if.then65
	jmp	.LBB49_66
.LBB49_36:                              # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB49_38
# %bb.37:                               # %if.then70
	jmp	.LBB49_66
.LBB49_38:                              # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_40
# %bb.39:                               # %if.then74
	jmp	.LBB49_66
.LBB49_40:                              # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB49_42
# %bb.41:                               # %if.then79
	jmp	.LBB49_66
.LBB49_42:                              # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB49_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB49_45
# %bb.44:                               # %if.then87
	jmp	.LBB49_66
.LBB49_45:                              # %if.end88
	jmp	.LBB49_46
.LBB49_46:                              # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB49_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB49_48:                              # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB49_80
.LBB49_49:                              # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB49_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB49_51:                              # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB49_53
# %bb.52:                               # %if.then100
	jmp	.LBB49_60
.LBB49_53:                              # %if.end101
                                        #   in Loop: Header=BB49_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_55
# %bb.54:                               # %if.then107
	jmp	.LBB49_66
.LBB49_55:                              # %if.end108
                                        #   in Loop: Header=BB49_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB49_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB49_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB49_57:                              # %if.end115
                                        #   in Loop: Header=BB49_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB49_59
# %bb.58:                               # %if.then118
	jmp	.LBB49_66
.LBB49_59:                              # %if.end119
                                        #   in Loop: Header=BB49_51 Depth=1
	jmp	.LBB49_51
.LBB49_60:                              # %while.end120
	jmp	.LBB49_34
.LBB49_61:                              # %if.end121
	jmp	.LBB49_62
.LBB49_62:                              # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB49_79
# %bb.63:                               # %errhandler
	movq	.LJTI49_0(,%rax,8), %rax
	jmpq	*%rax
.LBB49_64:                              # %sw.bb
	callq	configError
.LBB49_65:                              # %sw.bb122
	jmp	.LBB49_66
.LBB49_66:                              # %errhandler_io
	callq	ioError
.LBB49_67:                              # %sw.bb123
	callq	crcError
.LBB49_68:                              # %sw.bb124
	callq	outOfMemory
.LBB49_69:                              # %sw.bb125
	callq	compressedStreamEOF
.LBB49_70:                              # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB49_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB49_72:                              # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB49_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB49_74:                              # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB49_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB49_80
.LBB49_76:                              # %if.else
	cmpb	$0, noisy
	je	.LBB49_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB49_78:                              # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB49_80
.LBB49_79:                              # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB49_80:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$877249455, -68(%rbp)   # imm = 0x3449C3AF
	jne	.LBB49_82
.LBB49_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_81
.Lfunc_end49:
	.size	uncompressStream.7, .Lfunc_end49-uncompressStream.7
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI49_0:
	.quad	.LBB49_64
	.quad	.LBB49_79
	.quad	.LBB49_69
	.quad	.LBB49_65
	.quad	.LBB49_70
	.quad	.LBB49_67
	.quad	.LBB49_68
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.8
.LCPI50_0:
	.quad	4607182418800017408     # double 1
.LCPI50_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.8,@function
uInt64_to_double.8:                     # @uInt64_to_double.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI50_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1210117607, -28(%rbp)  # imm = 0x4820EDE7
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB50_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB50_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB50_1 Depth=1
	vmovsd	.LCPI50_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB50_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_1
.LBB50_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1210117607, -28(%rbp)  # imm = 0x4820EDE7
	jne	.LBB50_6
.LBB50_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB50_5
.Lfunc_end50:
	.size	uInt64_to_double.8, .Lfunc_end50-uInt64_to_double.8
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.9
.LCPI51_0:
	.quad	4636737291354636288     # double 100
.LCPI51_1:
	.quad	4607182418800017408     # double 1
.LCPI51_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.9,@function
compressStream.9:                       # @compressStream.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1390196239, -76(%rbp)  # imm = 0x52DCB60F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB51_2
# %bb.1:                                # %if.then
	jmp	.LBB51_46
.LBB51_2:                               # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB51_4
# %bb.3:                                # %if.then3
	jmp	.LBB51_46
.LBB51_4:                               # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB51_6
# %bb.5:                                # %if.then6
	jmp	.LBB51_40
.LBB51_6:                               # %if.end7
	cmpl	$2, verbosity
	jl	.LBB51_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB51_8:                               # %if.end11
	jmp	.LBB51_9
.LBB51_9:                               # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB51_11
# %bb.10:                               # %if.then14
	jmp	.LBB51_18
.LBB51_11:                              # %if.end15
                                        #   in Loop: Header=BB51_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB51_13
# %bb.12:                               # %if.then19
	jmp	.LBB51_46
.LBB51_13:                              # %if.end20
                                        #   in Loop: Header=BB51_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB51_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB51_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB51_15:                              # %if.end25
                                        #   in Loop: Header=BB51_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB51_17
# %bb.16:                               # %if.then28
	jmp	.LBB51_40
.LBB51_17:                              # %if.end29
                                        #   in Loop: Header=BB51_9 Depth=1
	jmp	.LBB51_9
.LBB51_18:                              # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB51_20
# %bb.19:                               # %if.then32
	jmp	.LBB51_40
.LBB51_20:                              # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB51_22
# %bb.21:                               # %if.then36
	jmp	.LBB51_46
.LBB51_22:                              # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB51_24
# %bb.23:                               # %if.then41
	jmp	.LBB51_46
.LBB51_24:                              # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB51_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB51_27
# %bb.26:                               # %if.then49
	jmp	.LBB51_46
.LBB51_27:                              # %if.end50
	jmp	.LBB51_28
.LBB51_28:                              # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB51_30
# %bb.29:                               # %if.then54
	jmp	.LBB51_46
.LBB51_30:                              # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB51_32
# %bb.31:                               # %if.then59
	jmp	.LBB51_46
.LBB51_32:                              # %if.end60
	cmpl	$1, verbosity
	jl	.LBB51_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB51_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB51_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB51_37
.LBB51_36:                              # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI51_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm3  # xmm3 = mem[0],zero
	vmovsd	.LCPI51_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB51_37:                              # %if.end80
	jmp	.LBB51_38
.LBB51_38:                              # %if.end81
	cmpl	$1390196239, -76(%rbp)  # imm = 0x52DCB60F
	jne	.LBB51_48
.LBB51_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_40:                              # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB51_43
	jmp	.LBB51_41
.LBB51_41:                              # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB51_45
	jmp	.LBB51_42
.LBB51_42:                              # %errhandler
	subl	$-3, %eax
	je	.LBB51_44
	jmp	.LBB51_47
.LBB51_43:                              # %sw.bb
	callq	configError
.LBB51_44:                              # %sw.bb82
	callq	outOfMemory
.LBB51_45:                              # %sw.bb83
	jmp	.LBB51_46
.LBB51_46:                              # %errhandler_io
	callq	ioError
.LBB51_47:                              # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB51_48:                              # %func_exit
	callq	detect_breach
	jmp	.LBB51_39
.Lfunc_end51:
	.size	compressStream.9, .Lfunc_end51-compressStream.9
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.10
	.type	addFlagsFromEnvVar.10,@function
addFlagsFromEnvVar.10:                  # @addFlagsFromEnvVar.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1059930408, -24(%rbp)  # imm = 0x3F2D4128
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB52_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB52_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_5 Depth 2
                                        #     Child Loop BB52_8 Depth 2
                                        #     Child Loop BB52_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB52_4
# %bb.3:                                # %if.then3
	jmp	.LBB52_21
.LBB52_4:                               # %if.end
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB52_5:                               # %while.cond4
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB52_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB52_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB52_5
.LBB52_7:                               # %while.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %while.cond12
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB52_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB52_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB52_10:                              # %land.end
                                        #   in Loop: Header=BB52_8 Depth=2
	testb	$1, %al
	jne	.LBB52_11
	jmp	.LBB52_12
.LBB52_11:                              # %while.body27
                                        #   in Loop: Header=BB52_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_8
.LBB52_12:                              # %while.end28
                                        #   in Loop: Header=BB52_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB52_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB52_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB52_15:                              # %if.end35
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	$0, -8(%rbp)
.LBB52_16:                              # %for.cond
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB52_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB52_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB52_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_16
.LBB52_19:                              # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB52_20:                              # %if.end46
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_2
.LBB52_21:                              # %while.end47
	jmp	.LBB52_22
.LBB52_22:                              # %if.end48
	cmpl	$1059930408, -24(%rbp)  # imm = 0x3F2D4128
	jne	.LBB52_24
.LBB52_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_23
.Lfunc_end52:
	.size	addFlagsFromEnvVar.10, .Lfunc_end52-addFlagsFromEnvVar.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.11
	.type	myfeof.11,@function
myfeof.11:                              # @myfeof.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1453874886, -20(%rbp)  # imm = 0x56A85EC6
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB53_3
.LBB53_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB53_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1453874886, -20(%rbp)  # imm = 0x56A85EC6
	jne	.LBB53_5
.LBB53_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_4
.Lfunc_end53:
	.size	myfeof.11, .Lfunc_end53-myfeof.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.12
.LCPI54_0:
	.quad	4607182418800017408     # double 1
.LCPI54_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.12,@function
uInt64_to_double.12:                    # @uInt64_to_double.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$281285809, -28(%rbp)   # imm = 0x10C414B1
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB54_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB54_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB54_1 Depth=1
	vmovsd	.LCPI54_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB54_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_1
.LBB54_4:                               # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$281285809, -28(%rbp)   # imm = 0x10C414B1
	jne	.LBB54_6
.LBB54_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB54_5
.Lfunc_end54:
	.size	uInt64_to_double.12, .Lfunc_end54-uInt64_to_double.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.13
	.type	fileExists.13,@function
fileExists.13:                          # @fileExists.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1907337655, -28(%rbp)  # imm = 0x71AFA9B7
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB55_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB55_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$1907337655, -28(%rbp)  # imm = 0x71AFA9B7
	jne	.LBB55_4
.LBB55_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_3
.Lfunc_end55:
	.size	fileExists.13, .Lfunc_end55-fileExists.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.14
	.type	uInt64_isZero.14,@function
uInt64_isZero.14:                       # @uInt64_isZero.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2017853270, -20(%rbp)  # imm = 0x7845FF56
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB56_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB56_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB56_7
.LBB56_4:                               # %if.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_5
.LBB56_5:                               # %for.inc
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_1
.LBB56_6:                               # %for.end
	movb	$1, -9(%rbp)
.LBB56_7:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$2017853270, -20(%rbp)  # imm = 0x7845FF56
	jne	.LBB56_9
.LBB56_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_8
.Lfunc_end56:
	.size	uInt64_isZero.14, .Lfunc_end56-uInt64_isZero.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.15
	.type	uInt64_from_UInt32s.15,@function
uInt64_from_UInt32s.15:                 # @uInt64_from_UInt32s.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$208867621, -20(%rbp)   # imm = 0xC731125
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$208867621, -20(%rbp)   # imm = 0xC731125
	jne	.LBB57_2
.LBB57_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_1
.Lfunc_end57:
	.size	uInt64_from_UInt32s.15, .Lfunc_end57-uInt64_from_UInt32s.15
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myMalloc.16
	.type	myMalloc.16,@function
myMalloc.16:                            # @myMalloc.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$606001166, -16(%rbp)   # imm = 0x241ED80E
	movl	%edi, -12(%rbp)
	movslq	-12(%rbp), %rdi
	callq	malloc
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB58_2
# %bb.1:                                # %if.then
	callq	outOfMemory
.LBB58_2:                               # %if.end
	movq	-24(%rbp), %rbx
	cmpl	$606001166, -16(%rbp)   # imm = 0x241ED80E
	jne	.LBB58_4
.LBB58_3:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_3
.Lfunc_end58:
	.size	myMalloc.16, .Lfunc_end58-myMalloc.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.17
	.type	uncompress.17,@function
uncompress.17:                          # @uncompress.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$61388139, -64(%rbp)    # imm = 0x3A8B56B
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB59_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB59_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB59_3:                               # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB59_6
	jmp	.LBB59_4
.LBB59_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB59_14
	jmp	.LBB59_5
.LBB59_5:                               # %if.end
	subl	$3, %eax
	je	.LBB59_7
	jmp	.LBB59_15
.LBB59_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB59_15
.LBB59_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB59_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB59_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB59_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB59_11
# %bb.10:                               # %if.then6
	jmp	.LBB59_16
.LBB59_11:                              # %if.end7
                                        #   in Loop: Header=BB59_8 Depth=1
	jmp	.LBB59_12
.LBB59_12:                              # %for.inc
                                        #   in Loop: Header=BB59_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_8
.LBB59_13:                              # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB59_15
.LBB59_14:                              # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB59_15:                              # %sw.epilog
	jmp	.LBB59_16
.LBB59_16:                              # %zzz
	cmpl	$1, srcMode
	je	.LBB59_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB59_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB59_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB59_20:                              # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_21:                              # %if.end19
	cmpl	$1, srcMode
	je	.LBB59_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB59_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_24:                              # %if.end29
	cmpl	$3, srcMode
	je	.LBB59_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB59_29
.LBB59_26:                              # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB59_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_28:                              # %if.end40
	jmp	.LBB59_29
.LBB59_29:                              # %if.end41
	cmpl	$3, srcMode
	jne	.LBB59_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB59_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB59_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB59_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB59_34:                              # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_35:                              # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB59_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB59_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB59_38:                              # %if.end61
	jmp	.LBB59_39
.LBB59_39:                              # %if.end62
	cmpl	$3, srcMode
	jne	.LBB59_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB59_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB59_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB59_44
.LBB59_43:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_44:                              # %if.end74
	jmp	.LBB59_45
.LBB59_45:                              # %if.end75
	cmpl	$3, srcMode
	jne	.LBB59_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB59_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB59_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_49:                              # %if.end88
	cmpl	$3, srcMode
	jne	.LBB59_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB59_51:                              # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB59_54
	jmp	.LBB59_52
.LBB59_52:                              # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB59_57
	jmp	.LBB59_53
.LBB59_53:                              # %if.end92
	subl	$3, %eax
	je	.LBB59_62
	jmp	.LBB59_71
.LBB59_54:                              # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB59_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_56:                              # %if.end100
	jmp	.LBB59_72
.LBB59_57:                              # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB59_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB59_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB59_60:                              # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_61:                              # %if.end114
	jmp	.LBB59_72
.LBB59_62:                              # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB59_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB59_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB59_65:                              # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_66:                              # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB59_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB59_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB59_69:                              # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB59_95
.LBB59_70:                              # %if.end141
	jmp	.LBB59_72
.LBB59_71:                              # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB59_72:                              # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB59_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB59_74:                              # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB59_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB59_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB59_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB59_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB59_79:                              # %if.end161
	jmp	.LBB59_80
.LBB59_80:                              # %if.end162
	jmp	.LBB59_81
.LBB59_81:                              # %if.end163
	jmp	.LBB59_87
.LBB59_82:                              # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB59_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB59_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB59_85:                              # %if.end173
	jmp	.LBB59_86
.LBB59_86:                              # %if.end174
	jmp	.LBB59_87
.LBB59_87:                              # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB59_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB59_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB59_90:                              # %if.end182
	jmp	.LBB59_95
.LBB59_91:                              # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB59_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB59_94
.LBB59_93:                              # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB59_94:                              # %if.end190
	jmp	.LBB59_95
.LBB59_95:                              # %if.end191
	cmpl	$61388139, -64(%rbp)    # imm = 0x3A8B56B
	jne	.LBB59_97
.LBB59_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_97:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_96
.Lfunc_end59:
	.size	uncompress.17, .Lfunc_end59-uncompress.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.18
	.type	countHardLinks.18,@function
countHardLinks.18:                      # @countHardLinks.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1812330568, -20(%rbp)  # imm = 0x6C05F848
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB60_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB60_3
.LBB60_2:                               # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB60_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1812330568, -20(%rbp)  # imm = 0x6C05F848
	jne	.LBB60_5
.LBB60_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_4
.Lfunc_end60:
	.size	countHardLinks.18, .Lfunc_end60-countHardLinks.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.19
	.type	uncompress.19,@function
uncompress.19:                          # @uncompress.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1582393963, -68(%rbp)  # imm = 0x5E516A6B
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB61_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB61_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB61_3:                               # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB61_6
	jmp	.LBB61_4
.LBB61_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB61_14
	jmp	.LBB61_5
.LBB61_5:                               # %if.end
	subl	$3, %eax
	je	.LBB61_7
	jmp	.LBB61_15
.LBB61_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB61_15
.LBB61_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB61_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB61_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB61_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB61_11
# %bb.10:                               # %if.then6
	jmp	.LBB61_16
.LBB61_11:                              # %if.end7
                                        #   in Loop: Header=BB61_8 Depth=1
	jmp	.LBB61_12
.LBB61_12:                              # %for.inc
                                        #   in Loop: Header=BB61_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB61_8
.LBB61_13:                              # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB61_15
.LBB61_14:                              # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB61_15:                              # %sw.epilog
	jmp	.LBB61_16
.LBB61_16:                              # %zzz
	cmpl	$1, srcMode
	je	.LBB61_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB61_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB61_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB61_20:                              # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_21:                              # %if.end19
	cmpl	$1, srcMode
	je	.LBB61_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB61_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_24:                              # %if.end29
	cmpl	$3, srcMode
	je	.LBB61_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB61_29
.LBB61_26:                              # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB61_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_28:                              # %if.end40
	jmp	.LBB61_29
.LBB61_29:                              # %if.end41
	cmpl	$3, srcMode
	jne	.LBB61_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB61_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB61_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB61_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB61_34:                              # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_35:                              # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB61_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB61_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB61_38:                              # %if.end61
	jmp	.LBB61_39
.LBB61_39:                              # %if.end62
	cmpl	$3, srcMode
	jne	.LBB61_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB61_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB61_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB61_44
.LBB61_43:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_44:                              # %if.end74
	jmp	.LBB61_45
.LBB61_45:                              # %if.end75
	cmpl	$3, srcMode
	jne	.LBB61_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB61_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB61_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_49:                              # %if.end88
	cmpl	$3, srcMode
	jne	.LBB61_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB61_51:                              # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB61_54
	jmp	.LBB61_52
.LBB61_52:                              # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB61_57
	jmp	.LBB61_53
.LBB61_53:                              # %if.end92
	subl	$3, %eax
	je	.LBB61_62
	jmp	.LBB61_71
.LBB61_54:                              # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB61_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_56:                              # %if.end100
	jmp	.LBB61_72
.LBB61_57:                              # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB61_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB61_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB61_60:                              # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_61:                              # %if.end114
	jmp	.LBB61_72
.LBB61_62:                              # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB61_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB61_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB61_65:                              # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_66:                              # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB61_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB61_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB61_69:                              # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB61_95
.LBB61_70:                              # %if.end141
	jmp	.LBB61_72
.LBB61_71:                              # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB61_72:                              # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB61_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB61_74:                              # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB61_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB61_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB61_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB61_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB61_79:                              # %if.end161
	jmp	.LBB61_80
.LBB61_80:                              # %if.end162
	jmp	.LBB61_81
.LBB61_81:                              # %if.end163
	jmp	.LBB61_87
.LBB61_82:                              # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB61_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB61_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB61_85:                              # %if.end173
	jmp	.LBB61_86
.LBB61_86:                              # %if.end174
	jmp	.LBB61_87
.LBB61_87:                              # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB61_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB61_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB61_90:                              # %if.end182
	jmp	.LBB61_95
.LBB61_91:                              # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB61_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB61_94
.LBB61_93:                              # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB61_94:                              # %if.end190
	jmp	.LBB61_95
.LBB61_95:                              # %if.end191
	cmpl	$1582393963, -68(%rbp)  # imm = 0x5E516A6B
	jne	.LBB61_97
.LBB61_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_97:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_96
.Lfunc_end61:
	.size	uncompress.19, .Lfunc_end61-uncompress.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.20
	.type	myfeof.20,@function
myfeof.20:                              # @myfeof.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$547726204, -20(%rbp)   # imm = 0x20A5A37C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB62_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB62_3
.LBB62_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB62_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$547726204, -20(%rbp)   # imm = 0x20A5A37C
	jne	.LBB62_5
.LBB62_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_4
.Lfunc_end62:
	.size	myfeof.20, .Lfunc_end62-myfeof.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.21
	.type	cleanUpAndFail.21,@function
cleanUpAndFail.21:                      # @cleanUpAndFail.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1863153214, -12(%rbp)  # imm = 0x6F0D763E
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB63_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB63_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB63_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB63_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB63_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB63_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB63_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB63_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB63_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB63_10:                              # %if.end19
	jmp	.LBB63_12
.LBB63_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB63_12:                              # %if.end24
	jmp	.LBB63_13
.LBB63_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB63_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB63_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB63_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB63_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end63:
	.size	cleanUpAndFail.21, .Lfunc_end63-cleanUpAndFail.21
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.22
	.type	uInt64_isZero.22,@function
uInt64_isZero.22:                       # @uInt64_isZero.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2035832360, -20(%rbp)  # imm = 0x79585628
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB64_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB64_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB64_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB64_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB64_7
.LBB64_4:                               # %if.end
                                        #   in Loop: Header=BB64_1 Depth=1
	jmp	.LBB64_5
.LBB64_5:                               # %for.inc
                                        #   in Loop: Header=BB64_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_1
.LBB64_6:                               # %for.end
	movb	$1, -9(%rbp)
.LBB64_7:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$2035832360, -20(%rbp)  # imm = 0x79585628
	jne	.LBB64_9
.LBB64_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_8
.Lfunc_end64:
	.size	uInt64_isZero.22, .Lfunc_end64-uInt64_isZero.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.23
	.type	uInt64_from_UInt32s.23,@function
uInt64_from_UInt32s.23:                 # @uInt64_from_UInt32s.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2110807556, -20(%rbp)  # imm = 0x7DD05E04
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$2110807556, -20(%rbp)  # imm = 0x7DD05E04
	jne	.LBB65_2
.LBB65_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_1
.Lfunc_end65:
	.size	uInt64_from_UInt32s.23, .Lfunc_end65-uInt64_from_UInt32s.23
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.24
	.type	mapSuffix.24,@function
mapSuffix.24:                           # @mapSuffix.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$345454159, -36(%rbp)   # imm = 0x1497364F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB66_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB66_3
.LBB66_2:                               # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB66_3:                               # %return
	movb	-17(%rbp), %bl
	cmpl	$345454159, -36(%rbp)   # imm = 0x1497364F
	jne	.LBB66_5
.LBB66_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_4
.Lfunc_end66:
	.size	mapSuffix.24, .Lfunc_end66-mapSuffix.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copyFileName.25
	.type	copyFileName.25,@function
copyFileName.25:                        # @copyFileName.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1360693809, -12(%rbp)  # imm = 0x511A8A31
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpq	$1024, %rax             # imm = 0x400
	jbe	.LBB67_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	-8(%rbp), %rdx
	movabsq	$.L.str.47, %rsi
	movl	$1024, %ecx             # imm = 0x400
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB67_2:                               # %if.end
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$1024, %edx             # imm = 0x400
	callq	strncpy
	movq	-24(%rbp), %rax
	movb	$0, 1024(%rax)
	cmpl	$1360693809, -12(%rbp)  # imm = 0x511A8A31
	jne	.LBB67_4
.LBB67_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_3
.Lfunc_end67:
	.size	copyFileName.25, .Lfunc_end67-copyFileName.25
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.26
	.type	testStream.26,@function
testStream.26:                          # @testStream.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1268495442, -56(%rbp)  # imm = 0x4B9BB452
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB68_2
# %bb.1:                                # %if.then
	jmp	.LBB68_38
.LBB68_2:                               # %if.end
	jmp	.LBB68_3
.LBB68_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_7 Depth 2
                                        #     Child Loop BB68_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB68_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB68_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB68_6
.LBB68_5:                               # %if.then5
	jmp	.LBB68_32
.LBB68_6:                               # %if.end6
                                        #   in Loop: Header=BB68_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB68_7:                               # %while.cond7
                                        #   Parent Loop BB68_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB68_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB68_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB68_10
# %bb.9:                                # %if.then15
	jmp	.LBB68_32
.LBB68_10:                              # %if.end16
                                        #   in Loop: Header=BB68_7 Depth=2
	jmp	.LBB68_7
.LBB68_11:                              # %while.end
                                        #   in Loop: Header=BB68_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB68_13
# %bb.12:                               # %if.then19
	jmp	.LBB68_32
.LBB68_13:                              # %if.end20
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB68_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB68_15:                              # %if.end24
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB68_16:                              # %for.cond
                                        #   Parent Loop BB68_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB68_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB68_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB68_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_16
.LBB68_19:                              # %for.end
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB68_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB68_21:                              # %if.end33
                                        #   in Loop: Header=BB68_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB68_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB68_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB68_24
# %bb.23:                               # %if.then39
	jmp	.LBB68_25
.LBB68_24:                              # %if.end40
                                        #   in Loop: Header=BB68_3 Depth=1
	jmp	.LBB68_3
.LBB68_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB68_27
# %bb.26:                               # %if.then44
	jmp	.LBB68_38
.LBB68_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB68_29
# %bb.28:                               # %if.then49
	jmp	.LBB68_38
.LBB68_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB68_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB68_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB68_50
.LBB68_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB68_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB68_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB68_49
# %bb.35:                               # %if.end60
	movq	.LJTI68_0(,%rax,8), %rax
	jmpq	*%rax
.LBB68_36:                              # %sw.bb
	callq	configError
.LBB68_37:                              # %sw.bb61
	jmp	.LBB68_38
.LBB68_38:                              # %errhandler_io
	callq	ioError
.LBB68_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB68_50
.LBB68_40:                              # %sw.bb64
	callq	outOfMemory
.LBB68_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB68_50
.LBB68_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB68_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB68_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB68_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB68_50
.LBB68_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB68_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB68_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB68_50
.LBB68_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB68_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1268495442, -56(%rbp)  # imm = 0x4B9BB452
	jne	.LBB68_52
.LBB68_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_51
.Lfunc_end68:
	.size	testStream.26, .Lfunc_end68-testStream.26
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI68_0:
	.quad	.LBB68_36
	.quad	.LBB68_49
	.quad	.LBB68_41
	.quad	.LBB68_37
	.quad	.LBB68_42
	.quad	.LBB68_39
	.quad	.LBB68_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function copyFileName.27
	.type	copyFileName.27,@function
copyFileName.27:                        # @copyFileName.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1509942316, -12(%rbp)  # imm = 0x59FFE42C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -8(%rbp)
	movq	-8(%rbp), %rdi
	callq	strlen
	cmpq	$1024, %rax             # imm = 0x400
	jbe	.LBB69_2
# %bb.1:                                # %if.then
	movq	stderr, %rdi
	movq	-8(%rbp), %rdx
	movabsq	$.L.str.47, %rsi
	movl	$1024, %ecx             # imm = 0x400
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.LBB69_2:                               # %if.end
	movq	-24(%rbp), %rdi
	movq	-8(%rbp), %rsi
	movl	$1024, %edx             # imm = 0x400
	callq	strncpy
	movq	-24(%rbp), %rax
	movb	$0, 1024(%rax)
	cmpl	$1509942316, -12(%rbp)  # imm = 0x59FFE42C
	jne	.LBB69_4
.LBB69_3:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_3
.Lfunc_end69:
	.size	copyFileName.27, .Lfunc_end69-copyFileName.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.28
	.type	cleanUpAndFail.28,@function
cleanUpAndFail.28:                      # @cleanUpAndFail.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1691067157, -12(%rbp)  # imm = 0x64CBA315
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB70_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB70_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB70_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB70_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB70_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB70_6:                               # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB70_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB70_8:                               # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB70_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB70_10:                              # %if.end19
	jmp	.LBB70_12
.LBB70_11:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB70_12:                              # %if.end24
	jmp	.LBB70_13
.LBB70_13:                              # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB70_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB70_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB70_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB70_17:                              # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end70:
	.size	cleanUpAndFail.28, .Lfunc_end70-cleanUpAndFail.28
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.29
	.type	fileExists.29,@function
fileExists.29:                          # @fileExists.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$252601563, -28(%rbp)   # imm = 0xF0E64DB
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB71_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB71_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$252601563, -28(%rbp)   # imm = 0xF0E64DB
	jne	.LBB71_4
.LBB71_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_3
.Lfunc_end71:
	.size	fileExists.29, .Lfunc_end71-fileExists.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.30
	.type	countHardLinks.30,@function
countHardLinks.30:                      # @countHardLinks.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1810714849, -20(%rbp)  # imm = 0x6BED50E1
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB72_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB72_3
.LBB72_2:                               # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB72_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1810714849, -20(%rbp)  # imm = 0x6BED50E1
	jne	.LBB72_5
.LBB72_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_4
.Lfunc_end72:
	.size	countHardLinks.30, .Lfunc_end72-countHardLinks.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.31
	.type	uInt64_isZero.31,@function
uInt64_isZero.31:                       # @uInt64_isZero.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1102962710, -20(%rbp)  # imm = 0x41BDE016
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB73_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB73_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB73_7
.LBB73_4:                               # %if.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_5
.LBB73_5:                               # %for.inc
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_1
.LBB73_6:                               # %for.end
	movb	$1, -9(%rbp)
.LBB73_7:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1102962710, -20(%rbp)  # imm = 0x41BDE016
	jne	.LBB73_9
.LBB73_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_8
.Lfunc_end73:
	.size	uInt64_isZero.31, .Lfunc_end73-uInt64_isZero.31
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.32
	.type	uInt64_qrm10.32,@function
uInt64_qrm10.32:                        # @uInt64_qrm10.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$638030799, -24(%rbp)   # imm = 0x260793CF
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB74_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB74_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB74_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_1
.LBB74_4:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$638030799, -24(%rbp)   # imm = 0x260793CF
	jne	.LBB74_6
.LBB74_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_5
.Lfunc_end74:
	.size	uInt64_qrm10.32, .Lfunc_end74-uInt64_qrm10.32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.33
	.type	testStream.33,@function
testStream.33:                          # @testStream.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$177335983, -56(%rbp)   # imm = 0xA91EEAF
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB75_2
# %bb.1:                                # %if.then
	jmp	.LBB75_38
.LBB75_2:                               # %if.end
	jmp	.LBB75_3
.LBB75_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_7 Depth 2
                                        #     Child Loop BB75_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB75_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB75_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB75_6
.LBB75_5:                               # %if.then5
	jmp	.LBB75_32
.LBB75_6:                               # %if.end6
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB75_7:                               # %while.cond7
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB75_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB75_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB75_10
# %bb.9:                                # %if.then15
	jmp	.LBB75_32
.LBB75_10:                              # %if.end16
                                        #   in Loop: Header=BB75_7 Depth=2
	jmp	.LBB75_7
.LBB75_11:                              # %while.end
                                        #   in Loop: Header=BB75_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB75_13
# %bb.12:                               # %if.then19
	jmp	.LBB75_32
.LBB75_13:                              # %if.end20
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB75_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB75_15:                              # %if.end24
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB75_16:                              # %for.cond
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB75_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB75_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB75_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_16
.LBB75_19:                              # %for.end
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB75_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB75_21:                              # %if.end33
                                        #   in Loop: Header=BB75_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB75_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB75_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB75_24
# %bb.23:                               # %if.then39
	jmp	.LBB75_25
.LBB75_24:                              # %if.end40
                                        #   in Loop: Header=BB75_3 Depth=1
	jmp	.LBB75_3
.LBB75_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB75_27
# %bb.26:                               # %if.then44
	jmp	.LBB75_38
.LBB75_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB75_29
# %bb.28:                               # %if.then49
	jmp	.LBB75_38
.LBB75_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB75_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB75_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB75_50
.LBB75_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB75_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB75_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB75_49
# %bb.35:                               # %if.end60
	movq	.LJTI75_0(,%rax,8), %rax
	jmpq	*%rax
.LBB75_36:                              # %sw.bb
	callq	configError
.LBB75_37:                              # %sw.bb61
	jmp	.LBB75_38
.LBB75_38:                              # %errhandler_io
	callq	ioError
.LBB75_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB75_50
.LBB75_40:                              # %sw.bb64
	callq	outOfMemory
.LBB75_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB75_50
.LBB75_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB75_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB75_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB75_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB75_50
.LBB75_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB75_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB75_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB75_50
.LBB75_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB75_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$177335983, -56(%rbp)   # imm = 0xA91EEAF
	jne	.LBB75_52
.LBB75_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_51
.Lfunc_end75:
	.size	testStream.33, .Lfunc_end75-testStream.33
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI75_0:
	.quad	.LBB75_36
	.quad	.LBB75_49
	.quad	.LBB75_41
	.quad	.LBB75_37
	.quad	.LBB75_42
	.quad	.LBB75_39
	.quad	.LBB75_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compress.34
	.type	compress.34,@function
compress.34:                            # @compress.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2023676015, -60(%rbp)  # imm = 0x789ED86F
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB76_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB76_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB76_3:                               # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB76_6
	jmp	.LBB76_4
.LBB76_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB76_8
	jmp	.LBB76_5
.LBB76_5:                               # %if.end
	subl	$3, %eax
	je	.LBB76_7
	jmp	.LBB76_9
.LBB76_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB76_9
.LBB76_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB76_9
.LBB76_8:                               # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB76_9:                               # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB76_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB76_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB76_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB76_13:                              # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_14:                              # %if.end12
	cmpl	$1, srcMode
	je	.LBB76_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB76_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_17:                              # %if.end22
	movl	$0, -20(%rbp)
.LBB76_18:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB76_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB76_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB76_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB76_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB76_22:                              # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_23:                              # %if.end34
                                        #   in Loop: Header=BB76_18 Depth=1
	jmp	.LBB76_24
.LBB76_24:                              # %for.inc
                                        #   in Loop: Header=BB76_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB76_18
.LBB76_25:                              # %for.end
	cmpl	$3, srcMode
	je	.LBB76_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB76_30
.LBB76_27:                              # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB76_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_29:                              # %if.end45
	jmp	.LBB76_30
.LBB76_30:                              # %if.end46
	cmpl	$3, srcMode
	jne	.LBB76_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB76_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB76_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB76_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB76_35:                              # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_36:                              # %if.end60
	cmpl	$3, srcMode
	jne	.LBB76_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB76_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB76_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB76_41
.LBB76_40:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_41:                              # %if.end72
	jmp	.LBB76_42
.LBB76_42:                              # %if.end73
	cmpl	$3, srcMode
	jne	.LBB76_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB76_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB76_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_46:                              # %if.end86
	cmpl	$3, srcMode
	jne	.LBB76_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB76_48:                              # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB76_51
	jmp	.LBB76_49
.LBB76_49:                              # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB76_54
	jmp	.LBB76_50
.LBB76_50:                              # %if.end90
	subl	$3, %eax
	je	.LBB76_61
	jmp	.LBB76_70
.LBB76_51:                              # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB76_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_53:                              # %if.end98
	jmp	.LBB76_71
.LBB76_54:                              # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB76_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB76_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB76_57:                              # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_58:                              # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB76_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_60:                              # %if.end119
	jmp	.LBB76_71
.LBB76_61:                              # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB76_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB76_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB76_64:                              # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_65:                              # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB76_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB76_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB76_68:                              # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB76_80
.LBB76_69:                              # %if.end146
	jmp	.LBB76_71
.LBB76_70:                              # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB76_71:                              # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB76_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB76_73:                              # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB76_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB76_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB76_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB76_77:                              # %if.end163
	jmp	.LBB76_78
.LBB76_78:                              # %if.end164
	jmp	.LBB76_79
.LBB76_79:                              # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB76_80:                              # %return
	cmpl	$2023676015, -60(%rbp)  # imm = 0x789ED86F
	jne	.LBB76_82
.LBB76_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_82:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_81
.Lfunc_end76:
	.size	compress.34, .Lfunc_end76-compress.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.35
	.type	testStream.35,@function
testStream.35:                          # @testStream.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$2041910488, -52(%rbp)  # imm = 0x79B514D8
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB77_2
# %bb.1:                                # %if.then
	jmp	.LBB77_38
.LBB77_2:                               # %if.end
	jmp	.LBB77_3
.LBB77_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_7 Depth 2
                                        #     Child Loop BB77_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB77_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB77_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB77_6
.LBB77_5:                               # %if.then5
	jmp	.LBB77_32
.LBB77_6:                               # %if.end6
                                        #   in Loop: Header=BB77_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB77_7:                               # %while.cond7
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB77_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB77_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB77_10
# %bb.9:                                # %if.then15
	jmp	.LBB77_32
.LBB77_10:                              # %if.end16
                                        #   in Loop: Header=BB77_7 Depth=2
	jmp	.LBB77_7
.LBB77_11:                              # %while.end
                                        #   in Loop: Header=BB77_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB77_13
# %bb.12:                               # %if.then19
	jmp	.LBB77_32
.LBB77_13:                              # %if.end20
                                        #   in Loop: Header=BB77_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB77_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB77_15:                              # %if.end24
                                        #   in Loop: Header=BB77_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB77_16:                              # %for.cond
                                        #   Parent Loop BB77_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB77_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB77_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB77_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB77_16
.LBB77_19:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB77_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB77_21:                              # %if.end33
                                        #   in Loop: Header=BB77_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB77_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB77_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB77_24
# %bb.23:                               # %if.then39
	jmp	.LBB77_25
.LBB77_24:                              # %if.end40
                                        #   in Loop: Header=BB77_3 Depth=1
	jmp	.LBB77_3
.LBB77_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB77_27
# %bb.26:                               # %if.then44
	jmp	.LBB77_38
.LBB77_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB77_29
# %bb.28:                               # %if.then49
	jmp	.LBB77_38
.LBB77_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB77_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB77_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB77_50
.LBB77_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB77_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB77_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB77_49
# %bb.35:                               # %if.end60
	movq	.LJTI77_0(,%rax,8), %rax
	jmpq	*%rax
.LBB77_36:                              # %sw.bb
	callq	configError
.LBB77_37:                              # %sw.bb61
	jmp	.LBB77_38
.LBB77_38:                              # %errhandler_io
	callq	ioError
.LBB77_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB77_50
.LBB77_40:                              # %sw.bb64
	callq	outOfMemory
.LBB77_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB77_50
.LBB77_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB77_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB77_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB77_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB77_50
.LBB77_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB77_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB77_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB77_50
.LBB77_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB77_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2041910488, -52(%rbp)  # imm = 0x79B514D8
	jne	.LBB77_52
.LBB77_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_51
.Lfunc_end77:
	.size	testStream.35, .Lfunc_end77-testStream.35
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI77_0:
	.quad	.LBB77_36
	.quad	.LBB77_49
	.quad	.LBB77_41
	.quad	.LBB77_37
	.quad	.LBB77_42
	.quad	.LBB77_39
	.quad	.LBB77_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function myfeof.36
	.type	myfeof.36,@function
myfeof.36:                              # @myfeof.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1390877353, -20(%rbp)  # imm = 0x52E71AA9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB78_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB78_3
.LBB78_2:                               # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB78_3:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1390877353, -20(%rbp)  # imm = 0x52E71AA9
	jne	.LBB78_5
.LBB78_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_4
.Lfunc_end78:
	.size	myfeof.36, .Lfunc_end78-myfeof.36
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.37
	.type	fileExists.37,@function
fileExists.37:                          # @fileExists.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$880432829, -28(%rbp)   # imm = 0x347A56BD
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB79_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB79_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$880432829, -28(%rbp)   # imm = 0x347A56BD
	jne	.LBB79_4
.LBB79_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_3
.Lfunc_end79:
	.size	fileExists.37, .Lfunc_end79-fileExists.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.38
	.type	testStream.38,@function
testStream.38:                          # @testStream.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$992254840, -56(%rbp)   # imm = 0x3B249B78
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB80_2
# %bb.1:                                # %if.then
	jmp	.LBB80_38
.LBB80_2:                               # %if.end
	jmp	.LBB80_3
.LBB80_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_7 Depth 2
                                        #     Child Loop BB80_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB80_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB80_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB80_6
.LBB80_5:                               # %if.then5
	jmp	.LBB80_32
.LBB80_6:                               # %if.end6
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB80_7:                               # %while.cond7
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB80_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB80_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB80_10
# %bb.9:                                # %if.then15
	jmp	.LBB80_32
.LBB80_10:                              # %if.end16
                                        #   in Loop: Header=BB80_7 Depth=2
	jmp	.LBB80_7
.LBB80_11:                              # %while.end
                                        #   in Loop: Header=BB80_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB80_13
# %bb.12:                               # %if.then19
	jmp	.LBB80_32
.LBB80_13:                              # %if.end20
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB80_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB80_15:                              # %if.end24
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB80_16:                              # %for.cond
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB80_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB80_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB80_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_16
.LBB80_19:                              # %for.end
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB80_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB80_21:                              # %if.end33
                                        #   in Loop: Header=BB80_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB80_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB80_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB80_24
# %bb.23:                               # %if.then39
	jmp	.LBB80_25
.LBB80_24:                              # %if.end40
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_3
.LBB80_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB80_27
# %bb.26:                               # %if.then44
	jmp	.LBB80_38
.LBB80_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB80_29
# %bb.28:                               # %if.then49
	jmp	.LBB80_38
.LBB80_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB80_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB80_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB80_50
.LBB80_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB80_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB80_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB80_49
# %bb.35:                               # %if.end60
	movq	.LJTI80_0(,%rax,8), %rax
	jmpq	*%rax
.LBB80_36:                              # %sw.bb
	callq	configError
.LBB80_37:                              # %sw.bb61
	jmp	.LBB80_38
.LBB80_38:                              # %errhandler_io
	callq	ioError
.LBB80_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB80_50
.LBB80_40:                              # %sw.bb64
	callq	outOfMemory
.LBB80_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB80_50
.LBB80_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB80_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB80_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB80_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB80_50
.LBB80_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB80_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB80_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB80_50
.LBB80_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB80_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$992254840, -56(%rbp)   # imm = 0x3B249B78
	jne	.LBB80_52
.LBB80_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_51
.Lfunc_end80:
	.size	testStream.38, .Lfunc_end80-testStream.38
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI80_0:
	.quad	.LBB80_36
	.quad	.LBB80_49
	.quad	.LBB80_41
	.quad	.LBB80_37
	.quad	.LBB80_42
	.quad	.LBB80_39
	.quad	.LBB80_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function hasSuffix.39
	.type	hasSuffix.39,@function
hasSuffix.39:                           # @hasSuffix.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1995784474, -24(%rbp)  # imm = 0x76F5411A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB81_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB81_5
.LBB81_2:                               # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB81_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB81_5
.LBB81_4:                               # %if.end10
	movb	$0, -9(%rbp)
.LBB81_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1995784474, -24(%rbp)  # imm = 0x76F5411A
	jne	.LBB81_7
.LBB81_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_6
.Lfunc_end81:
	.size	hasSuffix.39, .Lfunc_end81-hasSuffix.39
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.40  # -- Begin function fopen_output_safely.40
	.p2align	4, 0x90
	.type	fopen_output_safely.40,@function
fopen_output_safely.40:                 # @fopen_output_safely.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1519944942, -16(%rbp)  # imm = 0x5A9884EE
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB82_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB82_5
.LBB82_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB82_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB82_4:                               # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB82_5:                               # %return
	movq	-24(%rbp), %rbx
	cmpl	$1519944942, -16(%rbp)  # imm = 0x5A9884EE
	jne	.LBB82_7
.LBB82_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_6
.Lfunc_end82:
	.size	fopen_output_safely.40, .Lfunc_end82-fopen_output_safely.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.41
	.type	addFlagsFromEnvVar.41,@function
addFlagsFromEnvVar.41:                  # @addFlagsFromEnvVar.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$741706881, -24(%rbp)   # imm = 0x2C358C81
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB83_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB83_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_5 Depth 2
                                        #     Child Loop BB83_8 Depth 2
                                        #     Child Loop BB83_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB83_4
# %bb.3:                                # %if.then3
	jmp	.LBB83_21
.LBB83_4:                               # %if.end
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB83_5:                               # %while.cond4
                                        #   Parent Loop BB83_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB83_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB83_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB83_5
.LBB83_7:                               # %while.end
                                        #   in Loop: Header=BB83_2 Depth=1
	jmp	.LBB83_8
.LBB83_8:                               # %while.cond12
                                        #   Parent Loop BB83_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB83_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB83_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB83_10:                              # %land.end
                                        #   in Loop: Header=BB83_8 Depth=2
	testb	$1, %al
	jne	.LBB83_11
	jmp	.LBB83_12
.LBB83_11:                              # %while.body27
                                        #   in Loop: Header=BB83_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_8
.LBB83_12:                              # %while.end28
                                        #   in Loop: Header=BB83_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB83_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB83_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB83_15:                              # %if.end35
                                        #   in Loop: Header=BB83_2 Depth=1
	movl	$0, -8(%rbp)
.LBB83_16:                              # %for.cond
                                        #   Parent Loop BB83_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB83_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB83_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB83_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_16
.LBB83_19:                              # %for.end
                                        #   in Loop: Header=BB83_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB83_20:                              # %if.end46
                                        #   in Loop: Header=BB83_2 Depth=1
	jmp	.LBB83_2
.LBB83_21:                              # %while.end47
	jmp	.LBB83_22
.LBB83_22:                              # %if.end48
	cmpl	$741706881, -24(%rbp)   # imm = 0x2C358C81
	jne	.LBB83_24
.LBB83_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_23
.Lfunc_end83:
	.size	addFlagsFromEnvVar.41, .Lfunc_end83-addFlagsFromEnvVar.41
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.42
	.type	uInt64_isZero.42,@function
uInt64_isZero.42:                       # @uInt64_isZero.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1240002032, -20(%rbp)  # imm = 0x49E8EDF0
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB84_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB84_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB84_7
.LBB84_4:                               # %if.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_5
.LBB84_5:                               # %for.inc
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB84_1
.LBB84_6:                               # %for.end
	movb	$1, -9(%rbp)
.LBB84_7:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$1240002032, -20(%rbp)  # imm = 0x49E8EDF0
	jne	.LBB84_9
.LBB84_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_8
.Lfunc_end84:
	.size	uInt64_isZero.42, .Lfunc_end84-uInt64_isZero.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function saveInputFileMetaInfo.43
	.type	saveInputFileMetaInfo.43,@function
saveInputFileMetaInfo.43:               # @saveInputFileMetaInfo.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$211123479, -8(%rbp)    # imm = 0xC957D17
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rdi
	movabsq	$fileMetaInfo, %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB85_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB85_2:                               # %if.end
	cmpl	$211123479, -8(%rbp)    # imm = 0xC957D17
	jne	.LBB85_4
.LBB85_3:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_3
.Lfunc_end85:
	.size	saveInputFileMetaInfo.43, .Lfunc_end85-saveInputFileMetaInfo.43
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.44  # -- Begin function fopen_output_safely.44
	.p2align	4, 0x90
	.type	fopen_output_safely.44,@function
fopen_output_safely.44:                 # @fopen_output_safely.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$44866046, -16(%rbp)    # imm = 0x2AC99FE
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB86_5
.LBB86_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB86_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB86_4:                               # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB86_5:                               # %return
	movq	-32(%rbp), %rbx
	cmpl	$44866046, -16(%rbp)    # imm = 0x2AC99FE
	jne	.LBB86_7
.LBB86_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_6
.Lfunc_end86:
	.size	fopen_output_safely.44, .Lfunc_end86-fopen_output_safely.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad.45
	.type	pad.45,@function
pad.45:                                 # @pad.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$475625056, -24(%rbp)   # imm = 0x1C597660
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	cmpl	longestFileName, %eax
	jl	.LBB87_2
# %bb.1:                                # %if.then
	jmp	.LBB87_7
.LBB87_2:                               # %if.end
	movl	$1, -20(%rbp)
.LBB87_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %r14d
	movl	longestFileName, %ebx
	movq	-32(%rbp), %rdi
	callq	strlen
	subl	%eax, %ebx
	cmpl	%ebx, %r14d
	jg	.LBB87_6
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB87_3 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.72, %rsi
	movb	$0, %al
	callq	fprintf
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB87_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_3
.LBB87_6:                               # %for.end.loopexit
	jmp	.LBB87_7
.LBB87_7:                               # %for.end
	cmpl	$475625056, -24(%rbp)   # imm = 0x1C597660
	jne	.LBB87_9
.LBB87_8:
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_9:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_8
.Lfunc_end87:
	.size	pad.45, .Lfunc_end87-pad.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.46
	.type	mapSuffix.46,@function
mapSuffix.46:                           # @mapSuffix.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1530500365, -36(%rbp)  # imm = 0x5B39950D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB88_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB88_3
.LBB88_2:                               # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB88_3:                               # %return
	movb	-17(%rbp), %bl
	cmpl	$1530500365, -36(%rbp)  # imm = 0x5B39950D
	jne	.LBB88_5
.LBB88_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_4
.Lfunc_end88:
	.size	mapSuffix.46, .Lfunc_end88-mapSuffix.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.47
	.type	uncompress.47,@function
uncompress.47:                          # @uncompress.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1216349950, -68(%rbp)  # imm = 0x488006FE
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB89_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB89_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB89_3:                               # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB89_6
	jmp	.LBB89_4
.LBB89_4:                               # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB89_14
	jmp	.LBB89_5
.LBB89_5:                               # %if.end
	subl	$3, %eax
	je	.LBB89_7
	jmp	.LBB89_15
.LBB89_6:                               # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB89_15
.LBB89_7:                               # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB89_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB89_11
# %bb.10:                               # %if.then6
	jmp	.LBB89_16
.LBB89_11:                              # %if.end7
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_12
.LBB89_12:                              # %for.inc
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB89_8
.LBB89_13:                              # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB89_15
.LBB89_14:                              # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB89_15:                              # %sw.epilog
	jmp	.LBB89_16
.LBB89_16:                              # %zzz
	cmpl	$1, srcMode
	je	.LBB89_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB89_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB89_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB89_20:                              # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_21:                              # %if.end19
	cmpl	$1, srcMode
	je	.LBB89_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB89_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_24:                              # %if.end29
	cmpl	$3, srcMode
	je	.LBB89_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB89_29
.LBB89_26:                              # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB89_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_28:                              # %if.end40
	jmp	.LBB89_29
.LBB89_29:                              # %if.end41
	cmpl	$3, srcMode
	jne	.LBB89_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB89_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB89_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB89_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB89_34:                              # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_35:                              # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB89_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB89_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB89_38:                              # %if.end61
	jmp	.LBB89_39
.LBB89_39:                              # %if.end62
	cmpl	$3, srcMode
	jne	.LBB89_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB89_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB89_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB89_44
.LBB89_43:                              # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_44:                              # %if.end74
	jmp	.LBB89_45
.LBB89_45:                              # %if.end75
	cmpl	$3, srcMode
	jne	.LBB89_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB89_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB89_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_49:                              # %if.end88
	cmpl	$3, srcMode
	jne	.LBB89_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB89_51:                              # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB89_54
	jmp	.LBB89_52
.LBB89_52:                              # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB89_57
	jmp	.LBB89_53
.LBB89_53:                              # %if.end92
	subl	$3, %eax
	je	.LBB89_62
	jmp	.LBB89_71
.LBB89_54:                              # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB89_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_56:                              # %if.end100
	jmp	.LBB89_72
.LBB89_57:                              # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB89_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB89_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB89_60:                              # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_61:                              # %if.end114
	jmp	.LBB89_72
.LBB89_62:                              # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB89_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB89_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB89_65:                              # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_66:                              # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB89_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB89_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB89_69:                              # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB89_95
.LBB89_70:                              # %if.end141
	jmp	.LBB89_72
.LBB89_71:                              # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB89_72:                              # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB89_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB89_74:                              # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB89_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB89_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB89_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB89_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB89_79:                              # %if.end161
	jmp	.LBB89_80
.LBB89_80:                              # %if.end162
	jmp	.LBB89_81
.LBB89_81:                              # %if.end163
	jmp	.LBB89_87
.LBB89_82:                              # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB89_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB89_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB89_85:                              # %if.end173
	jmp	.LBB89_86
.LBB89_86:                              # %if.end174
	jmp	.LBB89_87
.LBB89_87:                              # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB89_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB89_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB89_90:                              # %if.end182
	jmp	.LBB89_95
.LBB89_91:                              # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB89_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB89_94
.LBB89_93:                              # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB89_94:                              # %if.end190
	jmp	.LBB89_95
.LBB89_95:                              # %if.end191
	cmpl	$1216349950, -68(%rbp)  # imm = 0x488006FE
	jne	.LBB89_97
.LBB89_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_97:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_96
.Lfunc_end89:
	.size	uncompress.47, .Lfunc_end89-uncompress.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.48
	.type	addFlagsFromEnvVar.48,@function
addFlagsFromEnvVar.48:                  # @addFlagsFromEnvVar.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$169700998, -24(%rbp)   # imm = 0xA1D6E86
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB90_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB90_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_5 Depth 2
                                        #     Child Loop BB90_8 Depth 2
                                        #     Child Loop BB90_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB90_4
# %bb.3:                                # %if.then3
	jmp	.LBB90_21
.LBB90_4:                               # %if.end
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB90_5:                               # %while.cond4
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB90_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB90_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB90_5
.LBB90_7:                               # %while.end
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %while.cond12
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB90_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB90_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB90_10:                              # %land.end
                                        #   in Loop: Header=BB90_8 Depth=2
	testb	$1, %al
	jne	.LBB90_11
	jmp	.LBB90_12
.LBB90_11:                              # %while.body27
                                        #   in Loop: Header=BB90_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_8
.LBB90_12:                              # %while.end28
                                        #   in Loop: Header=BB90_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB90_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB90_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB90_15:                              # %if.end35
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	$0, -8(%rbp)
.LBB90_16:                              # %for.cond
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB90_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB90_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_16
.LBB90_19:                              # %for.end
                                        #   in Loop: Header=BB90_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB90_20:                              # %if.end46
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_2
.LBB90_21:                              # %while.end47
	jmp	.LBB90_22
.LBB90_22:                              # %if.end48
	cmpl	$169700998, -24(%rbp)   # imm = 0xA1D6E86
	jne	.LBB90_24
.LBB90_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_23
.Lfunc_end90:
	.size	addFlagsFromEnvVar.48, .Lfunc_end90-addFlagsFromEnvVar.48
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.49
	.type	addFlagsFromEnvVar.49,@function
addFlagsFromEnvVar.49:                  # @addFlagsFromEnvVar.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$679160078, -24(%rbp)   # imm = 0x287B290E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB91_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB91_2:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_5 Depth 2
                                        #     Child Loop BB91_8 Depth 2
                                        #     Child Loop BB91_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB91_4
# %bb.3:                                # %if.then3
	jmp	.LBB91_21
.LBB91_4:                               # %if.end
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB91_5:                               # %while.cond4
                                        #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB91_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB91_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB91_5
.LBB91_7:                               # %while.end
                                        #   in Loop: Header=BB91_2 Depth=1
	jmp	.LBB91_8
.LBB91_8:                               # %while.cond12
                                        #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB91_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB91_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB91_10:                              # %land.end
                                        #   in Loop: Header=BB91_8 Depth=2
	testb	$1, %al
	jne	.LBB91_11
	jmp	.LBB91_12
.LBB91_11:                              # %while.body27
                                        #   in Loop: Header=BB91_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_12:                              # %while.end28
                                        #   in Loop: Header=BB91_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB91_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB91_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB91_15:                              # %if.end35
                                        #   in Loop: Header=BB91_2 Depth=1
	movl	$0, -8(%rbp)
.LBB91_16:                              # %for.cond
                                        #   Parent Loop BB91_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB91_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB91_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB91_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_16
.LBB91_19:                              # %for.end
                                        #   in Loop: Header=BB91_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB91_20:                              # %if.end46
                                        #   in Loop: Header=BB91_2 Depth=1
	jmp	.LBB91_2
.LBB91_21:                              # %while.end47
	jmp	.LBB91_22
.LBB91_22:                              # %if.end48
	cmpl	$679160078, -24(%rbp)   # imm = 0x287B290E
	jne	.LBB91_24
.LBB91_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_23
.Lfunc_end91:
	.size	addFlagsFromEnvVar.49, .Lfunc_end91-addFlagsFromEnvVar.49
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.50
	.type	testStream.50,@function
testStream.50:                          # @testStream.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$115792295, -56(%rbp)   # imm = 0x6E6D9A7
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB92_2
# %bb.1:                                # %if.then
	jmp	.LBB92_38
.LBB92_2:                               # %if.end
	jmp	.LBB92_3
.LBB92_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_7 Depth 2
                                        #     Child Loop BB92_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB92_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB92_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB92_6
.LBB92_5:                               # %if.then5
	jmp	.LBB92_32
.LBB92_6:                               # %if.end6
                                        #   in Loop: Header=BB92_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB92_7:                               # %while.cond7
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB92_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB92_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB92_10
# %bb.9:                                # %if.then15
	jmp	.LBB92_32
.LBB92_10:                              # %if.end16
                                        #   in Loop: Header=BB92_7 Depth=2
	jmp	.LBB92_7
.LBB92_11:                              # %while.end
                                        #   in Loop: Header=BB92_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB92_13
# %bb.12:                               # %if.then19
	jmp	.LBB92_32
.LBB92_13:                              # %if.end20
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB92_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB92_15:                              # %if.end24
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB92_16:                              # %for.cond
                                        #   Parent Loop BB92_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB92_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB92_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB92_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_16
.LBB92_19:                              # %for.end
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB92_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB92_21:                              # %if.end33
                                        #   in Loop: Header=BB92_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB92_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB92_24
# %bb.23:                               # %if.then39
	jmp	.LBB92_25
.LBB92_24:                              # %if.end40
                                        #   in Loop: Header=BB92_3 Depth=1
	jmp	.LBB92_3
.LBB92_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB92_27
# %bb.26:                               # %if.then44
	jmp	.LBB92_38
.LBB92_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB92_29
# %bb.28:                               # %if.then49
	jmp	.LBB92_38
.LBB92_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB92_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB92_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB92_50
.LBB92_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB92_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB92_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB92_49
# %bb.35:                               # %if.end60
	movq	.LJTI92_0(,%rax,8), %rax
	jmpq	*%rax
.LBB92_36:                              # %sw.bb
	callq	configError
.LBB92_37:                              # %sw.bb61
	jmp	.LBB92_38
.LBB92_38:                              # %errhandler_io
	callq	ioError
.LBB92_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB92_50
.LBB92_40:                              # %sw.bb64
	callq	outOfMemory
.LBB92_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB92_50
.LBB92_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB92_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB92_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB92_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB92_50
.LBB92_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB92_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB92_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB92_50
.LBB92_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB92_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$115792295, -56(%rbp)   # imm = 0x6E6D9A7
	jne	.LBB92_52
.LBB92_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_51
.Lfunc_end92:
	.size	testStream.50, .Lfunc_end92-testStream.50
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI92_0:
	.quad	.LBB92_36
	.quad	.LBB92_49
	.quad	.LBB92_41
	.quad	.LBB92_37
	.quad	.LBB92_42
	.quad	.LBB92_39
	.quad	.LBB92_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function hasSuffix.51
	.type	hasSuffix.51,@function
hasSuffix.51:                           # @hasSuffix.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$621196052, -24(%rbp)   # imm = 0x2506B314
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB93_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB93_5
.LBB93_2:                               # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB93_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB93_5
.LBB93_4:                               # %if.end10
	movb	$0, -9(%rbp)
.LBB93_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$621196052, -24(%rbp)   # imm = 0x2506B314
	jne	.LBB93_7
.LBB93_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_6
.Lfunc_end93:
	.size	hasSuffix.51, .Lfunc_end93-hasSuffix.51
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.52
	.type	testStream.52,@function
testStream.52:                          # @testStream.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1504360481, -56(%rbp)  # imm = 0x59AAB821
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB94_2
# %bb.1:                                # %if.then
	jmp	.LBB94_38
.LBB94_2:                               # %if.end
	jmp	.LBB94_3
.LBB94_3:                               # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_7 Depth 2
                                        #     Child Loop BB94_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB94_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB94_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB94_6
.LBB94_5:                               # %if.then5
	jmp	.LBB94_32
.LBB94_6:                               # %if.end6
                                        #   in Loop: Header=BB94_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB94_7:                               # %while.cond7
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB94_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB94_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB94_10
# %bb.9:                                # %if.then15
	jmp	.LBB94_32
.LBB94_10:                              # %if.end16
                                        #   in Loop: Header=BB94_7 Depth=2
	jmp	.LBB94_7
.LBB94_11:                              # %while.end
                                        #   in Loop: Header=BB94_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB94_13
# %bb.12:                               # %if.then19
	jmp	.LBB94_32
.LBB94_13:                              # %if.end20
                                        #   in Loop: Header=BB94_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB94_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB94_15:                              # %if.end24
                                        #   in Loop: Header=BB94_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB94_16:                              # %for.cond
                                        #   Parent Loop BB94_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB94_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB94_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB94_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_16
.LBB94_19:                              # %for.end
                                        #   in Loop: Header=BB94_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB94_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB94_21:                              # %if.end33
                                        #   in Loop: Header=BB94_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB94_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB94_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB94_24
# %bb.23:                               # %if.then39
	jmp	.LBB94_25
.LBB94_24:                              # %if.end40
                                        #   in Loop: Header=BB94_3 Depth=1
	jmp	.LBB94_3
.LBB94_25:                              # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB94_27
# %bb.26:                               # %if.then44
	jmp	.LBB94_38
.LBB94_27:                              # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB94_29
# %bb.28:                               # %if.then49
	jmp	.LBB94_38
.LBB94_29:                              # %if.end50
	cmpl	$2, verbosity
	jl	.LBB94_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB94_31:                              # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB94_50
.LBB94_32:                              # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB94_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB94_34:                              # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB94_49
# %bb.35:                               # %if.end60
	movq	.LJTI94_0(,%rax,8), %rax
	jmpq	*%rax
.LBB94_36:                              # %sw.bb
	callq	configError
.LBB94_37:                              # %sw.bb61
	jmp	.LBB94_38
.LBB94_38:                              # %errhandler_io
	callq	ioError
.LBB94_39:                              # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB94_50
.LBB94_40:                              # %sw.bb64
	callq	outOfMemory
.LBB94_41:                              # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB94_50
.LBB94_42:                              # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB94_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB94_44:                              # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB94_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB94_50
.LBB94_46:                              # %if.else
	cmpb	$0, noisy
	je	.LBB94_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB94_48:                              # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB94_50
.LBB94_49:                              # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB94_50:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1504360481, -56(%rbp)  # imm = 0x59AAB821
	jne	.LBB94_52
.LBB94_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_51
.Lfunc_end94:
	.size	testStream.52, .Lfunc_end94-testStream.52
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI94_0:
	.quad	.LBB94_36
	.quad	.LBB94_49
	.quad	.LBB94_41
	.quad	.LBB94_37
	.quad	.LBB94_42
	.quad	.LBB94_39
	.quad	.LBB94_40
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.53
.LCPI95_0:
	.quad	4607182418800017408     # double 1
.LCPI95_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.53,@function
uInt64_to_double.53:                    # @uInt64_to_double.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1737921207, -28(%rbp)  # imm = 0x679692B7
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB95_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	vmovsd	.LCPI95_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1737921207, -28(%rbp)  # imm = 0x679692B7
	jne	.LBB95_6
.LBB95_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB95_5
.Lfunc_end95:
	.size	uInt64_to_double.53, .Lfunc_end95-uInt64_to_double.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.54
	.type	fileExists.54,@function
fileExists.54:                          # @fileExists.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$172175955, -28(%rbp)   # imm = 0xA433253
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB96_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB96_2:                               # %if.end
	movb	-9(%rbp), %bl
	cmpl	$172175955, -28(%rbp)   # imm = 0xA433253
	jne	.LBB96_4
.LBB96_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_4:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_3
.Lfunc_end96:
	.size	fileExists.54, .Lfunc_end96-fileExists.54
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.55  # -- Begin function fopen_output_safely.55
	.p2align	4, 0x90
	.type	fopen_output_safely.55,@function
fopen_output_safely.55:                 # @fopen_output_safely.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$985881797, -16(%rbp)   # imm = 0x3AC35CC5
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB97_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB97_5
.LBB97_2:                               # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB97_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB97_4:                               # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB97_5:                               # %return
	movq	-24(%rbp), %rbx
	cmpl	$985881797, -16(%rbp)   # imm = 0x3AC35CC5
	jne	.LBB97_7
.LBB97_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_6
.Lfunc_end97:
	.size	fopen_output_safely.55, .Lfunc_end97-fopen_output_safely.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.56
.LCPI98_0:
	.quad	4607182418800017408     # double 1
.LCPI98_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.56,@function
uInt64_to_double.56:                    # @uInt64_to_double.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI98_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$998427401, -28(%rbp)   # imm = 0x3B82CB09
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB98_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB98_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB98_1 Depth=1
	vmovsd	.LCPI98_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB98_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB98_1
.LBB98_4:                               # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$998427401, -28(%rbp)   # imm = 0x3B82CB09
	jne	.LBB98_6
.LBB98_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB98_5
.Lfunc_end98:
	.size	uInt64_to_double.56, .Lfunc_end98-uInt64_to_double.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.57
	.type	hasSuffix.57,@function
hasSuffix.57:                           # @hasSuffix.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$626299134, -24(%rbp)   # imm = 0x255490FE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB99_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB99_5
.LBB99_2:                               # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB99_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB99_5
.LBB99_4:                               # %if.end10
	movb	$0, -9(%rbp)
.LBB99_5:                               # %return
	movb	-9(%rbp), %bl
	cmpl	$626299134, -24(%rbp)   # imm = 0x255490FE
	jne	.LBB99_7
.LBB99_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_6
.Lfunc_end99:
	.size	hasSuffix.57, .Lfunc_end99-hasSuffix.57
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.58
	.type	fileExists.58,@function
fileExists.58:                          # @fileExists.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$449409278, -28(%rbp)   # imm = 0x1AC970FE
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB100_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB100_2:                              # %if.end
	movb	-9(%rbp), %bl
	cmpl	$449409278, -28(%rbp)   # imm = 0x1AC970FE
	jne	.LBB100_4
.LBB100_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_3
.Lfunc_end100:
	.size	fileExists.58, .Lfunc_end100-fileExists.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.59
	.type	compress.59,@function
compress.59:                            # @compress.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$372808576, -64(%rbp)   # imm = 0x16389B80
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB101_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB101_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB101_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB101_6
	jmp	.LBB101_4
.LBB101_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB101_8
	jmp	.LBB101_5
.LBB101_5:                              # %if.end
	subl	$3, %eax
	je	.LBB101_7
	jmp	.LBB101_9
.LBB101_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB101_9
.LBB101_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB101_9
.LBB101_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB101_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB101_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB101_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB101_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB101_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB101_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB101_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB101_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB101_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB101_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB101_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB101_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB101_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_23:                             # %if.end34
                                        #   in Loop: Header=BB101_18 Depth=1
	jmp	.LBB101_24
.LBB101_24:                             # %for.inc
                                        #   in Loop: Header=BB101_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB101_18
.LBB101_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB101_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB101_30
.LBB101_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB101_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_29:                             # %if.end45
	jmp	.LBB101_30
.LBB101_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB101_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB101_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB101_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB101_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB101_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB101_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB101_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB101_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB101_41
.LBB101_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_41:                             # %if.end72
	jmp	.LBB101_42
.LBB101_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB101_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB101_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB101_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB101_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB101_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB101_51
	jmp	.LBB101_49
.LBB101_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB101_54
	jmp	.LBB101_50
.LBB101_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB101_61
	jmp	.LBB101_70
.LBB101_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB101_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_53:                             # %if.end98
	jmp	.LBB101_71
.LBB101_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB101_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB101_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB101_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB101_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_60:                             # %if.end119
	jmp	.LBB101_71
.LBB101_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB101_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB101_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB101_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB101_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB101_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB101_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB101_80
.LBB101_69:                             # %if.end146
	jmp	.LBB101_71
.LBB101_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB101_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB101_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB101_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB101_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB101_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB101_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB101_77:                             # %if.end163
	jmp	.LBB101_78
.LBB101_78:                             # %if.end164
	jmp	.LBB101_79
.LBB101_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB101_80:                             # %return
	cmpl	$372808576, -64(%rbp)   # imm = 0x16389B80
	jne	.LBB101_82
.LBB101_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_81
.Lfunc_end101:
	.size	compress.59, .Lfunc_end101-compress.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.60
	.type	uncompressStream.60,@function
uncompressStream.60:                    # @uncompressStream.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1973755524, -68(%rbp)  # imm = 0x75A51E84
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_2
# %bb.1:                                # %if.then
	jmp	.LBB102_66
.LBB102_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_4
# %bb.3:                                # %if.then3
	jmp	.LBB102_66
.LBB102_4:                              # %if.end4
	jmp	.LBB102_5
.LBB102_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_9 Depth 2
                                        #     Child Loop BB102_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB102_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB102_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB102_8
.LBB102_7:                              # %if.then9
	jmp	.LBB102_62
.LBB102_8:                              # %if.end10
                                        #   in Loop: Header=BB102_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB102_9:                              # %while.cond11
                                        #   Parent Loop BB102_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB102_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB102_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB102_12
# %bb.11:                               # %if.then19
	jmp	.LBB102_49
.LBB102_12:                             # %if.end20
                                        #   in Loop: Header=BB102_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB102_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB102_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB102_16
.LBB102_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB102_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB102_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB102_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB102_16:                             # %if.end32
                                        #   in Loop: Header=BB102_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_18
# %bb.17:                               # %if.then35
	jmp	.LBB102_66
.LBB102_18:                             # %if.end36
                                        #   in Loop: Header=BB102_9 Depth=2
	jmp	.LBB102_9
.LBB102_19:                             # %while.end
                                        #   in Loop: Header=BB102_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB102_21
# %bb.20:                               # %if.then39
	jmp	.LBB102_62
.LBB102_21:                             # %if.end40
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB102_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB102_23:                             # %if.end44
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB102_24:                             # %for.cond
                                        #   Parent Loop BB102_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB102_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB102_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB102_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB102_24
.LBB102_27:                             # %for.end
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB102_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB102_29:                             # %if.end53
                                        #   in Loop: Header=BB102_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB102_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB102_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB102_32
# %bb.31:                               # %if.then60
	jmp	.LBB102_33
.LBB102_32:                             # %if.end61
                                        #   in Loop: Header=BB102_5 Depth=1
	jmp	.LBB102_5
.LBB102_33:                             # %while.end62
	jmp	.LBB102_34
.LBB102_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_36
# %bb.35:                               # %if.then65
	jmp	.LBB102_66
.LBB102_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB102_38
# %bb.37:                               # %if.then70
	jmp	.LBB102_66
.LBB102_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_40
# %bb.39:                               # %if.then74
	jmp	.LBB102_66
.LBB102_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB102_42
# %bb.41:                               # %if.then79
	jmp	.LBB102_66
.LBB102_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB102_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB102_45
# %bb.44:                               # %if.then87
	jmp	.LBB102_66
.LBB102_45:                             # %if.end88
	jmp	.LBB102_46
.LBB102_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB102_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB102_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB102_80
.LBB102_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB102_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB102_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB102_53
# %bb.52:                               # %if.then100
	jmp	.LBB102_60
.LBB102_53:                             # %if.end101
                                        #   in Loop: Header=BB102_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_55
# %bb.54:                               # %if.then107
	jmp	.LBB102_66
.LBB102_55:                             # %if.end108
                                        #   in Loop: Header=BB102_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB102_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB102_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB102_57:                             # %if.end115
                                        #   in Loop: Header=BB102_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB102_59
# %bb.58:                               # %if.then118
	jmp	.LBB102_66
.LBB102_59:                             # %if.end119
                                        #   in Loop: Header=BB102_51 Depth=1
	jmp	.LBB102_51
.LBB102_60:                             # %while.end120
	jmp	.LBB102_34
.LBB102_61:                             # %if.end121
	jmp	.LBB102_62
.LBB102_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB102_79
# %bb.63:                               # %errhandler
	movq	.LJTI102_0(,%rax,8), %rax
	jmpq	*%rax
.LBB102_64:                             # %sw.bb
	callq	configError
.LBB102_65:                             # %sw.bb122
	jmp	.LBB102_66
.LBB102_66:                             # %errhandler_io
	callq	ioError
.LBB102_67:                             # %sw.bb123
	callq	crcError
.LBB102_68:                             # %sw.bb124
	callq	outOfMemory
.LBB102_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB102_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB102_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB102_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB102_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB102_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB102_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB102_80
.LBB102_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB102_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB102_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB102_80
.LBB102_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB102_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1973755524, -68(%rbp)  # imm = 0x75A51E84
	jne	.LBB102_82
.LBB102_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_81
.Lfunc_end102:
	.size	uncompressStream.60, .Lfunc_end102-uncompressStream.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI102_0:
	.quad	.LBB102_64
	.quad	.LBB102_79
	.quad	.LBB102_69
	.quad	.LBB102_65
	.quad	.LBB102_70
	.quad	.LBB102_67
	.quad	.LBB102_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uncompress.61
	.type	uncompress.61,@function
uncompress.61:                          # @uncompress.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2136673982, -68(%rbp)  # imm = 0x7F5B0EBE
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB103_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB103_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB103_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB103_6
	jmp	.LBB103_4
.LBB103_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB103_14
	jmp	.LBB103_5
.LBB103_5:                              # %if.end
	subl	$3, %eax
	je	.LBB103_7
	jmp	.LBB103_15
.LBB103_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB103_15
.LBB103_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB103_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB103_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB103_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB103_11
# %bb.10:                               # %if.then6
	jmp	.LBB103_16
.LBB103_11:                             # %if.end7
                                        #   in Loop: Header=BB103_8 Depth=1
	jmp	.LBB103_12
.LBB103_12:                             # %for.inc
                                        #   in Loop: Header=BB103_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB103_8
.LBB103_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB103_15
.LBB103_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB103_15:                             # %sw.epilog
	jmp	.LBB103_16
.LBB103_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB103_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB103_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB103_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB103_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB103_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB103_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB103_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB103_29
.LBB103_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB103_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_28:                             # %if.end40
	jmp	.LBB103_29
.LBB103_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB103_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB103_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB103_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB103_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB103_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB103_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB103_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB103_38:                             # %if.end61
	jmp	.LBB103_39
.LBB103_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB103_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB103_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB103_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB103_44
.LBB103_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_44:                             # %if.end74
	jmp	.LBB103_45
.LBB103_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB103_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB103_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB103_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB103_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB103_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB103_54
	jmp	.LBB103_52
.LBB103_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB103_57
	jmp	.LBB103_53
.LBB103_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB103_62
	jmp	.LBB103_71
.LBB103_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB103_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_56:                             # %if.end100
	jmp	.LBB103_72
.LBB103_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB103_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB103_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB103_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_61:                             # %if.end114
	jmp	.LBB103_72
.LBB103_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB103_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB103_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB103_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB103_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB103_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB103_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB103_95
.LBB103_70:                             # %if.end141
	jmp	.LBB103_72
.LBB103_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB103_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB103_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB103_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB103_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB103_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB103_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB103_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB103_79:                             # %if.end161
	jmp	.LBB103_80
.LBB103_80:                             # %if.end162
	jmp	.LBB103_81
.LBB103_81:                             # %if.end163
	jmp	.LBB103_87
.LBB103_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB103_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB103_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB103_85:                             # %if.end173
	jmp	.LBB103_86
.LBB103_86:                             # %if.end174
	jmp	.LBB103_87
.LBB103_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB103_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB103_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB103_90:                             # %if.end182
	jmp	.LBB103_95
.LBB103_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB103_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB103_94
.LBB103_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB103_94:                             # %if.end190
	jmp	.LBB103_95
.LBB103_95:                             # %if.end191
	cmpl	$2136673982, -68(%rbp)  # imm = 0x7F5B0EBE
	jne	.LBB103_97
.LBB103_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_96
.Lfunc_end103:
	.size	uncompress.61, .Lfunc_end103-uncompress.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.62
	.type	testStream.62,@function
testStream.62:                          # @testStream.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$669129985, -52(%rbp)   # imm = 0x27E21D01
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB104_2
# %bb.1:                                # %if.then
	jmp	.LBB104_38
.LBB104_2:                              # %if.end
	jmp	.LBB104_3
.LBB104_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB104_7 Depth 2
                                        #     Child Loop BB104_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB104_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB104_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB104_6
.LBB104_5:                              # %if.then5
	jmp	.LBB104_32
.LBB104_6:                              # %if.end6
                                        #   in Loop: Header=BB104_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB104_7:                              # %while.cond7
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB104_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB104_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB104_10
# %bb.9:                                # %if.then15
	jmp	.LBB104_32
.LBB104_10:                             # %if.end16
                                        #   in Loop: Header=BB104_7 Depth=2
	jmp	.LBB104_7
.LBB104_11:                             # %while.end
                                        #   in Loop: Header=BB104_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB104_13
# %bb.12:                               # %if.then19
	jmp	.LBB104_32
.LBB104_13:                             # %if.end20
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB104_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB104_15:                             # %if.end24
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB104_16:                             # %for.cond
                                        #   Parent Loop BB104_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB104_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB104_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB104_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB104_16
.LBB104_19:                             # %for.end
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB104_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB104_21:                             # %if.end33
                                        #   in Loop: Header=BB104_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB104_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB104_24
# %bb.23:                               # %if.then39
	jmp	.LBB104_25
.LBB104_24:                             # %if.end40
                                        #   in Loop: Header=BB104_3 Depth=1
	jmp	.LBB104_3
.LBB104_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB104_27
# %bb.26:                               # %if.then44
	jmp	.LBB104_38
.LBB104_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB104_29
# %bb.28:                               # %if.then49
	jmp	.LBB104_38
.LBB104_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB104_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB104_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB104_50
.LBB104_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB104_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB104_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB104_49
# %bb.35:                               # %if.end60
	movq	.LJTI104_0(,%rax,8), %rax
	jmpq	*%rax
.LBB104_36:                             # %sw.bb
	callq	configError
.LBB104_37:                             # %sw.bb61
	jmp	.LBB104_38
.LBB104_38:                             # %errhandler_io
	callq	ioError
.LBB104_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB104_50
.LBB104_40:                             # %sw.bb64
	callq	outOfMemory
.LBB104_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB104_50
.LBB104_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB104_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB104_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB104_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB104_50
.LBB104_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB104_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB104_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB104_50
.LBB104_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB104_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$669129985, -52(%rbp)   # imm = 0x27E21D01
	jne	.LBB104_52
.LBB104_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_51
.Lfunc_end104:
	.size	testStream.62, .Lfunc_end104-testStream.62
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI104_0:
	.quad	.LBB104_36
	.quad	.LBB104_49
	.quad	.LBB104_41
	.quad	.LBB104_37
	.quad	.LBB104_42
	.quad	.LBB104_39
	.quad	.LBB104_40
                                        # -- End function
	.text
	.globl	fopen_output_safely.63  # -- Begin function fopen_output_safely.63
	.p2align	4, 0x90
	.type	fopen_output_safely.63,@function
fopen_output_safely.63:                 # @fopen_output_safely.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$303123552, -16(%rbp)   # imm = 0x12114C60
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB105_5
.LBB105_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB105_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB105_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB105_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$303123552, -16(%rbp)   # imm = 0x12114C60
	jne	.LBB105_7
.LBB105_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_6
.Lfunc_end105:
	.size	fopen_output_safely.63, .Lfunc_end105-fopen_output_safely.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function fileExists.64
	.type	fileExists.64,@function
fileExists.64:                          # @fileExists.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$428110527, -28(%rbp)   # imm = 0x198472BF
	movq	%rdi, -40(%rbp)
	movq	-40(%rbp), %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movb	%al, -9(%rbp)
	cmpq	$0, -24(%rbp)
	je	.LBB106_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB106_2:                              # %if.end
	movb	-9(%rbp), %bl
	cmpl	$428110527, -28(%rbp)   # imm = 0x198472BF
	jne	.LBB106_4
.LBB106_3:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_4:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_3
.Lfunc_end106:
	.size	fileExists.64, .Lfunc_end106-fileExists.64
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.65  # -- Begin function fopen_output_safely.65
	.p2align	4, 0x90
	.type	fopen_output_safely.65,@function
fopen_output_safely.65:                 # @fopen_output_safely.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$577456010, -16(%rbp)   # imm = 0x226B478A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB107_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB107_5
.LBB107_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB107_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB107_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB107_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$577456010, -16(%rbp)   # imm = 0x226B478A
	jne	.LBB107_7
.LBB107_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_6
.Lfunc_end107:
	.size	fopen_output_safely.65, .Lfunc_end107-fopen_output_safely.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.66
	.type	myfeof.66,@function
myfeof.66:                              # @myfeof.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1709238659, -20(%rbp)  # imm = 0x65E0E983
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB108_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB108_3
.LBB108_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB108_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1709238659, -20(%rbp)  # imm = 0x65E0E983
	jne	.LBB108_5
.LBB108_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_4
.Lfunc_end108:
	.size	myfeof.66, .Lfunc_end108-myfeof.66
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.67
	.type	uInt64_qrm10.67,@function
uInt64_qrm10.67:                        # @uInt64_qrm10.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2010448931, -24(%rbp)  # imm = 0x77D50423
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB109_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB109_1
.LBB109_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2010448931, -24(%rbp)  # imm = 0x77D50423
	jne	.LBB109_6
.LBB109_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_5
.Lfunc_end109:
	.size	uInt64_qrm10.67, .Lfunc_end109-uInt64_qrm10.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.68
	.type	testStream.68,@function
testStream.68:                          # @testStream.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1528276335, -52(%rbp)  # imm = 0x5B17A56F
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB110_2
# %bb.1:                                # %if.then
	jmp	.LBB110_38
.LBB110_2:                              # %if.end
	jmp	.LBB110_3
.LBB110_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_7 Depth 2
                                        #     Child Loop BB110_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB110_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB110_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB110_6
.LBB110_5:                              # %if.then5
	jmp	.LBB110_32
.LBB110_6:                              # %if.end6
                                        #   in Loop: Header=BB110_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB110_7:                              # %while.cond7
                                        #   Parent Loop BB110_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB110_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB110_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB110_10
# %bb.9:                                # %if.then15
	jmp	.LBB110_32
.LBB110_10:                             # %if.end16
                                        #   in Loop: Header=BB110_7 Depth=2
	jmp	.LBB110_7
.LBB110_11:                             # %while.end
                                        #   in Loop: Header=BB110_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB110_13
# %bb.12:                               # %if.then19
	jmp	.LBB110_32
.LBB110_13:                             # %if.end20
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB110_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB110_15:                             # %if.end24
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB110_16:                             # %for.cond
                                        #   Parent Loop BB110_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB110_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB110_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB110_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB110_16
.LBB110_19:                             # %for.end
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB110_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB110_21:                             # %if.end33
                                        #   in Loop: Header=BB110_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB110_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB110_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB110_24
# %bb.23:                               # %if.then39
	jmp	.LBB110_25
.LBB110_24:                             # %if.end40
                                        #   in Loop: Header=BB110_3 Depth=1
	jmp	.LBB110_3
.LBB110_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB110_27
# %bb.26:                               # %if.then44
	jmp	.LBB110_38
.LBB110_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB110_29
# %bb.28:                               # %if.then49
	jmp	.LBB110_38
.LBB110_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB110_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB110_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB110_50
.LBB110_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB110_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB110_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB110_49
# %bb.35:                               # %if.end60
	movq	.LJTI110_0(,%rax,8), %rax
	jmpq	*%rax
.LBB110_36:                             # %sw.bb
	callq	configError
.LBB110_37:                             # %sw.bb61
	jmp	.LBB110_38
.LBB110_38:                             # %errhandler_io
	callq	ioError
.LBB110_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB110_50
.LBB110_40:                             # %sw.bb64
	callq	outOfMemory
.LBB110_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB110_50
.LBB110_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB110_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB110_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB110_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB110_50
.LBB110_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB110_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB110_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB110_50
.LBB110_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB110_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1528276335, -52(%rbp)  # imm = 0x5B17A56F
	jne	.LBB110_52
.LBB110_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_51
.Lfunc_end110:
	.size	testStream.68, .Lfunc_end110-testStream.68
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI110_0:
	.quad	.LBB110_36
	.quad	.LBB110_49
	.quad	.LBB110_41
	.quad	.LBB110_37
	.quad	.LBB110_42
	.quad	.LBB110_39
	.quad	.LBB110_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.69
	.type	snocString.69,@function
snocString.69:                          # @snocString.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$255207050, -44(%rbp)   # imm = 0xF36268A
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB111_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB111_6
.LBB111_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB111_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB111_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB111_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB111_3
.LBB111_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB111_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$255207050, -44(%rbp)   # imm = 0xF36268A
	jne	.LBB111_8
.LBB111_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_7
.Lfunc_end111:
	.size	snocString.69, .Lfunc_end111-snocString.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.70
	.type	mapSuffix.70,@function
mapSuffix.70:                           # @mapSuffix.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1490622829, -36(%rbp)  # imm = 0x58D9196D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB112_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB112_3
.LBB112_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB112_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1490622829, -36(%rbp)  # imm = 0x58D9196D
	jne	.LBB112_5
.LBB112_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_4
.Lfunc_end112:
	.size	mapSuffix.70, .Lfunc_end112-mapSuffix.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.71
	.type	snocString.71,@function
snocString.71:                          # @snocString.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1616739648, -44(%rbp)  # imm = 0x605D7D40
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB113_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB113_6
.LBB113_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB113_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB113_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB113_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB113_3
.LBB113_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB113_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1616739648, -44(%rbp)  # imm = 0x605D7D40
	jne	.LBB113_8
.LBB113_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_7
.Lfunc_end113:
	.size	snocString.71, .Lfunc_end113-snocString.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.72
	.type	cleanUpAndFail.72,@function
cleanUpAndFail.72:                      # @cleanUpAndFail.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$398146266, -12(%rbp)   # imm = 0x17BB3ADA
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB114_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB114_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB114_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB114_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB114_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB114_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB114_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB114_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB114_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB114_10:                             # %if.end19
	jmp	.LBB114_12
.LBB114_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB114_12:                             # %if.end24
	jmp	.LBB114_13
.LBB114_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB114_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB114_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB114_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB114_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end114:
	.size	cleanUpAndFail.72, .Lfunc_end114-cleanUpAndFail.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.73
.LCPI115_0:
	.quad	4607182418800017408     # double 1
.LCPI115_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.73,@function
uInt64_to_double.73:                    # @uInt64_to_double.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI115_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$606802532, -28(%rbp)   # imm = 0x242B1264
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB115_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	vmovsd	.LCPI115_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_1
.LBB115_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$606802532, -28(%rbp)   # imm = 0x242B1264
	jne	.LBB115_6
.LBB115_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB115_5
.Lfunc_end115:
	.size	uInt64_to_double.73, .Lfunc_end115-uInt64_to_double.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.74
	.type	uInt64_from_UInt32s.74,@function
uInt64_from_UInt32s.74:                 # @uInt64_from_UInt32s.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1602839830, -20(%rbp)  # imm = 0x5F896516
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$1602839830, -20(%rbp)  # imm = 0x5F896516
	jne	.LBB116_2
.LBB116_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_1
.Lfunc_end116:
	.size	uInt64_from_UInt32s.74, .Lfunc_end116-uInt64_from_UInt32s.74
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.75
	.type	hasSuffix.75,@function
hasSuffix.75:                           # @hasSuffix.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$944875564, -24(%rbp)   # imm = 0x3851A82C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB117_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB117_5
.LBB117_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB117_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB117_5
.LBB117_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB117_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$944875564, -24(%rbp)   # imm = 0x3851A82C
	jne	.LBB117_7
.LBB117_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_6
.Lfunc_end117:
	.size	hasSuffix.75, .Lfunc_end117-hasSuffix.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.76
.LCPI118_0:
	.quad	4636737291354636288     # double 100
.LCPI118_1:
	.quad	4607182418800017408     # double 1
.LCPI118_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.76,@function
compressStream.76:                      # @compressStream.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1782155121, -76(%rbp)  # imm = 0x6A398771
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB118_2
# %bb.1:                                # %if.then
	jmp	.LBB118_46
.LBB118_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB118_4
# %bb.3:                                # %if.then3
	jmp	.LBB118_46
.LBB118_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB118_6
# %bb.5:                                # %if.then6
	jmp	.LBB118_40
.LBB118_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB118_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB118_8:                              # %if.end11
	jmp	.LBB118_9
.LBB118_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB118_11
# %bb.10:                               # %if.then14
	jmp	.LBB118_18
.LBB118_11:                             # %if.end15
                                        #   in Loop: Header=BB118_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB118_13
# %bb.12:                               # %if.then19
	jmp	.LBB118_46
.LBB118_13:                             # %if.end20
                                        #   in Loop: Header=BB118_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB118_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB118_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB118_15:                             # %if.end25
                                        #   in Loop: Header=BB118_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB118_17
# %bb.16:                               # %if.then28
	jmp	.LBB118_40
.LBB118_17:                             # %if.end29
                                        #   in Loop: Header=BB118_9 Depth=1
	jmp	.LBB118_9
.LBB118_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB118_20
# %bb.19:                               # %if.then32
	jmp	.LBB118_40
.LBB118_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB118_22
# %bb.21:                               # %if.then36
	jmp	.LBB118_46
.LBB118_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB118_24
# %bb.23:                               # %if.then41
	jmp	.LBB118_46
.LBB118_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB118_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB118_27
# %bb.26:                               # %if.then49
	jmp	.LBB118_46
.LBB118_27:                             # %if.end50
	jmp	.LBB118_28
.LBB118_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB118_30
# %bb.29:                               # %if.then54
	jmp	.LBB118_46
.LBB118_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB118_32
# %bb.31:                               # %if.then59
	jmp	.LBB118_46
.LBB118_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB118_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB118_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB118_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB118_37
.LBB118_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI118_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI118_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI118_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB118_37:                             # %if.end80
	jmp	.LBB118_38
.LBB118_38:                             # %if.end81
	cmpl	$1782155121, -76(%rbp)  # imm = 0x6A398771
	jne	.LBB118_48
.LBB118_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB118_43
	jmp	.LBB118_41
.LBB118_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB118_45
	jmp	.LBB118_42
.LBB118_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB118_44
	jmp	.LBB118_47
.LBB118_43:                             # %sw.bb
	callq	configError
.LBB118_44:                             # %sw.bb82
	callq	outOfMemory
.LBB118_45:                             # %sw.bb83
	jmp	.LBB118_46
.LBB118_46:                             # %errhandler_io
	callq	ioError
.LBB118_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB118_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB118_39
.Lfunc_end118:
	.size	compressStream.76, .Lfunc_end118-compressStream.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.77
.LCPI119_0:
	.quad	4636737291354636288     # double 100
.LCPI119_1:
	.quad	4607182418800017408     # double 1
.LCPI119_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.77,@function
compressStream.77:                      # @compressStream.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1319272174, -76(%rbp)  # imm = 0x4EA27EEE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB119_2
# %bb.1:                                # %if.then
	jmp	.LBB119_46
.LBB119_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB119_4
# %bb.3:                                # %if.then3
	jmp	.LBB119_46
.LBB119_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB119_6
# %bb.5:                                # %if.then6
	jmp	.LBB119_40
.LBB119_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB119_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB119_8:                              # %if.end11
	jmp	.LBB119_9
.LBB119_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB119_11
# %bb.10:                               # %if.then14
	jmp	.LBB119_18
.LBB119_11:                             # %if.end15
                                        #   in Loop: Header=BB119_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB119_13
# %bb.12:                               # %if.then19
	jmp	.LBB119_46
.LBB119_13:                             # %if.end20
                                        #   in Loop: Header=BB119_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB119_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB119_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB119_15:                             # %if.end25
                                        #   in Loop: Header=BB119_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB119_17
# %bb.16:                               # %if.then28
	jmp	.LBB119_40
.LBB119_17:                             # %if.end29
                                        #   in Loop: Header=BB119_9 Depth=1
	jmp	.LBB119_9
.LBB119_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB119_20
# %bb.19:                               # %if.then32
	jmp	.LBB119_40
.LBB119_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB119_22
# %bb.21:                               # %if.then36
	jmp	.LBB119_46
.LBB119_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB119_24
# %bb.23:                               # %if.then41
	jmp	.LBB119_46
.LBB119_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB119_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB119_27
# %bb.26:                               # %if.then49
	jmp	.LBB119_46
.LBB119_27:                             # %if.end50
	jmp	.LBB119_28
.LBB119_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB119_30
# %bb.29:                               # %if.then54
	jmp	.LBB119_46
.LBB119_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB119_32
# %bb.31:                               # %if.then59
	jmp	.LBB119_46
.LBB119_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB119_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB119_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB119_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB119_37
.LBB119_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI119_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI119_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI119_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB119_37:                             # %if.end80
	jmp	.LBB119_38
.LBB119_38:                             # %if.end81
	cmpl	$1319272174, -76(%rbp)  # imm = 0x4EA27EEE
	jne	.LBB119_48
.LBB119_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB119_43
	jmp	.LBB119_41
.LBB119_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB119_45
	jmp	.LBB119_42
.LBB119_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB119_44
	jmp	.LBB119_47
.LBB119_43:                             # %sw.bb
	callq	configError
.LBB119_44:                             # %sw.bb82
	callq	outOfMemory
.LBB119_45:                             # %sw.bb83
	jmp	.LBB119_46
.LBB119_46:                             # %errhandler_io
	callq	ioError
.LBB119_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB119_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB119_39
.Lfunc_end119:
	.size	compressStream.77, .Lfunc_end119-compressStream.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.78
	.type	countHardLinks.78,@function
countHardLinks.78:                      # @countHardLinks.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1789062048, -20(%rbp)  # imm = 0x6AA2EBA0
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB120_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB120_3
.LBB120_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB120_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1789062048, -20(%rbp)  # imm = 0x6AA2EBA0
	jne	.LBB120_5
.LBB120_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_4
.Lfunc_end120:
	.size	countHardLinks.78, .Lfunc_end120-countHardLinks.78
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.79
	.type	uInt64_from_UInt32s.79,@function
uInt64_from_UInt32s.79:                 # @uInt64_from_UInt32s.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$868391180, -20(%rbp)   # imm = 0x33C2990C
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$868391180, -20(%rbp)   # imm = 0x33C2990C
	jne	.LBB121_2
.LBB121_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_1
.Lfunc_end121:
	.size	uInt64_from_UInt32s.79, .Lfunc_end121-uInt64_from_UInt32s.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function pad.80
	.type	pad.80,@function
pad.80:                                 # @pad.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$231163236, -24(%rbp)   # imm = 0xDC74564
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	cmpl	longestFileName, %eax
	jl	.LBB122_2
# %bb.1:                                # %if.then
	jmp	.LBB122_7
.LBB122_2:                              # %if.end
	movl	$1, -20(%rbp)
.LBB122_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %r14d
	movl	longestFileName, %ebx
	movq	-32(%rbp), %rdi
	callq	strlen
	subl	%eax, %ebx
	cmpl	%ebx, %r14d
	jg	.LBB122_6
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB122_3 Depth=1
	movq	stderr, %rdi
	movabsq	$.L.str.72, %rsi
	movb	$0, %al
	callq	fprintf
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB122_3 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_3
.LBB122_6:                              # %for.end.loopexit
	jmp	.LBB122_7
.LBB122_7:                              # %for.end
	cmpl	$231163236, -24(%rbp)   # imm = 0xDC74564
	jne	.LBB122_9
.LBB122_8:
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_8
.Lfunc_end122:
	.size	pad.80, .Lfunc_end122-pad.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.81
	.type	uncompressStream.81,@function
uncompressStream.81:                    # @uncompressStream.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1143453017, -68(%rbp)  # imm = 0x4427B559
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_2
# %bb.1:                                # %if.then
	jmp	.LBB123_66
.LBB123_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_4
# %bb.3:                                # %if.then3
	jmp	.LBB123_66
.LBB123_4:                              # %if.end4
	jmp	.LBB123_5
.LBB123_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_9 Depth 2
                                        #     Child Loop BB123_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB123_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB123_8
.LBB123_7:                              # %if.then9
	jmp	.LBB123_62
.LBB123_8:                              # %if.end10
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB123_9:                              # %while.cond11
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB123_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB123_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB123_12
# %bb.11:                               # %if.then19
	jmp	.LBB123_49
.LBB123_12:                             # %if.end20
                                        #   in Loop: Header=BB123_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB123_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB123_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB123_16
.LBB123_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB123_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB123_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB123_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB123_16:                             # %if.end32
                                        #   in Loop: Header=BB123_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_18
# %bb.17:                               # %if.then35
	jmp	.LBB123_66
.LBB123_18:                             # %if.end36
                                        #   in Loop: Header=BB123_9 Depth=2
	jmp	.LBB123_9
.LBB123_19:                             # %while.end
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB123_21
# %bb.20:                               # %if.then39
	jmp	.LBB123_62
.LBB123_21:                             # %if.end40
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB123_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB123_23:                             # %if.end44
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB123_24:                             # %for.cond
                                        #   Parent Loop BB123_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB123_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB123_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB123_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB123_24
.LBB123_27:                             # %for.end
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB123_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB123_29:                             # %if.end53
                                        #   in Loop: Header=BB123_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB123_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB123_32
# %bb.31:                               # %if.then60
	jmp	.LBB123_33
.LBB123_32:                             # %if.end61
                                        #   in Loop: Header=BB123_5 Depth=1
	jmp	.LBB123_5
.LBB123_33:                             # %while.end62
	jmp	.LBB123_34
.LBB123_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_36
# %bb.35:                               # %if.then65
	jmp	.LBB123_66
.LBB123_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB123_38
# %bb.37:                               # %if.then70
	jmp	.LBB123_66
.LBB123_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_40
# %bb.39:                               # %if.then74
	jmp	.LBB123_66
.LBB123_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -44(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB123_42
# %bb.41:                               # %if.then79
	jmp	.LBB123_66
.LBB123_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB123_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -44(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -44(%rbp)
	jne	.LBB123_45
# %bb.44:                               # %if.then87
	jmp	.LBB123_66
.LBB123_45:                             # %if.end88
	jmp	.LBB123_46
.LBB123_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB123_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB123_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB123_80
.LBB123_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB123_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB123_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB123_53
# %bb.52:                               # %if.then100
	jmp	.LBB123_60
.LBB123_53:                             # %if.end101
                                        #   in Loop: Header=BB123_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_55
# %bb.54:                               # %if.then107
	jmp	.LBB123_66
.LBB123_55:                             # %if.end108
                                        #   in Loop: Header=BB123_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB123_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB123_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB123_57:                             # %if.end115
                                        #   in Loop: Header=BB123_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB123_59
# %bb.58:                               # %if.then118
	jmp	.LBB123_66
.LBB123_59:                             # %if.end119
                                        #   in Loop: Header=BB123_51 Depth=1
	jmp	.LBB123_51
.LBB123_60:                             # %while.end120
	jmp	.LBB123_34
.LBB123_61:                             # %if.end121
	jmp	.LBB123_62
.LBB123_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB123_79
# %bb.63:                               # %errhandler
	movq	.LJTI123_0(,%rax,8), %rax
	jmpq	*%rax
.LBB123_64:                             # %sw.bb
	callq	configError
.LBB123_65:                             # %sw.bb122
	jmp	.LBB123_66
.LBB123_66:                             # %errhandler_io
	callq	ioError
.LBB123_67:                             # %sw.bb123
	callq	crcError
.LBB123_68:                             # %sw.bb124
	callq	outOfMemory
.LBB123_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB123_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB123_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB123_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB123_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB123_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB123_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB123_80
.LBB123_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB123_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB123_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB123_80
.LBB123_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB123_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1143453017, -68(%rbp)  # imm = 0x4427B559
	jne	.LBB123_82
.LBB123_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_81
.Lfunc_end123:
	.size	uncompressStream.81, .Lfunc_end123-uncompressStream.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI123_0:
	.quad	.LBB123_64
	.quad	.LBB123_79
	.quad	.LBB123_69
	.quad	.LBB123_65
	.quad	.LBB123_70
	.quad	.LBB123_67
	.quad	.LBB123_68
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.82
.LCPI124_0:
	.quad	4607182418800017408     # double 1
.LCPI124_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.82,@function
uInt64_to_double.82:                    # @uInt64_to_double.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$738139495, -28(%rbp)   # imm = 0x2BFF1D67
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB124_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	vmovsd	.LCPI124_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_1
.LBB124_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$738139495, -28(%rbp)   # imm = 0x2BFF1D67
	jne	.LBB124_6
.LBB124_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB124_5
.Lfunc_end124:
	.size	uInt64_to_double.82, .Lfunc_end124-uInt64_to_double.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.83
	.type	hasSuffix.83,@function
hasSuffix.83:                           # @hasSuffix.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1333176544, -24(%rbp)  # imm = 0x4F76A8E0
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB125_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB125_5
.LBB125_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB125_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB125_5
.LBB125_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB125_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1333176544, -24(%rbp)  # imm = 0x4F76A8E0
	jne	.LBB125_7
.LBB125_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_6
.Lfunc_end125:
	.size	hasSuffix.83, .Lfunc_end125-hasSuffix.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.84
	.type	uInt64_qrm10.84,@function
uInt64_qrm10.84:                        # @uInt64_qrm10.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$917591998, -24(%rbp)   # imm = 0x36B157BE
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB126_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB126_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB126_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_1
.LBB126_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$917591998, -24(%rbp)   # imm = 0x36B157BE
	jne	.LBB126_6
.LBB126_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_5
.Lfunc_end126:
	.size	uInt64_qrm10.84, .Lfunc_end126-uInt64_qrm10.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.85
	.type	snocString.85,@function
snocString.85:                          # @snocString.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1789221773, -44(%rbp)  # imm = 0x6AA55B8D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB127_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB127_6
.LBB127_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB127_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB127_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB127_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB127_3
.LBB127_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB127_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1789221773, -44(%rbp)  # imm = 0x6AA55B8D
	jne	.LBB127_8
.LBB127_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_7
.Lfunc_end127:
	.size	snocString.85, .Lfunc_end127-snocString.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.86
	.type	uInt64_isZero.86,@function
uInt64_isZero.86:                       # @uInt64_isZero.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1338737669, -20(%rbp)  # imm = 0x4FCB8405
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB128_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB128_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB128_7
.LBB128_4:                              # %if.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_5
.LBB128_5:                              # %for.inc
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_1
.LBB128_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB128_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1338737669, -20(%rbp)  # imm = 0x4FCB8405
	jne	.LBB128_9
.LBB128_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_8
.Lfunc_end128:
	.size	uInt64_isZero.86, .Lfunc_end128-uInt64_isZero.86
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.87
	.type	compress.87,@function
compress.87:                            # @compress.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$303375458, -64(%rbp)   # imm = 0x12152462
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB129_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB129_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB129_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB129_6
	jmp	.LBB129_4
.LBB129_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB129_8
	jmp	.LBB129_5
.LBB129_5:                              # %if.end
	subl	$3, %eax
	je	.LBB129_7
	jmp	.LBB129_9
.LBB129_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB129_9
.LBB129_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB129_9
.LBB129_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB129_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB129_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB129_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB129_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB129_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB129_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB129_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB129_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB129_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB129_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB129_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB129_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB129_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_23:                             # %if.end34
                                        #   in Loop: Header=BB129_18 Depth=1
	jmp	.LBB129_24
.LBB129_24:                             # %for.inc
                                        #   in Loop: Header=BB129_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB129_18
.LBB129_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB129_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB129_30
.LBB129_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB129_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_29:                             # %if.end45
	jmp	.LBB129_30
.LBB129_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB129_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB129_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB129_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB129_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB129_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB129_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB129_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB129_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB129_41
.LBB129_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_41:                             # %if.end72
	jmp	.LBB129_42
.LBB129_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB129_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB129_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB129_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB129_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB129_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB129_51
	jmp	.LBB129_49
.LBB129_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB129_54
	jmp	.LBB129_50
.LBB129_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB129_61
	jmp	.LBB129_70
.LBB129_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB129_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_53:                             # %if.end98
	jmp	.LBB129_71
.LBB129_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB129_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB129_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB129_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB129_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_60:                             # %if.end119
	jmp	.LBB129_71
.LBB129_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB129_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB129_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB129_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB129_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB129_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB129_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB129_80
.LBB129_69:                             # %if.end146
	jmp	.LBB129_71
.LBB129_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB129_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB129_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB129_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB129_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB129_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB129_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB129_77:                             # %if.end163
	jmp	.LBB129_78
.LBB129_78:                             # %if.end164
	jmp	.LBB129_79
.LBB129_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB129_80:                             # %return
	cmpl	$303375458, -64(%rbp)   # imm = 0x12152462
	jne	.LBB129_82
.LBB129_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_81
.Lfunc_end129:
	.size	compress.87, .Lfunc_end129-compress.87
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.88
	.type	cleanUpAndFail.88,@function
cleanUpAndFail.88:                      # @cleanUpAndFail.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1942622960, -12(%rbp)  # imm = 0x73CA12F0
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB130_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB130_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB130_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB130_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB130_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB130_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB130_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB130_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB130_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB130_10:                             # %if.end19
	jmp	.LBB130_12
.LBB130_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB130_12:                             # %if.end24
	jmp	.LBB130_13
.LBB130_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB130_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB130_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB130_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB130_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end130:
	.size	cleanUpAndFail.88, .Lfunc_end130-cleanUpAndFail.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.89
	.type	uInt64_qrm10.89,@function
uInt64_qrm10.89:                        # @uInt64_qrm10.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2115563841, -24(%rbp)  # imm = 0x7E18F141
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB131_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB131_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB131_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB131_1
.LBB131_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2115563841, -24(%rbp)  # imm = 0x7E18F141
	jne	.LBB131_6
.LBB131_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_5
.Lfunc_end131:
	.size	uInt64_qrm10.89, .Lfunc_end131-uInt64_qrm10.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.90
	.type	countHardLinks.90,@function
countHardLinks.90:                      # @countHardLinks.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1259705880, -20(%rbp)  # imm = 0x4B159618
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB132_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB132_3
.LBB132_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB132_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1259705880, -20(%rbp)  # imm = 0x4B159618
	jne	.LBB132_5
.LBB132_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_4
.Lfunc_end132:
	.size	countHardLinks.90, .Lfunc_end132-countHardLinks.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.91
	.type	mapSuffix.91,@function
mapSuffix.91:                           # @mapSuffix.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$166890456, -36(%rbp)   # imm = 0x9F28BD8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB133_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB133_3
.LBB133_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB133_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$166890456, -36(%rbp)   # imm = 0x9F28BD8
	jne	.LBB133_5
.LBB133_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_4
.Lfunc_end133:
	.size	mapSuffix.91, .Lfunc_end133-mapSuffix.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.92
	.type	mapSuffix.92,@function
mapSuffix.92:                           # @mapSuffix.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1787416616, -36(%rbp)  # imm = 0x6A89D028
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB134_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB134_3
.LBB134_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB134_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1787416616, -36(%rbp)  # imm = 0x6A89D028
	jne	.LBB134_5
.LBB134_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_4
.Lfunc_end134:
	.size	mapSuffix.92, .Lfunc_end134-mapSuffix.92
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.93
	.type	hasSuffix.93,@function
hasSuffix.93:                           # @hasSuffix.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$500637889, -24(%rbp)   # imm = 0x1DD720C1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB135_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB135_5
.LBB135_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB135_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB135_5
.LBB135_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB135_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$500637889, -24(%rbp)   # imm = 0x1DD720C1
	jne	.LBB135_7
.LBB135_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_6
.Lfunc_end135:
	.size	hasSuffix.93, .Lfunc_end135-hasSuffix.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.94
	.type	uInt64_from_UInt32s.94,@function
uInt64_from_UInt32s.94:                 # @uInt64_from_UInt32s.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2111104714, -20(%rbp)  # imm = 0x7DD4E6CA
	movq	%rdi, -16(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -4(%rbp)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$2111104714, -20(%rbp)  # imm = 0x7DD4E6CA
	jne	.LBB136_2
.LBB136_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_1
.Lfunc_end136:
	.size	uInt64_from_UInt32s.94, .Lfunc_end136-uInt64_from_UInt32s.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.95
	.type	notAStandardFile.95,@function
notAStandardFile.95:                    # @notAStandardFile.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1529733224, -20(%rbp)  # imm = 0x5B2DE068
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB137_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB137_5
.LBB137_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB137_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB137_5
.LBB137_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB137_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1529733224, -20(%rbp)  # imm = 0x5B2DE068
	jne	.LBB137_7
.LBB137_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_6
.Lfunc_end137:
	.size	notAStandardFile.95, .Lfunc_end137-notAStandardFile.95
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.96
.LCPI138_0:
	.quad	4607182418800017408     # double 1
.LCPI138_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.96,@function
uInt64_to_double.96:                    # @uInt64_to_double.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI138_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$219277464, -28(%rbp)   # imm = 0xD11E898
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB138_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB138_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB138_1 Depth=1
	vmovsd	.LCPI138_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB138_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_1
.LBB138_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$219277464, -28(%rbp)   # imm = 0xD11E898
	jne	.LBB138_6
.LBB138_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB138_5
.Lfunc_end138:
	.size	uInt64_to_double.96, .Lfunc_end138-uInt64_to_double.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_from_UInt32s.97
	.type	uInt64_from_UInt32s.97,@function
uInt64_from_UInt32s.97:                 # @uInt64_from_UInt32s.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$199504142, -20(%rbp)   # imm = 0xBE4310E
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	%edx, -8(%rbp)
	movl	-8(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 7(%rcx)
	movl	-8(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 6(%rcx)
	movl	-8(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 5(%rcx)
	movl	-8(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 4(%rcx)
	movl	-4(%rbp), %eax
	shrl	$24, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 3(%rcx)
	movl	-4(%rbp), %eax
	shrl	$16, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 2(%rcx)
	movl	-4(%rbp), %eax
	shrl	$8, %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, 1(%rcx)
	movl	-4(%rbp), %eax
	andl	$255, %eax
	movq	-16(%rbp), %rcx
	movb	%al, (%rcx)
	cmpl	$199504142, -20(%rbp)   # imm = 0xBE4310E
	jne	.LBB139_2
.LBB139_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_1
.Lfunc_end139:
	.size	uInt64_from_UInt32s.97, .Lfunc_end139-uInt64_from_UInt32s.97
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.98
	.type	notAStandardFile.98,@function
notAStandardFile.98:                    # @notAStandardFile.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$984629702, -20(%rbp)   # imm = 0x3AB041C6
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB140_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB140_5
.LBB140_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB140_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB140_5
.LBB140_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB140_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$984629702, -20(%rbp)   # imm = 0x3AB041C6
	jne	.LBB140_7
.LBB140_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_6
.Lfunc_end140:
	.size	notAStandardFile.98, .Lfunc_end140-notAStandardFile.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.99
	.type	testf.99,@function
testf.99:                               # @testf.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$559888011, -44(%rbp)   # imm = 0x215F368B
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB141_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB141_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB141_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB141_6
	jmp	.LBB141_4
.LBB141_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB141_8
	jmp	.LBB141_5
.LBB141_5:                              # %if.end
	subl	$3, %eax
	je	.LBB141_7
	jmp	.LBB141_9
.LBB141_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB141_9
.LBB141_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB141_9
.LBB141_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB141_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB141_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB141_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB141_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB141_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB141_37
.LBB141_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB141_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB141_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB141_37
.LBB141_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB141_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB141_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB141_37
.LBB141_20:                             # %if.end30
	jmp	.LBB141_21
.LBB141_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB141_23
	jmp	.LBB141_22
.LBB141_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB141_26
	jmp	.LBB141_29
.LBB141_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB141_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB141_37
.LBB141_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB141_30
.LBB141_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB141_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB141_37
.LBB141_28:                             # %if.end48
	jmp	.LBB141_30
.LBB141_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB141_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB141_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB141_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB141_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB141_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB141_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB141_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB141_37:                             # %if.end67
	cmpl	$559888011, -44(%rbp)   # imm = 0x215F368B
	jne	.LBB141_39
.LBB141_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_38
.Lfunc_end141:
	.size	testf.99, .Lfunc_end141-testf.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.100
	.type	mapSuffix.100,@function
mapSuffix.100:                          # @mapSuffix.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1621914468, -36(%rbp)  # imm = 0x60AC7364
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB142_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB142_3
.LBB142_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB142_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1621914468, -36(%rbp)  # imm = 0x60AC7364
	jne	.LBB142_5
.LBB142_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_4
.Lfunc_end142:
	.size	mapSuffix.100, .Lfunc_end142-mapSuffix.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.101
	.type	uncompressStream.101,@function
uncompressStream.101:                   # @uncompressStream.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$260900035, -68(%rbp)   # imm = 0xF8D04C3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_2
# %bb.1:                                # %if.then
	jmp	.LBB143_66
.LBB143_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_4
# %bb.3:                                # %if.then3
	jmp	.LBB143_66
.LBB143_4:                              # %if.end4
	jmp	.LBB143_5
.LBB143_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_9 Depth 2
                                        #     Child Loop BB143_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB143_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB143_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB143_8
.LBB143_7:                              # %if.then9
	jmp	.LBB143_62
.LBB143_8:                              # %if.end10
                                        #   in Loop: Header=BB143_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB143_9:                              # %while.cond11
                                        #   Parent Loop BB143_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB143_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB143_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB143_12
# %bb.11:                               # %if.then19
	jmp	.LBB143_49
.LBB143_12:                             # %if.end20
                                        #   in Loop: Header=BB143_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB143_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB143_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB143_16
.LBB143_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB143_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB143_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB143_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB143_16:                             # %if.end32
                                        #   in Loop: Header=BB143_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_18
# %bb.17:                               # %if.then35
	jmp	.LBB143_66
.LBB143_18:                             # %if.end36
                                        #   in Loop: Header=BB143_9 Depth=2
	jmp	.LBB143_9
.LBB143_19:                             # %while.end
                                        #   in Loop: Header=BB143_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB143_21
# %bb.20:                               # %if.then39
	jmp	.LBB143_62
.LBB143_21:                             # %if.end40
                                        #   in Loop: Header=BB143_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB143_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB143_23:                             # %if.end44
                                        #   in Loop: Header=BB143_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB143_24:                             # %for.cond
                                        #   Parent Loop BB143_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB143_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB143_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB143_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB143_24
.LBB143_27:                             # %for.end
                                        #   in Loop: Header=BB143_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB143_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB143_29:                             # %if.end53
                                        #   in Loop: Header=BB143_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB143_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB143_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB143_32
# %bb.31:                               # %if.then60
	jmp	.LBB143_33
.LBB143_32:                             # %if.end61
                                        #   in Loop: Header=BB143_5 Depth=1
	jmp	.LBB143_5
.LBB143_33:                             # %while.end62
	jmp	.LBB143_34
.LBB143_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_36
# %bb.35:                               # %if.then65
	jmp	.LBB143_66
.LBB143_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB143_38
# %bb.37:                               # %if.then70
	jmp	.LBB143_66
.LBB143_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_40
# %bb.39:                               # %if.then74
	jmp	.LBB143_66
.LBB143_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB143_42
# %bb.41:                               # %if.then79
	jmp	.LBB143_66
.LBB143_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB143_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB143_45
# %bb.44:                               # %if.then87
	jmp	.LBB143_66
.LBB143_45:                             # %if.end88
	jmp	.LBB143_46
.LBB143_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB143_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB143_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB143_80
.LBB143_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB143_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB143_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB143_53
# %bb.52:                               # %if.then100
	jmp	.LBB143_60
.LBB143_53:                             # %if.end101
                                        #   in Loop: Header=BB143_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_55
# %bb.54:                               # %if.then107
	jmp	.LBB143_66
.LBB143_55:                             # %if.end108
                                        #   in Loop: Header=BB143_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB143_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB143_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB143_57:                             # %if.end115
                                        #   in Loop: Header=BB143_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB143_59
# %bb.58:                               # %if.then118
	jmp	.LBB143_66
.LBB143_59:                             # %if.end119
                                        #   in Loop: Header=BB143_51 Depth=1
	jmp	.LBB143_51
.LBB143_60:                             # %while.end120
	jmp	.LBB143_34
.LBB143_61:                             # %if.end121
	jmp	.LBB143_62
.LBB143_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB143_79
# %bb.63:                               # %errhandler
	movq	.LJTI143_0(,%rax,8), %rax
	jmpq	*%rax
.LBB143_64:                             # %sw.bb
	callq	configError
.LBB143_65:                             # %sw.bb122
	jmp	.LBB143_66
.LBB143_66:                             # %errhandler_io
	callq	ioError
.LBB143_67:                             # %sw.bb123
	callq	crcError
.LBB143_68:                             # %sw.bb124
	callq	outOfMemory
.LBB143_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB143_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB143_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB143_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB143_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB143_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB143_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB143_80
.LBB143_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB143_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB143_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB143_80
.LBB143_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB143_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$260900035, -68(%rbp)   # imm = 0xF8D04C3
	jne	.LBB143_82
.LBB143_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_81
.Lfunc_end143:
	.size	uncompressStream.101, .Lfunc_end143-uncompressStream.101
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI143_0:
	.quad	.LBB143_64
	.quad	.LBB143_79
	.quad	.LBB143_69
	.quad	.LBB143_65
	.quad	.LBB143_70
	.quad	.LBB143_67
	.quad	.LBB143_68
                                        # -- End function
	.text
	.globl	fopen_output_safely.102 # -- Begin function fopen_output_safely.102
	.p2align	4, 0x90
	.type	fopen_output_safely.102,@function
fopen_output_safely.102:                # @fopen_output_safely.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$344103408, -16(%rbp)   # imm = 0x148299F0
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB144_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB144_5
.LBB144_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB144_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB144_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB144_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$344103408, -16(%rbp)   # imm = 0x148299F0
	jne	.LBB144_7
.LBB144_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_6
.Lfunc_end144:
	.size	fopen_output_safely.102, .Lfunc_end144-fopen_output_safely.102
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.103
	.type	hasSuffix.103,@function
hasSuffix.103:                          # @hasSuffix.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1494938632, -24(%rbp)  # imm = 0x591AF408
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB145_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB145_5
.LBB145_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB145_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB145_5
.LBB145_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB145_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1494938632, -24(%rbp)  # imm = 0x591AF408
	jne	.LBB145_7
.LBB145_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_6
.Lfunc_end145:
	.size	hasSuffix.103, .Lfunc_end145-hasSuffix.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.104
	.type	applySavedMetaInfoToOutputFile.104,@function
applySavedMetaInfoToOutputFile.104:     # @applySavedMetaInfoToOutputFile.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$331187178, -20(%rbp)   # imm = 0x13BD83EA
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB146_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB146_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB146_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB146_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$331187178, -20(%rbp)   # imm = 0x13BD83EA
	jne	.LBB146_6
.LBB146_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_5
.Lfunc_end146:
	.size	applySavedMetaInfoToOutputFile.104, .Lfunc_end146-applySavedMetaInfoToOutputFile.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.105
	.type	myfeof.105,@function
myfeof.105:                             # @myfeof.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$498915168, -20(%rbp)   # imm = 0x1DBCD760
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB147_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB147_3
.LBB147_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB147_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$498915168, -20(%rbp)   # imm = 0x1DBCD760
	jne	.LBB147_5
.LBB147_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_4
.Lfunc_end147:
	.size	myfeof.105, .Lfunc_end147-myfeof.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.106
	.type	hasSuffix.106,@function
hasSuffix.106:                          # @hasSuffix.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$978914471, -24(%rbp)   # imm = 0x3A590CA7
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB148_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB148_5
.LBB148_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB148_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB148_5
.LBB148_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB148_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$978914471, -24(%rbp)   # imm = 0x3A590CA7
	jne	.LBB148_7
.LBB148_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_6
.Lfunc_end148:
	.size	hasSuffix.106, .Lfunc_end148-hasSuffix.106
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.107
	.type	notAStandardFile.107,@function
notAStandardFile.107:                   # @notAStandardFile.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1466494228, -16(%rbp)  # imm = 0x5768ED14
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB149_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB149_5
.LBB149_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB149_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB149_5
.LBB149_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB149_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1466494228, -16(%rbp)  # imm = 0x5768ED14
	jne	.LBB149_7
.LBB149_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_6
.Lfunc_end149:
	.size	notAStandardFile.107, .Lfunc_end149-notAStandardFile.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.108
	.type	testStream.108,@function
testStream.108:                         # @testStream.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1456056668, -56(%rbp)  # imm = 0x56C9A95C
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB150_2
# %bb.1:                                # %if.then
	jmp	.LBB150_38
.LBB150_2:                              # %if.end
	jmp	.LBB150_3
.LBB150_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_7 Depth 2
                                        #     Child Loop BB150_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB150_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB150_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB150_6
.LBB150_5:                              # %if.then5
	jmp	.LBB150_32
.LBB150_6:                              # %if.end6
                                        #   in Loop: Header=BB150_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB150_7:                              # %while.cond7
                                        #   Parent Loop BB150_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB150_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB150_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB150_10
# %bb.9:                                # %if.then15
	jmp	.LBB150_32
.LBB150_10:                             # %if.end16
                                        #   in Loop: Header=BB150_7 Depth=2
	jmp	.LBB150_7
.LBB150_11:                             # %while.end
                                        #   in Loop: Header=BB150_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB150_13
# %bb.12:                               # %if.then19
	jmp	.LBB150_32
.LBB150_13:                             # %if.end20
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB150_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB150_15:                             # %if.end24
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB150_16:                             # %for.cond
                                        #   Parent Loop BB150_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB150_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB150_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB150_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB150_16
.LBB150_19:                             # %for.end
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB150_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB150_21:                             # %if.end33
                                        #   in Loop: Header=BB150_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB150_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB150_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB150_24
# %bb.23:                               # %if.then39
	jmp	.LBB150_25
.LBB150_24:                             # %if.end40
                                        #   in Loop: Header=BB150_3 Depth=1
	jmp	.LBB150_3
.LBB150_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB150_27
# %bb.26:                               # %if.then44
	jmp	.LBB150_38
.LBB150_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB150_29
# %bb.28:                               # %if.then49
	jmp	.LBB150_38
.LBB150_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB150_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB150_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB150_50
.LBB150_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB150_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB150_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB150_49
# %bb.35:                               # %if.end60
	movq	.LJTI150_0(,%rax,8), %rax
	jmpq	*%rax
.LBB150_36:                             # %sw.bb
	callq	configError
.LBB150_37:                             # %sw.bb61
	jmp	.LBB150_38
.LBB150_38:                             # %errhandler_io
	callq	ioError
.LBB150_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB150_50
.LBB150_40:                             # %sw.bb64
	callq	outOfMemory
.LBB150_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB150_50
.LBB150_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB150_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB150_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB150_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB150_50
.LBB150_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB150_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB150_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB150_50
.LBB150_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB150_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1456056668, -56(%rbp)  # imm = 0x56C9A95C
	jne	.LBB150_52
.LBB150_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_51
.Lfunc_end150:
	.size	testStream.108, .Lfunc_end150-testStream.108
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI150_0:
	.quad	.LBB150_36
	.quad	.LBB150_49
	.quad	.LBB150_41
	.quad	.LBB150_37
	.quad	.LBB150_42
	.quad	.LBB150_39
	.quad	.LBB150_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.109
	.type	uInt64_toAscii.109,@function
uInt64_toAscii.109:                     # @uInt64_toAscii.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$974203990, -12(%rbp)   # imm = 0x3A112C56
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB151_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB151_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB151_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB151_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB151_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB151_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB151_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB151_4
.LBB151_7:                              # %for.end
	cmpl	$974203990, -12(%rbp)   # imm = 0x3A112C56
	jne	.LBB151_9
.LBB151_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_8
.Lfunc_end151:
	.size	uInt64_toAscii.109, .Lfunc_end151-uInt64_toAscii.109
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.110
	.type	testf.110,@function
testf.110:                              # @testf.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$716672231, -44(%rbp)   # imm = 0x2AB78CE7
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB152_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB152_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB152_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB152_6
	jmp	.LBB152_4
.LBB152_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB152_8
	jmp	.LBB152_5
.LBB152_5:                              # %if.end
	subl	$3, %eax
	je	.LBB152_7
	jmp	.LBB152_9
.LBB152_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB152_9
.LBB152_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB152_9
.LBB152_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB152_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB152_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB152_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB152_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB152_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB152_37
.LBB152_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB152_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB152_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB152_37
.LBB152_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB152_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB152_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB152_37
.LBB152_20:                             # %if.end30
	jmp	.LBB152_21
.LBB152_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB152_23
	jmp	.LBB152_22
.LBB152_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB152_26
	jmp	.LBB152_29
.LBB152_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB152_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB152_37
.LBB152_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB152_30
.LBB152_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB152_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB152_37
.LBB152_28:                             # %if.end48
	jmp	.LBB152_30
.LBB152_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB152_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB152_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB152_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB152_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB152_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB152_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB152_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB152_37:                             # %if.end67
	cmpl	$716672231, -44(%rbp)   # imm = 0x2AB78CE7
	jne	.LBB152_39
.LBB152_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_38
.Lfunc_end152:
	.size	testf.110, .Lfunc_end152-testf.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.111
	.type	compress.111,@function
compress.111:                           # @compress.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$346200266, -60(%rbp)   # imm = 0x14A298CA
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB153_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB153_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB153_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB153_6
	jmp	.LBB153_4
.LBB153_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB153_8
	jmp	.LBB153_5
.LBB153_5:                              # %if.end
	subl	$3, %eax
	je	.LBB153_7
	jmp	.LBB153_9
.LBB153_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB153_9
.LBB153_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB153_9
.LBB153_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB153_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB153_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB153_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB153_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB153_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB153_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB153_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB153_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB153_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB153_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB153_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB153_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB153_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_23:                             # %if.end34
                                        #   in Loop: Header=BB153_18 Depth=1
	jmp	.LBB153_24
.LBB153_24:                             # %for.inc
                                        #   in Loop: Header=BB153_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB153_18
.LBB153_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB153_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB153_30
.LBB153_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB153_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_29:                             # %if.end45
	jmp	.LBB153_30
.LBB153_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB153_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB153_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB153_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB153_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB153_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB153_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB153_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB153_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB153_41
.LBB153_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_41:                             # %if.end72
	jmp	.LBB153_42
.LBB153_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB153_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB153_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB153_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB153_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB153_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB153_51
	jmp	.LBB153_49
.LBB153_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB153_54
	jmp	.LBB153_50
.LBB153_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB153_61
	jmp	.LBB153_70
.LBB153_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB153_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_53:                             # %if.end98
	jmp	.LBB153_71
.LBB153_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB153_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB153_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB153_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB153_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_60:                             # %if.end119
	jmp	.LBB153_71
.LBB153_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB153_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB153_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB153_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB153_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB153_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB153_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB153_80
.LBB153_69:                             # %if.end146
	jmp	.LBB153_71
.LBB153_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB153_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB153_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB153_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB153_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB153_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB153_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB153_77:                             # %if.end163
	jmp	.LBB153_78
.LBB153_78:                             # %if.end164
	jmp	.LBB153_79
.LBB153_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB153_80:                             # %return
	cmpl	$346200266, -60(%rbp)   # imm = 0x14A298CA
	jne	.LBB153_82
.LBB153_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_81
.Lfunc_end153:
	.size	compress.111, .Lfunc_end153-compress.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function myfeof.112
	.type	myfeof.112,@function
myfeof.112:                             # @myfeof.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1601980709, -20(%rbp)  # imm = 0x5F7C4925
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	callq	fgetc
	movl	%eax, -16(%rbp)
	cmpl	$-1, -16(%rbp)
	jne	.LBB154_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB154_3
.LBB154_2:                              # %if.end
	movl	-16(%rbp), %edi
	movq	-32(%rbp), %rsi
	callq	ungetc
	movb	$0, -9(%rbp)
.LBB154_3:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1601980709, -20(%rbp)  # imm = 0x5F7C4925
	jne	.LBB154_5
.LBB154_4:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_4
.Lfunc_end154:
	.size	myfeof.112, .Lfunc_end154-myfeof.112
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.113
	.type	countHardLinks.113,@function
countHardLinks.113:                     # @countHardLinks.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$753571513, -16(%rbp)   # imm = 0x2CEA96B9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB155_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB155_3
.LBB155_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB155_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$753571513, -16(%rbp)   # imm = 0x2CEA96B9
	jne	.LBB155_5
.LBB155_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_4
.Lfunc_end155:
	.size	countHardLinks.113, .Lfunc_end155-countHardLinks.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.114
	.type	uncompressStream.114,@function
uncompressStream.114:                   # @uncompressStream.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$22007255, -68(%rbp)    # imm = 0x14FCDD7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_2
# %bb.1:                                # %if.then
	jmp	.LBB156_66
.LBB156_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_4
# %bb.3:                                # %if.then3
	jmp	.LBB156_66
.LBB156_4:                              # %if.end4
	jmp	.LBB156_5
.LBB156_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB156_9 Depth 2
                                        #     Child Loop BB156_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB156_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB156_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB156_8
.LBB156_7:                              # %if.then9
	jmp	.LBB156_62
.LBB156_8:                              # %if.end10
                                        #   in Loop: Header=BB156_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB156_9:                              # %while.cond11
                                        #   Parent Loop BB156_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB156_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB156_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB156_12
# %bb.11:                               # %if.then19
	jmp	.LBB156_49
.LBB156_12:                             # %if.end20
                                        #   in Loop: Header=BB156_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB156_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB156_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB156_16
.LBB156_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB156_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB156_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB156_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB156_16:                             # %if.end32
                                        #   in Loop: Header=BB156_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_18
# %bb.17:                               # %if.then35
	jmp	.LBB156_66
.LBB156_18:                             # %if.end36
                                        #   in Loop: Header=BB156_9 Depth=2
	jmp	.LBB156_9
.LBB156_19:                             # %while.end
                                        #   in Loop: Header=BB156_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB156_21
# %bb.20:                               # %if.then39
	jmp	.LBB156_62
.LBB156_21:                             # %if.end40
                                        #   in Loop: Header=BB156_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB156_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB156_23:                             # %if.end44
                                        #   in Loop: Header=BB156_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -44(%rbp)
.LBB156_24:                             # %for.cond
                                        #   Parent Loop BB156_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB156_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB156_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB156_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB156_24
.LBB156_27:                             # %for.end
                                        #   in Loop: Header=BB156_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB156_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB156_29:                             # %if.end53
                                        #   in Loop: Header=BB156_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB156_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB156_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB156_32
# %bb.31:                               # %if.then60
	jmp	.LBB156_33
.LBB156_32:                             # %if.end61
                                        #   in Loop: Header=BB156_5 Depth=1
	jmp	.LBB156_5
.LBB156_33:                             # %while.end62
	jmp	.LBB156_34
.LBB156_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_36
# %bb.35:                               # %if.then65
	jmp	.LBB156_66
.LBB156_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB156_38
# %bb.37:                               # %if.then70
	jmp	.LBB156_66
.LBB156_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_40
# %bb.39:                               # %if.then74
	jmp	.LBB156_66
.LBB156_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB156_42
# %bb.41:                               # %if.then79
	jmp	.LBB156_66
.LBB156_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB156_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB156_45
# %bb.44:                               # %if.then87
	jmp	.LBB156_66
.LBB156_45:                             # %if.end88
	jmp	.LBB156_46
.LBB156_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB156_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB156_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB156_80
.LBB156_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB156_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB156_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB156_53
# %bb.52:                               # %if.then100
	jmp	.LBB156_60
.LBB156_53:                             # %if.end101
                                        #   in Loop: Header=BB156_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_55
# %bb.54:                               # %if.then107
	jmp	.LBB156_66
.LBB156_55:                             # %if.end108
                                        #   in Loop: Header=BB156_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB156_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB156_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB156_57:                             # %if.end115
                                        #   in Loop: Header=BB156_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB156_59
# %bb.58:                               # %if.then118
	jmp	.LBB156_66
.LBB156_59:                             # %if.end119
                                        #   in Loop: Header=BB156_51 Depth=1
	jmp	.LBB156_51
.LBB156_60:                             # %while.end120
	jmp	.LBB156_34
.LBB156_61:                             # %if.end121
	jmp	.LBB156_62
.LBB156_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB156_79
# %bb.63:                               # %errhandler
	movq	.LJTI156_0(,%rax,8), %rax
	jmpq	*%rax
.LBB156_64:                             # %sw.bb
	callq	configError
.LBB156_65:                             # %sw.bb122
	jmp	.LBB156_66
.LBB156_66:                             # %errhandler_io
	callq	ioError
.LBB156_67:                             # %sw.bb123
	callq	crcError
.LBB156_68:                             # %sw.bb124
	callq	outOfMemory
.LBB156_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB156_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB156_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB156_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB156_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB156_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB156_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB156_80
.LBB156_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB156_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB156_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB156_80
.LBB156_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB156_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$22007255, -68(%rbp)    # imm = 0x14FCDD7
	jne	.LBB156_82
.LBB156_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_81
.Lfunc_end156:
	.size	uncompressStream.114, .Lfunc_end156-uncompressStream.114
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI156_0:
	.quad	.LBB156_64
	.quad	.LBB156_79
	.quad	.LBB156_69
	.quad	.LBB156_65
	.quad	.LBB156_70
	.quad	.LBB156_67
	.quad	.LBB156_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.115
	.type	mapSuffix.115,@function
mapSuffix.115:                          # @mapSuffix.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$364966040, -36(%rbp)   # imm = 0x15C0F098
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB157_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB157_3
.LBB157_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB157_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$364966040, -36(%rbp)   # imm = 0x15C0F098
	jne	.LBB157_5
.LBB157_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_4
.Lfunc_end157:
	.size	mapSuffix.115, .Lfunc_end157-mapSuffix.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.116
	.type	notAStandardFile.116,@function
notAStandardFile.116:                   # @notAStandardFile.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1930081432, -20(%rbp)  # imm = 0x730AB498
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB158_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB158_5
.LBB158_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB158_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB158_5
.LBB158_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB158_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1930081432, -20(%rbp)  # imm = 0x730AB498
	jne	.LBB158_7
.LBB158_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_6
.Lfunc_end158:
	.size	notAStandardFile.116, .Lfunc_end158-notAStandardFile.116
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_isZero.117
	.type	uInt64_isZero.117,@function
uInt64_isZero.117:                      # @uInt64_isZero.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$714635198, -20(%rbp)   # imm = 0x2A9877BE
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB159_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -16(%rbp)
	jge	.LBB159_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB159_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB159_4
# %bb.3:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB159_7
.LBB159_4:                              # %if.end
                                        #   in Loop: Header=BB159_1 Depth=1
	jmp	.LBB159_5
.LBB159_5:                              # %for.inc
                                        #   in Loop: Header=BB159_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB159_1
.LBB159_6:                              # %for.end
	movb	$1, -9(%rbp)
.LBB159_7:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$714635198, -20(%rbp)   # imm = 0x2A9877BE
	jne	.LBB159_9
.LBB159_8:
	movzbl	%bl, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_8
.Lfunc_end159:
	.size	uInt64_isZero.117, .Lfunc_end159-uInt64_isZero.117
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.118
	.type	cleanUpAndFail.118,@function
cleanUpAndFail.118:                     # @cleanUpAndFail.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$562244173, -12(%rbp)   # imm = 0x21832A4D
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB160_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB160_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB160_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB160_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB160_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB160_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB160_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB160_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB160_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB160_10:                             # %if.end19
	jmp	.LBB160_12
.LBB160_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB160_12:                             # %if.end24
	jmp	.LBB160_13
.LBB160_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB160_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB160_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB160_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB160_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end160:
	.size	cleanUpAndFail.118, .Lfunc_end160-cleanUpAndFail.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.119
	.type	applySavedMetaInfoToOutputFile.119,@function
applySavedMetaInfoToOutputFile.119:     # @applySavedMetaInfoToOutputFile.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$340631335, -20(%rbp)   # imm = 0x144D9F27
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB161_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB161_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB161_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB161_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$340631335, -20(%rbp)   # imm = 0x144D9F27
	jne	.LBB161_6
.LBB161_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_5
.Lfunc_end161:
	.size	applySavedMetaInfoToOutputFile.119, .Lfunc_end161-applySavedMetaInfoToOutputFile.119
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.120
	.type	uInt64_toAscii.120,@function
uInt64_toAscii.120:                     # @uInt64_toAscii.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1602431432, -16(%rbp)  # imm = 0x5F8329C8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB162_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB162_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB162_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB162_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB162_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB162_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB162_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB162_4
.LBB162_7:                              # %for.end
	cmpl	$1602431432, -16(%rbp)  # imm = 0x5F8329C8
	jne	.LBB162_9
.LBB162_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_8
.Lfunc_end162:
	.size	uInt64_toAscii.120, .Lfunc_end162-uInt64_toAscii.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.121
	.type	uInt64_qrm10.121,@function
uInt64_qrm10.121:                       # @uInt64_qrm10.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1834389266, -24(%rbp)  # imm = 0x6D568F12
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB163_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB163_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB163_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_1
.LBB163_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1834389266, -24(%rbp)  # imm = 0x6D568F12
	jne	.LBB163_6
.LBB163_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_5
.Lfunc_end163:
	.size	uInt64_qrm10.121, .Lfunc_end163-uInt64_qrm10.121
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.122
	.type	testf.122,@function
testf.122:                              # @testf.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1682786507, -44(%rbp)  # imm = 0x644D48CB
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB164_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB164_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB164_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB164_6
	jmp	.LBB164_4
.LBB164_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB164_8
	jmp	.LBB164_5
.LBB164_5:                              # %if.end
	subl	$3, %eax
	je	.LBB164_7
	jmp	.LBB164_9
.LBB164_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB164_9
.LBB164_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB164_9
.LBB164_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB164_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB164_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB164_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB164_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB164_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB164_37
.LBB164_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB164_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB164_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB164_37
.LBB164_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB164_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB164_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB164_37
.LBB164_20:                             # %if.end30
	jmp	.LBB164_21
.LBB164_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB164_23
	jmp	.LBB164_22
.LBB164_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB164_26
	jmp	.LBB164_29
.LBB164_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB164_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB164_37
.LBB164_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB164_30
.LBB164_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB164_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB164_37
.LBB164_28:                             # %if.end48
	jmp	.LBB164_30
.LBB164_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB164_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB164_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB164_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB164_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB164_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB164_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB164_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB164_37:                             # %if.end67
	cmpl	$1682786507, -44(%rbp)  # imm = 0x644D48CB
	jne	.LBB164_39
.LBB164_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_38
.Lfunc_end164:
	.size	testf.122, .Lfunc_end164-testf.122
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.123
.LCPI165_0:
	.quad	4607182418800017408     # double 1
.LCPI165_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.123,@function
uInt64_to_double.123:                   # @uInt64_to_double.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI165_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$351503018, -28(%rbp)   # imm = 0x14F382AA
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB165_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB165_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB165_1 Depth=1
	vmovsd	.LCPI165_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_1
.LBB165_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$351503018, -28(%rbp)   # imm = 0x14F382AA
	jne	.LBB165_6
.LBB165_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB165_5
.Lfunc_end165:
	.size	uInt64_to_double.123, .Lfunc_end165-uInt64_to_double.123
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.124
.LCPI166_0:
	.quad	4636737291354636288     # double 100
.LCPI166_1:
	.quad	4607182418800017408     # double 1
.LCPI166_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.124,@function
compressStream.124:                     # @compressStream.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1491401168, -76(%rbp)  # imm = 0x58E4F9D0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_2
# %bb.1:                                # %if.then
	jmp	.LBB166_46
.LBB166_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_4
# %bb.3:                                # %if.then3
	jmp	.LBB166_46
.LBB166_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB166_6
# %bb.5:                                # %if.then6
	jmp	.LBB166_40
.LBB166_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB166_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB166_8:                              # %if.end11
	jmp	.LBB166_9
.LBB166_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB166_11
# %bb.10:                               # %if.then14
	jmp	.LBB166_18
.LBB166_11:                             # %if.end15
                                        #   in Loop: Header=BB166_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_13
# %bb.12:                               # %if.then19
	jmp	.LBB166_46
.LBB166_13:                             # %if.end20
                                        #   in Loop: Header=BB166_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB166_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB166_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB166_15:                             # %if.end25
                                        #   in Loop: Header=BB166_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB166_17
# %bb.16:                               # %if.then28
	jmp	.LBB166_40
.LBB166_17:                             # %if.end29
                                        #   in Loop: Header=BB166_9 Depth=1
	jmp	.LBB166_9
.LBB166_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB166_20
# %bb.19:                               # %if.then32
	jmp	.LBB166_40
.LBB166_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_22
# %bb.21:                               # %if.then36
	jmp	.LBB166_46
.LBB166_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB166_24
# %bb.23:                               # %if.then41
	jmp	.LBB166_46
.LBB166_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB166_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB166_27
# %bb.26:                               # %if.then49
	jmp	.LBB166_46
.LBB166_27:                             # %if.end50
	jmp	.LBB166_28
.LBB166_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB166_30
# %bb.29:                               # %if.then54
	jmp	.LBB166_46
.LBB166_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB166_32
# %bb.31:                               # %if.then59
	jmp	.LBB166_46
.LBB166_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB166_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB166_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB166_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB166_37
.LBB166_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI166_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI166_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI166_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB166_37:                             # %if.end80
	jmp	.LBB166_38
.LBB166_38:                             # %if.end81
	cmpl	$1491401168, -76(%rbp)  # imm = 0x58E4F9D0
	jne	.LBB166_48
.LBB166_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB166_43
	jmp	.LBB166_41
.LBB166_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB166_45
	jmp	.LBB166_42
.LBB166_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB166_44
	jmp	.LBB166_47
.LBB166_43:                             # %sw.bb
	callq	configError
.LBB166_44:                             # %sw.bb82
	callq	outOfMemory
.LBB166_45:                             # %sw.bb83
	jmp	.LBB166_46
.LBB166_46:                             # %errhandler_io
	callq	ioError
.LBB166_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB166_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB166_39
.Lfunc_end166:
	.size	compressStream.124, .Lfunc_end166-compressStream.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.125
	.type	uncompress.125,@function
uncompress.125:                         # @uncompress.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1254628108, -68(%rbp)  # imm = 0x4AC81B0C
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB167_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB167_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB167_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB167_6
	jmp	.LBB167_4
.LBB167_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB167_14
	jmp	.LBB167_5
.LBB167_5:                              # %if.end
	subl	$3, %eax
	je	.LBB167_7
	jmp	.LBB167_15
.LBB167_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB167_15
.LBB167_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB167_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB167_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB167_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB167_11
# %bb.10:                               # %if.then6
	jmp	.LBB167_16
.LBB167_11:                             # %if.end7
                                        #   in Loop: Header=BB167_8 Depth=1
	jmp	.LBB167_12
.LBB167_12:                             # %for.inc
                                        #   in Loop: Header=BB167_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB167_8
.LBB167_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB167_15
.LBB167_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB167_15:                             # %sw.epilog
	jmp	.LBB167_16
.LBB167_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB167_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB167_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB167_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB167_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB167_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB167_29
.LBB167_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB167_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_28:                             # %if.end40
	jmp	.LBB167_29
.LBB167_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB167_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB167_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB167_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB167_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB167_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB167_38:                             # %if.end61
	jmp	.LBB167_39
.LBB167_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB167_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB167_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB167_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB167_44
.LBB167_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_44:                             # %if.end74
	jmp	.LBB167_45
.LBB167_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB167_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB167_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB167_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB167_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB167_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB167_54
	jmp	.LBB167_52
.LBB167_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB167_57
	jmp	.LBB167_53
.LBB167_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB167_62
	jmp	.LBB167_71
.LBB167_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB167_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_56:                             # %if.end100
	jmp	.LBB167_72
.LBB167_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB167_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB167_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB167_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_61:                             # %if.end114
	jmp	.LBB167_72
.LBB167_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB167_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB167_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB167_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB167_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB167_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB167_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB167_95
.LBB167_70:                             # %if.end141
	jmp	.LBB167_72
.LBB167_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB167_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB167_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB167_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB167_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB167_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB167_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB167_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB167_79:                             # %if.end161
	jmp	.LBB167_80
.LBB167_80:                             # %if.end162
	jmp	.LBB167_81
.LBB167_81:                             # %if.end163
	jmp	.LBB167_87
.LBB167_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB167_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB167_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB167_85:                             # %if.end173
	jmp	.LBB167_86
.LBB167_86:                             # %if.end174
	jmp	.LBB167_87
.LBB167_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB167_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB167_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB167_90:                             # %if.end182
	jmp	.LBB167_95
.LBB167_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB167_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB167_94
.LBB167_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB167_94:                             # %if.end190
	jmp	.LBB167_95
.LBB167_95:                             # %if.end191
	cmpl	$1254628108, -68(%rbp)  # imm = 0x4AC81B0C
	jne	.LBB167_97
.LBB167_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_96
.Lfunc_end167:
	.size	uncompress.125, .Lfunc_end167-uncompress.125
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function cleanUpAndFail.126
	.type	cleanUpAndFail.126,@function
cleanUpAndFail.126:                     # @cleanUpAndFail.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1279242502, -12(%rbp)  # imm = 0x4C3FB106
	movl	%edi, -8(%rbp)
	cmpl	$3, srcMode
	jne	.LBB168_13
# %bb.1:                                # %land.lhs.true
	cmpl	$3, opMode
	je	.LBB168_13
# %bb.2:                                # %land.lhs.true2
	movzbl	deleteOutputOnInterrupt, %eax
	cmpl	$0, %eax
	je	.LBB168_13
# %bb.3:                                # %if.then
	movabsq	$inName, %rdi
	leaq	-160(%rbp), %rsi
	callq	stat
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	jne	.LBB168_11
# %bb.4:                                # %if.then5
	cmpb	$0, noisy
	je	.LBB168_6
# %bb.5:                                # %if.then7
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.39, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB168_6:                              # %if.end
	cmpq	$0, outputHandleJustInCase
	je	.LBB168_8
# %bb.7:                                # %if.then11
	movq	outputHandleJustInCase, %rdi
	callq	fclose
.LBB168_8:                              # %if.end13
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB168_10
# %bb.9:                                # %if.then17
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.40, %rsi
	movb	$0, %al
	callq	fprintf
.LBB168_10:                             # %if.end19
	jmp	.LBB168_12
.LBB168_11:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.41, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.42, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.43, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.44, %rsi
	movb	$0, %al
	callq	fprintf
.LBB168_12:                             # %if.end24
	jmp	.LBB168_13
.LBB168_13:                             # %if.end25
	movzbl	noisy, %eax
	cmpl	$0, %eax
	je	.LBB168_17
# %bb.14:                               # %land.lhs.true28
	cmpl	$0, numFileNames
	jle	.LBB168_17
# %bb.15:                               # %land.lhs.true31
	movl	numFilesProcessed, %eax
	cmpl	numFileNames, %eax
	jge	.LBB168_17
# %bb.16:                               # %if.then34
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movl	numFileNames, %r8d
	movl	numFileNames, %r9d
	subl	numFilesProcessed, %r9d
	movabsq	$.L.str.45, %rsi
	movb	$0, %al
	callq	fprintf
.LBB168_17:                             # %if.end36
	movl	-8(%rbp), %edi
	callq	setExit
	movl	exitValue, %edi
	callq	exit
.Lfunc_end168:
	.size	cleanUpAndFail.126, .Lfunc_end168-cleanUpAndFail.126
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.127 # -- Begin function fopen_output_safely.127
	.p2align	4, 0x90
	.type	fopen_output_safely.127,@function
fopen_output_safely.127:                # @fopen_output_safely.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1890052190, -16(%rbp)  # imm = 0x70A7E85E
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB169_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB169_5
.LBB169_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB169_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB169_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB169_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$1890052190, -16(%rbp)  # imm = 0x70A7E85E
	jne	.LBB169_7
.LBB169_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_6
.Lfunc_end169:
	.size	fopen_output_safely.127, .Lfunc_end169-fopen_output_safely.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.128
	.type	countHardLinks.128,@function
countHardLinks.128:                     # @countHardLinks.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1916363778, -20(%rbp)  # imm = 0x72396402
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB170_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB170_3
.LBB170_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB170_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1916363778, -20(%rbp)  # imm = 0x72396402
	jne	.LBB170_5
.LBB170_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_4
.Lfunc_end170:
	.size	countHardLinks.128, .Lfunc_end170-countHardLinks.128
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.129 # -- Begin function fopen_output_safely.129
	.p2align	4, 0x90
	.type	fopen_output_safely.129,@function
fopen_output_safely.129:                # @fopen_output_safely.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$57883030, -16(%rbp)    # imm = 0x3733996
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB171_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB171_5
.LBB171_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB171_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB171_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB171_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$57883030, -16(%rbp)    # imm = 0x3733996
	jne	.LBB171_7
.LBB171_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_6
.Lfunc_end171:
	.size	fopen_output_safely.129, .Lfunc_end171-fopen_output_safely.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.130
	.type	uncompress.130,@function
uncompress.130:                         # @uncompress.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$817771639, -60(%rbp)   # imm = 0x30BE3477
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB172_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB172_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB172_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB172_6
	jmp	.LBB172_4
.LBB172_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB172_14
	jmp	.LBB172_5
.LBB172_5:                              # %if.end
	subl	$3, %eax
	je	.LBB172_7
	jmp	.LBB172_15
.LBB172_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB172_15
.LBB172_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB172_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB172_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB172_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB172_11
# %bb.10:                               # %if.then6
	jmp	.LBB172_16
.LBB172_11:                             # %if.end7
                                        #   in Loop: Header=BB172_8 Depth=1
	jmp	.LBB172_12
.LBB172_12:                             # %for.inc
                                        #   in Loop: Header=BB172_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB172_8
.LBB172_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB172_15
.LBB172_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB172_15:                             # %sw.epilog
	jmp	.LBB172_16
.LBB172_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB172_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB172_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB172_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB172_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB172_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB172_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB172_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB172_29
.LBB172_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB172_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_28:                             # %if.end40
	jmp	.LBB172_29
.LBB172_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB172_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB172_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB172_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB172_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB172_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB172_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB172_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB172_38:                             # %if.end61
	jmp	.LBB172_39
.LBB172_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB172_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB172_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB172_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB172_44
.LBB172_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_44:                             # %if.end74
	jmp	.LBB172_45
.LBB172_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB172_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB172_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB172_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB172_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB172_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB172_54
	jmp	.LBB172_52
.LBB172_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB172_57
	jmp	.LBB172_53
.LBB172_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB172_62
	jmp	.LBB172_71
.LBB172_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB172_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_56:                             # %if.end100
	jmp	.LBB172_72
.LBB172_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB172_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB172_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB172_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_61:                             # %if.end114
	jmp	.LBB172_72
.LBB172_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB172_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB172_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB172_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB172_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB172_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB172_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB172_95
.LBB172_70:                             # %if.end141
	jmp	.LBB172_72
.LBB172_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB172_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB172_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB172_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB172_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB172_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB172_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB172_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB172_79:                             # %if.end161
	jmp	.LBB172_80
.LBB172_80:                             # %if.end162
	jmp	.LBB172_81
.LBB172_81:                             # %if.end163
	jmp	.LBB172_87
.LBB172_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB172_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB172_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB172_85:                             # %if.end173
	jmp	.LBB172_86
.LBB172_86:                             # %if.end174
	jmp	.LBB172_87
.LBB172_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB172_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB172_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB172_90:                             # %if.end182
	jmp	.LBB172_95
.LBB172_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB172_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB172_94
.LBB172_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB172_94:                             # %if.end190
	jmp	.LBB172_95
.LBB172_95:                             # %if.end191
	cmpl	$817771639, -60(%rbp)   # imm = 0x30BE3477
	jne	.LBB172_97
.LBB172_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_96
.Lfunc_end172:
	.size	uncompress.130, .Lfunc_end172-uncompress.130
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.131
	.type	uncompress.131,@function
uncompress.131:                         # @uncompress.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$662326279, -60(%rbp)   # imm = 0x277A4C07
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB173_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB173_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB173_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB173_6
	jmp	.LBB173_4
.LBB173_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB173_14
	jmp	.LBB173_5
.LBB173_5:                              # %if.end
	subl	$3, %eax
	je	.LBB173_7
	jmp	.LBB173_15
.LBB173_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB173_15
.LBB173_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB173_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB173_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB173_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB173_11
# %bb.10:                               # %if.then6
	jmp	.LBB173_16
.LBB173_11:                             # %if.end7
                                        #   in Loop: Header=BB173_8 Depth=1
	jmp	.LBB173_12
.LBB173_12:                             # %for.inc
                                        #   in Loop: Header=BB173_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB173_8
.LBB173_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB173_15
.LBB173_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB173_15:                             # %sw.epilog
	jmp	.LBB173_16
.LBB173_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB173_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB173_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB173_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB173_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB173_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB173_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB173_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB173_29
.LBB173_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB173_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_28:                             # %if.end40
	jmp	.LBB173_29
.LBB173_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB173_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB173_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB173_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB173_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB173_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB173_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB173_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB173_38:                             # %if.end61
	jmp	.LBB173_39
.LBB173_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB173_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB173_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB173_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB173_44
.LBB173_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_44:                             # %if.end74
	jmp	.LBB173_45
.LBB173_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB173_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB173_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB173_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB173_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB173_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB173_54
	jmp	.LBB173_52
.LBB173_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB173_57
	jmp	.LBB173_53
.LBB173_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB173_62
	jmp	.LBB173_71
.LBB173_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB173_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_56:                             # %if.end100
	jmp	.LBB173_72
.LBB173_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB173_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB173_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB173_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_61:                             # %if.end114
	jmp	.LBB173_72
.LBB173_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB173_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB173_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB173_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB173_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB173_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB173_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB173_95
.LBB173_70:                             # %if.end141
	jmp	.LBB173_72
.LBB173_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB173_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB173_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB173_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB173_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB173_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB173_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB173_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB173_79:                             # %if.end161
	jmp	.LBB173_80
.LBB173_80:                             # %if.end162
	jmp	.LBB173_81
.LBB173_81:                             # %if.end163
	jmp	.LBB173_87
.LBB173_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB173_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB173_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB173_85:                             # %if.end173
	jmp	.LBB173_86
.LBB173_86:                             # %if.end174
	jmp	.LBB173_87
.LBB173_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB173_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB173_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB173_90:                             # %if.end182
	jmp	.LBB173_95
.LBB173_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB173_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB173_94
.LBB173_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB173_94:                             # %if.end190
	jmp	.LBB173_95
.LBB173_95:                             # %if.end191
	cmpl	$662326279, -60(%rbp)   # imm = 0x277A4C07
	jne	.LBB173_97
.LBB173_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_96
.Lfunc_end173:
	.size	uncompress.131, .Lfunc_end173-uncompress.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.132
	.type	uInt64_toAscii.132,@function
uInt64_toAscii.132:                     # @uInt64_toAscii.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1076051499, -12(%rbp)  # imm = 0x40233E2B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB174_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB174_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB174_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB174_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB174_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB174_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB174_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_4
.LBB174_7:                              # %for.end
	cmpl	$1076051499, -12(%rbp)  # imm = 0x40233E2B
	jne	.LBB174_9
.LBB174_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_8
.Lfunc_end174:
	.size	uInt64_toAscii.132, .Lfunc_end174-uInt64_toAscii.132
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.133
	.type	uInt64_qrm10.133,@function
uInt64_qrm10.133:                       # @uInt64_qrm10.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$251098473, -24(%rbp)   # imm = 0xEF77569
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB175_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB175_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_1
.LBB175_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$251098473, -24(%rbp)   # imm = 0xEF77569
	jne	.LBB175_6
.LBB175_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_5
.Lfunc_end175:
	.size	uInt64_qrm10.133, .Lfunc_end175-uInt64_qrm10.133
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.134
	.type	notAStandardFile.134,@function
notAStandardFile.134:                   # @notAStandardFile.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$145532756, -20(%rbp)   # imm = 0x8ACA754
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB176_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB176_5
.LBB176_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB176_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB176_5
.LBB176_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB176_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$145532756, -20(%rbp)   # imm = 0x8ACA754
	jne	.LBB176_7
.LBB176_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_6
.Lfunc_end176:
	.size	notAStandardFile.134, .Lfunc_end176-notAStandardFile.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.135
	.type	testf.135,@function
testf.135:                              # @testf.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$244991784, -44(%rbp)   # imm = 0xE9A4728
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB177_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB177_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB177_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB177_6
	jmp	.LBB177_4
.LBB177_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB177_8
	jmp	.LBB177_5
.LBB177_5:                              # %if.end
	subl	$3, %eax
	je	.LBB177_7
	jmp	.LBB177_9
.LBB177_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB177_9
.LBB177_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB177_9
.LBB177_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB177_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB177_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB177_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB177_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB177_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB177_37
.LBB177_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB177_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB177_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB177_37
.LBB177_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB177_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB177_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB177_37
.LBB177_20:                             # %if.end30
	jmp	.LBB177_21
.LBB177_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB177_23
	jmp	.LBB177_22
.LBB177_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB177_26
	jmp	.LBB177_29
.LBB177_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB177_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB177_37
.LBB177_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB177_30
.LBB177_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB177_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB177_37
.LBB177_28:                             # %if.end48
	jmp	.LBB177_30
.LBB177_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB177_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB177_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB177_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB177_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB177_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB177_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB177_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB177_37:                             # %if.end67
	cmpl	$244991784, -44(%rbp)   # imm = 0xE9A4728
	jne	.LBB177_39
.LBB177_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_38
.Lfunc_end177:
	.size	testf.135, .Lfunc_end177-testf.135
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.136 # -- Begin function fopen_output_safely.136
	.p2align	4, 0x90
	.type	fopen_output_safely.136,@function
fopen_output_safely.136:                # @fopen_output_safely.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$539060532, -16(%rbp)   # imm = 0x20216934
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB178_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB178_5
.LBB178_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB178_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB178_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB178_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$539060532, -16(%rbp)   # imm = 0x20216934
	jne	.LBB178_7
.LBB178_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_6
.Lfunc_end178:
	.size	fopen_output_safely.136, .Lfunc_end178-fopen_output_safely.136
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.137 # -- Begin function fopen_output_safely.137
	.p2align	4, 0x90
	.type	fopen_output_safely.137,@function
fopen_output_safely.137:                # @fopen_output_safely.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2074900796, -16(%rbp)  # imm = 0x7BAC793C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB179_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB179_5
.LBB179_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB179_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB179_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB179_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$2074900796, -16(%rbp)  # imm = 0x7BAC793C
	jne	.LBB179_7
.LBB179_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_6
.Lfunc_end179:
	.size	fopen_output_safely.137, .Lfunc_end179-fopen_output_safely.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.138
	.type	uInt64_toAscii.138,@function
uInt64_toAscii.138:                     # @uInt64_toAscii.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1630004908, -12(%rbp)  # imm = 0x6127E6AC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB180_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB180_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB180_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB180_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB180_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB180_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB180_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB180_4
.LBB180_7:                              # %for.end
	cmpl	$1630004908, -12(%rbp)  # imm = 0x6127E6AC
	jne	.LBB180_9
.LBB180_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_8
.Lfunc_end180:
	.size	uInt64_toAscii.138, .Lfunc_end180-uInt64_toAscii.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.139
	.type	testf.139,@function
testf.139:                              # @testf.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1047542701, -44(%rbp)  # imm = 0x3E703BAD
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB181_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB181_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB181_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB181_6
	jmp	.LBB181_4
.LBB181_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB181_8
	jmp	.LBB181_5
.LBB181_5:                              # %if.end
	subl	$3, %eax
	je	.LBB181_7
	jmp	.LBB181_9
.LBB181_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB181_9
.LBB181_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB181_9
.LBB181_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB181_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB181_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB181_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB181_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB181_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB181_37
.LBB181_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB181_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB181_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB181_37
.LBB181_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB181_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB181_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB181_37
.LBB181_20:                             # %if.end30
	jmp	.LBB181_21
.LBB181_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB181_23
	jmp	.LBB181_22
.LBB181_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB181_26
	jmp	.LBB181_29
.LBB181_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB181_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB181_37
.LBB181_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB181_30
.LBB181_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB181_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB181_37
.LBB181_28:                             # %if.end48
	jmp	.LBB181_30
.LBB181_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB181_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB181_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB181_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB181_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB181_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB181_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB181_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB181_37:                             # %if.end67
	cmpl	$1047542701, -44(%rbp)  # imm = 0x3E703BAD
	jne	.LBB181_39
.LBB181_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_38
.Lfunc_end181:
	.size	testf.139, .Lfunc_end181-testf.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.140
	.type	uncompress.140,@function
uncompress.140:                         # @uncompress.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1115963406, -64(%rbp)  # imm = 0x4284400E
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB182_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB182_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB182_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB182_6
	jmp	.LBB182_4
.LBB182_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB182_14
	jmp	.LBB182_5
.LBB182_5:                              # %if.end
	subl	$3, %eax
	je	.LBB182_7
	jmp	.LBB182_15
.LBB182_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB182_15
.LBB182_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB182_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB182_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB182_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB182_11
# %bb.10:                               # %if.then6
	jmp	.LBB182_16
.LBB182_11:                             # %if.end7
                                        #   in Loop: Header=BB182_8 Depth=1
	jmp	.LBB182_12
.LBB182_12:                             # %for.inc
                                        #   in Loop: Header=BB182_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB182_8
.LBB182_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB182_15
.LBB182_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB182_15:                             # %sw.epilog
	jmp	.LBB182_16
.LBB182_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB182_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB182_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB182_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB182_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB182_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB182_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB182_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB182_29
.LBB182_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB182_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_28:                             # %if.end40
	jmp	.LBB182_29
.LBB182_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB182_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB182_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB182_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB182_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB182_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB182_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB182_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB182_38:                             # %if.end61
	jmp	.LBB182_39
.LBB182_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB182_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB182_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB182_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB182_44
.LBB182_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_44:                             # %if.end74
	jmp	.LBB182_45
.LBB182_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB182_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB182_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB182_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB182_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB182_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB182_54
	jmp	.LBB182_52
.LBB182_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB182_57
	jmp	.LBB182_53
.LBB182_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB182_62
	jmp	.LBB182_71
.LBB182_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB182_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_56:                             # %if.end100
	jmp	.LBB182_72
.LBB182_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB182_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB182_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB182_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_61:                             # %if.end114
	jmp	.LBB182_72
.LBB182_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB182_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB182_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB182_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB182_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB182_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB182_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB182_95
.LBB182_70:                             # %if.end141
	jmp	.LBB182_72
.LBB182_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB182_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB182_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB182_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB182_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB182_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB182_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB182_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB182_79:                             # %if.end161
	jmp	.LBB182_80
.LBB182_80:                             # %if.end162
	jmp	.LBB182_81
.LBB182_81:                             # %if.end163
	jmp	.LBB182_87
.LBB182_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB182_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB182_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB182_85:                             # %if.end173
	jmp	.LBB182_86
.LBB182_86:                             # %if.end174
	jmp	.LBB182_87
.LBB182_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB182_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB182_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB182_90:                             # %if.end182
	jmp	.LBB182_95
.LBB182_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB182_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB182_94
.LBB182_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB182_94:                             # %if.end190
	jmp	.LBB182_95
.LBB182_95:                             # %if.end191
	cmpl	$1115963406, -64(%rbp)  # imm = 0x4284400E
	jne	.LBB182_97
.LBB182_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_96
.Lfunc_end182:
	.size	uncompress.140, .Lfunc_end182-uncompress.140
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.141
	.type	testf.141,@function
testf.141:                              # @testf.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1753667594, -44(%rbp)  # imm = 0x6886D80A
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB183_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB183_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB183_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB183_6
	jmp	.LBB183_4
.LBB183_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB183_8
	jmp	.LBB183_5
.LBB183_5:                              # %if.end
	subl	$3, %eax
	je	.LBB183_7
	jmp	.LBB183_9
.LBB183_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB183_9
.LBB183_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB183_9
.LBB183_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB183_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB183_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB183_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB183_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB183_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB183_37
.LBB183_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB183_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB183_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB183_37
.LBB183_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB183_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB183_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB183_37
.LBB183_20:                             # %if.end30
	jmp	.LBB183_21
.LBB183_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB183_23
	jmp	.LBB183_22
.LBB183_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB183_26
	jmp	.LBB183_29
.LBB183_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB183_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB183_37
.LBB183_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB183_30
.LBB183_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB183_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB183_37
.LBB183_28:                             # %if.end48
	jmp	.LBB183_30
.LBB183_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB183_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB183_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB183_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB183_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB183_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB183_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB183_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB183_37:                             # %if.end67
	cmpl	$1753667594, -44(%rbp)  # imm = 0x6886D80A
	jne	.LBB183_39
.LBB183_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_38
.Lfunc_end183:
	.size	testf.141, .Lfunc_end183-testf.141
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.142
	.type	mapSuffix.142,@function
mapSuffix.142:                          # @mapSuffix.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1123784810, -36(%rbp)  # imm = 0x42FB986A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB184_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB184_3
.LBB184_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB184_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1123784810, -36(%rbp)  # imm = 0x42FB986A
	jne	.LBB184_5
.LBB184_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_4
.Lfunc_end184:
	.size	mapSuffix.142, .Lfunc_end184-mapSuffix.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.143
	.type	hasSuffix.143,@function
hasSuffix.143:                          # @hasSuffix.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1837605162, -24(%rbp)  # imm = 0x6D87A12A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB185_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB185_5
.LBB185_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB185_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB185_5
.LBB185_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB185_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1837605162, -24(%rbp)  # imm = 0x6D87A12A
	jne	.LBB185_7
.LBB185_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_6
.Lfunc_end185:
	.size	hasSuffix.143, .Lfunc_end185-hasSuffix.143
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.144
	.type	addFlagsFromEnvVar.144,@function
addFlagsFromEnvVar.144:                 # @addFlagsFromEnvVar.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1789520741, -24(%rbp)  # imm = 0x6AA9EB65
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB186_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB186_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_5 Depth 2
                                        #     Child Loop BB186_8 Depth 2
                                        #     Child Loop BB186_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB186_4
# %bb.3:                                # %if.then3
	jmp	.LBB186_21
.LBB186_4:                              # %if.end
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB186_5:                              # %while.cond4
                                        #   Parent Loop BB186_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB186_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB186_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB186_5
.LBB186_7:                              # %while.end
                                        #   in Loop: Header=BB186_2 Depth=1
	jmp	.LBB186_8
.LBB186_8:                              # %while.cond12
                                        #   Parent Loop BB186_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB186_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB186_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB186_10:                             # %land.end
                                        #   in Loop: Header=BB186_8 Depth=2
	testb	$1, %al
	jne	.LBB186_11
	jmp	.LBB186_12
.LBB186_11:                             # %while.body27
                                        #   in Loop: Header=BB186_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_8
.LBB186_12:                             # %while.end28
                                        #   in Loop: Header=BB186_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB186_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB186_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB186_15:                             # %if.end35
                                        #   in Loop: Header=BB186_2 Depth=1
	movl	$0, -8(%rbp)
.LBB186_16:                             # %for.cond
                                        #   Parent Loop BB186_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB186_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB186_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB186_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_16
.LBB186_19:                             # %for.end
                                        #   in Loop: Header=BB186_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB186_20:                             # %if.end46
                                        #   in Loop: Header=BB186_2 Depth=1
	jmp	.LBB186_2
.LBB186_21:                             # %while.end47
	jmp	.LBB186_22
.LBB186_22:                             # %if.end48
	cmpl	$1789520741, -24(%rbp)  # imm = 0x6AA9EB65
	jne	.LBB186_24
.LBB186_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_23
.Lfunc_end186:
	.size	addFlagsFromEnvVar.144, .Lfunc_end186-addFlagsFromEnvVar.144
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.145
.LCPI187_0:
	.quad	4607182418800017408     # double 1
.LCPI187_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.145,@function
uInt64_to_double.145:                   # @uInt64_to_double.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI187_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1940269494, -28(%rbp)  # imm = 0x73A629B6
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB187_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB187_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB187_1 Depth=1
	vmovsd	.LCPI187_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB187_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_1
.LBB187_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1940269494, -28(%rbp)  # imm = 0x73A629B6
	jne	.LBB187_6
.LBB187_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB187_5
.Lfunc_end187:
	.size	uInt64_to_double.145, .Lfunc_end187-uInt64_to_double.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.146
	.type	uncompressStream.146,@function
uncompressStream.146:                   # @uncompressStream.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1072378958, -68(%rbp)  # imm = 0x3FEB344E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_2
# %bb.1:                                # %if.then
	jmp	.LBB188_66
.LBB188_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_4
# %bb.3:                                # %if.then3
	jmp	.LBB188_66
.LBB188_4:                              # %if.end4
	jmp	.LBB188_5
.LBB188_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_9 Depth 2
                                        #     Child Loop BB188_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB188_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB188_8
.LBB188_7:                              # %if.then9
	jmp	.LBB188_62
.LBB188_8:                              # %if.end10
                                        #   in Loop: Header=BB188_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB188_9:                              # %while.cond11
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB188_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB188_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB188_12
# %bb.11:                               # %if.then19
	jmp	.LBB188_49
.LBB188_12:                             # %if.end20
                                        #   in Loop: Header=BB188_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB188_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB188_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB188_16
.LBB188_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB188_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB188_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB188_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB188_16:                             # %if.end32
                                        #   in Loop: Header=BB188_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_18
# %bb.17:                               # %if.then35
	jmp	.LBB188_66
.LBB188_18:                             # %if.end36
                                        #   in Loop: Header=BB188_9 Depth=2
	jmp	.LBB188_9
.LBB188_19:                             # %while.end
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB188_21
# %bb.20:                               # %if.then39
	jmp	.LBB188_62
.LBB188_21:                             # %if.end40
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB188_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB188_23:                             # %if.end44
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB188_24:                             # %for.cond
                                        #   Parent Loop BB188_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB188_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB188_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB188_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB188_24
.LBB188_27:                             # %for.end
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB188_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB188_29:                             # %if.end53
                                        #   in Loop: Header=BB188_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB188_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB188_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB188_32
# %bb.31:                               # %if.then60
	jmp	.LBB188_33
.LBB188_32:                             # %if.end61
                                        #   in Loop: Header=BB188_5 Depth=1
	jmp	.LBB188_5
.LBB188_33:                             # %while.end62
	jmp	.LBB188_34
.LBB188_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_36
# %bb.35:                               # %if.then65
	jmp	.LBB188_66
.LBB188_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB188_38
# %bb.37:                               # %if.then70
	jmp	.LBB188_66
.LBB188_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_40
# %bb.39:                               # %if.then74
	jmp	.LBB188_66
.LBB188_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB188_42
# %bb.41:                               # %if.then79
	jmp	.LBB188_66
.LBB188_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB188_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB188_45
# %bb.44:                               # %if.then87
	jmp	.LBB188_66
.LBB188_45:                             # %if.end88
	jmp	.LBB188_46
.LBB188_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB188_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB188_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB188_80
.LBB188_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB188_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB188_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB188_53
# %bb.52:                               # %if.then100
	jmp	.LBB188_60
.LBB188_53:                             # %if.end101
                                        #   in Loop: Header=BB188_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_55
# %bb.54:                               # %if.then107
	jmp	.LBB188_66
.LBB188_55:                             # %if.end108
                                        #   in Loop: Header=BB188_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB188_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB188_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB188_57:                             # %if.end115
                                        #   in Loop: Header=BB188_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB188_59
# %bb.58:                               # %if.then118
	jmp	.LBB188_66
.LBB188_59:                             # %if.end119
                                        #   in Loop: Header=BB188_51 Depth=1
	jmp	.LBB188_51
.LBB188_60:                             # %while.end120
	jmp	.LBB188_34
.LBB188_61:                             # %if.end121
	jmp	.LBB188_62
.LBB188_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB188_79
# %bb.63:                               # %errhandler
	movq	.LJTI188_0(,%rax,8), %rax
	jmpq	*%rax
.LBB188_64:                             # %sw.bb
	callq	configError
.LBB188_65:                             # %sw.bb122
	jmp	.LBB188_66
.LBB188_66:                             # %errhandler_io
	callq	ioError
.LBB188_67:                             # %sw.bb123
	callq	crcError
.LBB188_68:                             # %sw.bb124
	callq	outOfMemory
.LBB188_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB188_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB188_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB188_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB188_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB188_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB188_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB188_80
.LBB188_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB188_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB188_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB188_80
.LBB188_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB188_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1072378958, -68(%rbp)  # imm = 0x3FEB344E
	jne	.LBB188_82
.LBB188_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_81
.Lfunc_end188:
	.size	uncompressStream.146, .Lfunc_end188-uncompressStream.146
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI188_0:
	.quad	.LBB188_64
	.quad	.LBB188_79
	.quad	.LBB188_69
	.quad	.LBB188_65
	.quad	.LBB188_70
	.quad	.LBB188_67
	.quad	.LBB188_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.147
	.type	uInt64_qrm10.147,@function
uInt64_qrm10.147:                       # @uInt64_qrm10.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1035520844, -24(%rbp)  # imm = 0x3DB8CB4C
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB189_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB189_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_1
.LBB189_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1035520844, -24(%rbp)  # imm = 0x3DB8CB4C
	jne	.LBB189_6
.LBB189_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_5
.Lfunc_end189:
	.size	uInt64_qrm10.147, .Lfunc_end189-uInt64_qrm10.147
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.148
	.type	testStream.148,@function
testStream.148:                         # @testStream.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$910883966, -52(%rbp)   # imm = 0x364AFC7E
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB190_2
# %bb.1:                                # %if.then
	jmp	.LBB190_38
.LBB190_2:                              # %if.end
	jmp	.LBB190_3
.LBB190_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_7 Depth 2
                                        #     Child Loop BB190_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB190_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB190_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB190_6
.LBB190_5:                              # %if.then5
	jmp	.LBB190_32
.LBB190_6:                              # %if.end6
                                        #   in Loop: Header=BB190_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB190_7:                              # %while.cond7
                                        #   Parent Loop BB190_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB190_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB190_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB190_10
# %bb.9:                                # %if.then15
	jmp	.LBB190_32
.LBB190_10:                             # %if.end16
                                        #   in Loop: Header=BB190_7 Depth=2
	jmp	.LBB190_7
.LBB190_11:                             # %while.end
                                        #   in Loop: Header=BB190_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB190_13
# %bb.12:                               # %if.then19
	jmp	.LBB190_32
.LBB190_13:                             # %if.end20
                                        #   in Loop: Header=BB190_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB190_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB190_15:                             # %if.end24
                                        #   in Loop: Header=BB190_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB190_16:                             # %for.cond
                                        #   Parent Loop BB190_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB190_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB190_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB190_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB190_16
.LBB190_19:                             # %for.end
                                        #   in Loop: Header=BB190_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB190_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB190_21:                             # %if.end33
                                        #   in Loop: Header=BB190_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB190_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB190_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB190_24
# %bb.23:                               # %if.then39
	jmp	.LBB190_25
.LBB190_24:                             # %if.end40
                                        #   in Loop: Header=BB190_3 Depth=1
	jmp	.LBB190_3
.LBB190_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB190_27
# %bb.26:                               # %if.then44
	jmp	.LBB190_38
.LBB190_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB190_29
# %bb.28:                               # %if.then49
	jmp	.LBB190_38
.LBB190_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB190_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB190_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB190_50
.LBB190_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB190_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB190_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB190_49
# %bb.35:                               # %if.end60
	movq	.LJTI190_0(,%rax,8), %rax
	jmpq	*%rax
.LBB190_36:                             # %sw.bb
	callq	configError
.LBB190_37:                             # %sw.bb61
	jmp	.LBB190_38
.LBB190_38:                             # %errhandler_io
	callq	ioError
.LBB190_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB190_50
.LBB190_40:                             # %sw.bb64
	callq	outOfMemory
.LBB190_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB190_50
.LBB190_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB190_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB190_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB190_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB190_50
.LBB190_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB190_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB190_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB190_50
.LBB190_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB190_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$910883966, -52(%rbp)   # imm = 0x364AFC7E
	jne	.LBB190_52
.LBB190_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_51
.Lfunc_end190:
	.size	testStream.148, .Lfunc_end190-testStream.148
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI190_0:
	.quad	.LBB190_36
	.quad	.LBB190_49
	.quad	.LBB190_41
	.quad	.LBB190_37
	.quad	.LBB190_42
	.quad	.LBB190_39
	.quad	.LBB190_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.149
	.type	applySavedMetaInfoToOutputFile.149,@function
applySavedMetaInfoToOutputFile.149:     # @applySavedMetaInfoToOutputFile.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1597789394, -20(%rbp)  # imm = 0x5F3C54D2
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB191_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB191_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB191_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB191_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$1597789394, -20(%rbp)  # imm = 0x5F3C54D2
	jne	.LBB191_6
.LBB191_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_5
.Lfunc_end191:
	.size	applySavedMetaInfoToOutputFile.149, .Lfunc_end191-applySavedMetaInfoToOutputFile.149
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.150
	.type	snocString.150,@function
snocString.150:                         # @snocString.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$418680926, -44(%rbp)   # imm = 0x18F4905E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB192_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB192_6
.LBB192_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB192_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB192_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB192_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB192_3
.LBB192_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB192_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$418680926, -44(%rbp)   # imm = 0x18F4905E
	jne	.LBB192_8
.LBB192_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_7
.Lfunc_end192:
	.size	snocString.150, .Lfunc_end192-snocString.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.151
	.type	uInt64_qrm10.151,@function
uInt64_qrm10.151:                       # @uInt64_qrm10.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$854928272, -24(%rbp)   # imm = 0x32F52B90
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB193_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB193_1
.LBB193_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$854928272, -24(%rbp)   # imm = 0x32F52B90
	jne	.LBB193_6
.LBB193_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_5
.Lfunc_end193:
	.size	uInt64_qrm10.151, .Lfunc_end193-uInt64_qrm10.151
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.152
	.type	testf.152,@function
testf.152:                              # @testf.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1372297871, -44(%rbp)  # imm = 0x51CB9A8F
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB194_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB194_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB194_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB194_6
	jmp	.LBB194_4
.LBB194_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB194_8
	jmp	.LBB194_5
.LBB194_5:                              # %if.end
	subl	$3, %eax
	je	.LBB194_7
	jmp	.LBB194_9
.LBB194_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB194_9
.LBB194_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB194_9
.LBB194_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB194_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB194_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB194_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB194_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB194_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB194_37
.LBB194_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB194_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB194_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB194_37
.LBB194_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB194_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB194_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB194_37
.LBB194_20:                             # %if.end30
	jmp	.LBB194_21
.LBB194_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB194_23
	jmp	.LBB194_22
.LBB194_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB194_26
	jmp	.LBB194_29
.LBB194_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB194_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB194_37
.LBB194_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB194_30
.LBB194_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB194_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB194_37
.LBB194_28:                             # %if.end48
	jmp	.LBB194_30
.LBB194_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB194_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB194_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB194_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB194_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB194_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB194_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB194_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB194_37:                             # %if.end67
	cmpl	$1372297871, -44(%rbp)  # imm = 0x51CB9A8F
	jne	.LBB194_39
.LBB194_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_38
.Lfunc_end194:
	.size	testf.152, .Lfunc_end194-testf.152
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.153
	.type	mapSuffix.153,@function
mapSuffix.153:                          # @mapSuffix.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$964302435, -36(%rbp)   # imm = 0x397A1663
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB195_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB195_3
.LBB195_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB195_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$964302435, -36(%rbp)   # imm = 0x397A1663
	jne	.LBB195_5
.LBB195_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_4
.Lfunc_end195:
	.size	mapSuffix.153, .Lfunc_end195-mapSuffix.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.154
	.type	applySavedMetaInfoToOutputFile.154,@function
applySavedMetaInfoToOutputFile.154:     # @applySavedMetaInfoToOutputFile.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2007192953, -20(%rbp)  # imm = 0x77A35579
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB196_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB196_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB196_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB196_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$2007192953, -20(%rbp)  # imm = 0x77A35579
	jne	.LBB196_6
.LBB196_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_5
.Lfunc_end196:
	.size	applySavedMetaInfoToOutputFile.154, .Lfunc_end196-applySavedMetaInfoToOutputFile.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.155
	.type	testStream.155,@function
testStream.155:                         # @testStream.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1845769899, -52(%rbp)  # imm = 0x6E0436AB
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB197_2
# %bb.1:                                # %if.then
	jmp	.LBB197_38
.LBB197_2:                              # %if.end
	jmp	.LBB197_3
.LBB197_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB197_7 Depth 2
                                        #     Child Loop BB197_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB197_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB197_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB197_6
.LBB197_5:                              # %if.then5
	jmp	.LBB197_32
.LBB197_6:                              # %if.end6
                                        #   in Loop: Header=BB197_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB197_7:                              # %while.cond7
                                        #   Parent Loop BB197_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB197_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB197_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB197_10
# %bb.9:                                # %if.then15
	jmp	.LBB197_32
.LBB197_10:                             # %if.end16
                                        #   in Loop: Header=BB197_7 Depth=2
	jmp	.LBB197_7
.LBB197_11:                             # %while.end
                                        #   in Loop: Header=BB197_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB197_13
# %bb.12:                               # %if.then19
	jmp	.LBB197_32
.LBB197_13:                             # %if.end20
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-72(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB197_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB197_15:                             # %if.end24
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-72(%rbp), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB197_16:                             # %for.cond
                                        #   Parent Loop BB197_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB197_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB197_16 Depth=2
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB197_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB197_16
.LBB197_19:                             # %for.end
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB197_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB197_21:                             # %if.end33
                                        #   in Loop: Header=BB197_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB197_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB197_24
# %bb.23:                               # %if.then39
	jmp	.LBB197_25
.LBB197_24:                             # %if.end40
                                        #   in Loop: Header=BB197_3 Depth=1
	jmp	.LBB197_3
.LBB197_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB197_27
# %bb.26:                               # %if.then44
	jmp	.LBB197_38
.LBB197_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB197_29
# %bb.28:                               # %if.then49
	jmp	.LBB197_38
.LBB197_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB197_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB197_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB197_50
.LBB197_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB197_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB197_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB197_49
# %bb.35:                               # %if.end60
	movq	.LJTI197_0(,%rax,8), %rax
	jmpq	*%rax
.LBB197_36:                             # %sw.bb
	callq	configError
.LBB197_37:                             # %sw.bb61
	jmp	.LBB197_38
.LBB197_38:                             # %errhandler_io
	callq	ioError
.LBB197_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB197_50
.LBB197_40:                             # %sw.bb64
	callq	outOfMemory
.LBB197_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB197_50
.LBB197_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB197_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB197_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB197_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB197_50
.LBB197_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB197_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB197_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB197_50
.LBB197_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB197_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1845769899, -52(%rbp)  # imm = 0x6E0436AB
	jne	.LBB197_52
.LBB197_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_51
.Lfunc_end197:
	.size	testStream.155, .Lfunc_end197-testStream.155
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI197_0:
	.quad	.LBB197_36
	.quad	.LBB197_49
	.quad	.LBB197_41
	.quad	.LBB197_37
	.quad	.LBB197_42
	.quad	.LBB197_39
	.quad	.LBB197_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.156
	.type	applySavedMetaInfoToOutputFile.156,@function
applySavedMetaInfoToOutputFile.156:     # @applySavedMetaInfoToOutputFile.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1486531118, -20(%rbp)  # imm = 0x589AAA2E
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB198_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB198_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB198_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB198_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$1486531118, -20(%rbp)  # imm = 0x589AAA2E
	jne	.LBB198_6
.LBB198_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_5
.Lfunc_end198:
	.size	applySavedMetaInfoToOutputFile.156, .Lfunc_end198-applySavedMetaInfoToOutputFile.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.157
	.type	hasSuffix.157,@function
hasSuffix.157:                          # @hasSuffix.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1006062170, -24(%rbp)  # imm = 0x3BF74A5A
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB199_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB199_5
.LBB199_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB199_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB199_5
.LBB199_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB199_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1006062170, -24(%rbp)  # imm = 0x3BF74A5A
	jne	.LBB199_7
.LBB199_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_6
.Lfunc_end199:
	.size	hasSuffix.157, .Lfunc_end199-hasSuffix.157
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.158
.LCPI200_0:
	.quad	4636737291354636288     # double 100
.LCPI200_1:
	.quad	4607182418800017408     # double 1
.LCPI200_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.158,@function
compressStream.158:                     # @compressStream.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$71986326, -76(%rbp)    # imm = 0x44A6C96
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB200_2
# %bb.1:                                # %if.then
	jmp	.LBB200_46
.LBB200_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB200_4
# %bb.3:                                # %if.then3
	jmp	.LBB200_46
.LBB200_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB200_6
# %bb.5:                                # %if.then6
	jmp	.LBB200_40
.LBB200_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB200_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB200_8:                              # %if.end11
	jmp	.LBB200_9
.LBB200_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB200_11
# %bb.10:                               # %if.then14
	jmp	.LBB200_18
.LBB200_11:                             # %if.end15
                                        #   in Loop: Header=BB200_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB200_13
# %bb.12:                               # %if.then19
	jmp	.LBB200_46
.LBB200_13:                             # %if.end20
                                        #   in Loop: Header=BB200_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB200_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB200_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB200_15:                             # %if.end25
                                        #   in Loop: Header=BB200_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB200_17
# %bb.16:                               # %if.then28
	jmp	.LBB200_40
.LBB200_17:                             # %if.end29
                                        #   in Loop: Header=BB200_9 Depth=1
	jmp	.LBB200_9
.LBB200_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB200_20
# %bb.19:                               # %if.then32
	jmp	.LBB200_40
.LBB200_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB200_22
# %bb.21:                               # %if.then36
	jmp	.LBB200_46
.LBB200_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB200_24
# %bb.23:                               # %if.then41
	jmp	.LBB200_46
.LBB200_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB200_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB200_27
# %bb.26:                               # %if.then49
	jmp	.LBB200_46
.LBB200_27:                             # %if.end50
	jmp	.LBB200_28
.LBB200_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB200_30
# %bb.29:                               # %if.then54
	jmp	.LBB200_46
.LBB200_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB200_32
# %bb.31:                               # %if.then59
	jmp	.LBB200_46
.LBB200_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB200_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB200_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB200_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB200_37
.LBB200_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI200_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI200_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI200_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB200_37:                             # %if.end80
	jmp	.LBB200_38
.LBB200_38:                             # %if.end81
	cmpl	$71986326, -76(%rbp)    # imm = 0x44A6C96
	jne	.LBB200_48
.LBB200_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB200_43
	jmp	.LBB200_41
.LBB200_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB200_45
	jmp	.LBB200_42
.LBB200_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB200_44
	jmp	.LBB200_47
.LBB200_43:                             # %sw.bb
	callq	configError
.LBB200_44:                             # %sw.bb82
	callq	outOfMemory
.LBB200_45:                             # %sw.bb83
	jmp	.LBB200_46
.LBB200_46:                             # %errhandler_io
	callq	ioError
.LBB200_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB200_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB200_39
.Lfunc_end200:
	.size	compressStream.158, .Lfunc_end200-compressStream.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.159
	.type	notAStandardFile.159,@function
notAStandardFile.159:                   # @notAStandardFile.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$824393261, -20(%rbp)   # imm = 0x31233E2D
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB201_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB201_5
.LBB201_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB201_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB201_5
.LBB201_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB201_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$824393261, -20(%rbp)   # imm = 0x31233E2D
	jne	.LBB201_7
.LBB201_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_6
.Lfunc_end201:
	.size	notAStandardFile.159, .Lfunc_end201-notAStandardFile.159
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function applySavedMetaInfoToOutputFile.160
	.type	applySavedMetaInfoToOutputFile.160,@function
applySavedMetaInfoToOutputFile.160:     # @applySavedMetaInfoToOutputFile.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$129548324, -20(%rbp)   # imm = 0x7B8C024
	movq	%rdi, -16(%rbp)
	movq	fileMetaInfo+72, %rax
	movq	%rax, -40(%rbp)
	movq	fileMetaInfo+88, %rax
	movq	%rax, -32(%rbp)
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+24, %esi
	callq	chmod
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB202_2
# %bb.1:                                # %if.then
	callq	ioError
.LBB202_2:                              # %if.end
	movq	-16(%rbp), %rdi
	leaq	-40(%rbp), %rsi
	callq	utime
	movl	%eax, -4(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB202_4
# %bb.3:                                # %if.then3
	callq	ioError
.LBB202_4:                              # %if.end4
	movq	-16(%rbp), %rdi
	movl	fileMetaInfo+28, %esi
	movl	fileMetaInfo+32, %edx
	callq	chown
	movl	%eax, -4(%rbp)
	cmpl	$129548324, -20(%rbp)   # imm = 0x7B8C024
	jne	.LBB202_6
.LBB202_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_5
.Lfunc_end202:
	.size	applySavedMetaInfoToOutputFile.160, .Lfunc_end202-applySavedMetaInfoToOutputFile.160
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.161
.LCPI203_0:
	.quad	4636737291354636288     # double 100
.LCPI203_1:
	.quad	4607182418800017408     # double 1
.LCPI203_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.161,@function
compressStream.161:                     # @compressStream.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$289003633, -76(%rbp)   # imm = 0x1139D871
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_2
# %bb.1:                                # %if.then
	jmp	.LBB203_46
.LBB203_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_4
# %bb.3:                                # %if.then3
	jmp	.LBB203_46
.LBB203_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB203_6
# %bb.5:                                # %if.then6
	jmp	.LBB203_40
.LBB203_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB203_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB203_8:                              # %if.end11
	jmp	.LBB203_9
.LBB203_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB203_11
# %bb.10:                               # %if.then14
	jmp	.LBB203_18
.LBB203_11:                             # %if.end15
                                        #   in Loop: Header=BB203_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_13
# %bb.12:                               # %if.then19
	jmp	.LBB203_46
.LBB203_13:                             # %if.end20
                                        #   in Loop: Header=BB203_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB203_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB203_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB203_15:                             # %if.end25
                                        #   in Loop: Header=BB203_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB203_17
# %bb.16:                               # %if.then28
	jmp	.LBB203_40
.LBB203_17:                             # %if.end29
                                        #   in Loop: Header=BB203_9 Depth=1
	jmp	.LBB203_9
.LBB203_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB203_20
# %bb.19:                               # %if.then32
	jmp	.LBB203_40
.LBB203_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_22
# %bb.21:                               # %if.then36
	jmp	.LBB203_46
.LBB203_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB203_24
# %bb.23:                               # %if.then41
	jmp	.LBB203_46
.LBB203_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB203_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB203_27
# %bb.26:                               # %if.then49
	jmp	.LBB203_46
.LBB203_27:                             # %if.end50
	jmp	.LBB203_28
.LBB203_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB203_30
# %bb.29:                               # %if.then54
	jmp	.LBB203_46
.LBB203_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB203_32
# %bb.31:                               # %if.then59
	jmp	.LBB203_46
.LBB203_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB203_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB203_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB203_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB203_37
.LBB203_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI203_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI203_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI203_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB203_37:                             # %if.end80
	jmp	.LBB203_38
.LBB203_38:                             # %if.end81
	cmpl	$289003633, -76(%rbp)   # imm = 0x1139D871
	jne	.LBB203_48
.LBB203_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB203_43
	jmp	.LBB203_41
.LBB203_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB203_45
	jmp	.LBB203_42
.LBB203_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB203_44
	jmp	.LBB203_47
.LBB203_43:                             # %sw.bb
	callq	configError
.LBB203_44:                             # %sw.bb82
	callq	outOfMemory
.LBB203_45:                             # %sw.bb83
	jmp	.LBB203_46
.LBB203_46:                             # %errhandler_io
	callq	ioError
.LBB203_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB203_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB203_39
.Lfunc_end203:
	.size	compressStream.161, .Lfunc_end203-compressStream.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.162
	.type	compress.162,@function
compress.162:                           # @compress.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1559808025, -60(%rbp)  # imm = 0x5CF8C819
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB204_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB204_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB204_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB204_6
	jmp	.LBB204_4
.LBB204_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB204_8
	jmp	.LBB204_5
.LBB204_5:                              # %if.end
	subl	$3, %eax
	je	.LBB204_7
	jmp	.LBB204_9
.LBB204_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB204_9
.LBB204_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB204_9
.LBB204_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB204_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB204_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB204_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB204_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB204_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB204_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB204_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB204_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB204_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB204_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB204_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB204_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB204_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_23:                             # %if.end34
                                        #   in Loop: Header=BB204_18 Depth=1
	jmp	.LBB204_24
.LBB204_24:                             # %for.inc
                                        #   in Loop: Header=BB204_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB204_18
.LBB204_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB204_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB204_30
.LBB204_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB204_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_29:                             # %if.end45
	jmp	.LBB204_30
.LBB204_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB204_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB204_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB204_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB204_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB204_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB204_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB204_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB204_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB204_41
.LBB204_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_41:                             # %if.end72
	jmp	.LBB204_42
.LBB204_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB204_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB204_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB204_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB204_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB204_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB204_51
	jmp	.LBB204_49
.LBB204_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB204_54
	jmp	.LBB204_50
.LBB204_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB204_61
	jmp	.LBB204_70
.LBB204_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB204_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_53:                             # %if.end98
	jmp	.LBB204_71
.LBB204_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB204_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB204_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB204_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB204_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_60:                             # %if.end119
	jmp	.LBB204_71
.LBB204_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB204_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB204_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB204_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB204_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB204_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB204_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB204_80
.LBB204_69:                             # %if.end146
	jmp	.LBB204_71
.LBB204_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB204_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB204_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB204_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB204_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB204_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB204_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB204_77:                             # %if.end163
	jmp	.LBB204_78
.LBB204_78:                             # %if.end164
	jmp	.LBB204_79
.LBB204_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB204_80:                             # %return
	cmpl	$1559808025, -60(%rbp)  # imm = 0x5CF8C819
	jne	.LBB204_82
.LBB204_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_81
.Lfunc_end204:
	.size	compress.162, .Lfunc_end204-compress.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.163
	.type	uInt64_toAscii.163,@function
uInt64_toAscii.163:                     # @uInt64_toAscii.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1156878883, -12(%rbp)  # imm = 0x44F49223
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB205_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB205_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB205_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB205_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB205_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB205_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB205_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_4
.LBB205_7:                              # %for.end
	cmpl	$1156878883, -12(%rbp)  # imm = 0x44F49223
	jne	.LBB205_9
.LBB205_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_8
.Lfunc_end205:
	.size	uInt64_toAscii.163, .Lfunc_end205-uInt64_toAscii.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.164
	.type	uncompress.164,@function
uncompress.164:                         # @uncompress.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1353049895, -68(%rbp)  # imm = 0x50A5E727
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB206_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB206_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB206_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB206_6
	jmp	.LBB206_4
.LBB206_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB206_14
	jmp	.LBB206_5
.LBB206_5:                              # %if.end
	subl	$3, %eax
	je	.LBB206_7
	jmp	.LBB206_15
.LBB206_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB206_15
.LBB206_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB206_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB206_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB206_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB206_11
# %bb.10:                               # %if.then6
	jmp	.LBB206_16
.LBB206_11:                             # %if.end7
                                        #   in Loop: Header=BB206_8 Depth=1
	jmp	.LBB206_12
.LBB206_12:                             # %for.inc
                                        #   in Loop: Header=BB206_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB206_8
.LBB206_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB206_15
.LBB206_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB206_15:                             # %sw.epilog
	jmp	.LBB206_16
.LBB206_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB206_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB206_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB206_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB206_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB206_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB206_29
.LBB206_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB206_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_28:                             # %if.end40
	jmp	.LBB206_29
.LBB206_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB206_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB206_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB206_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB206_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB206_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB206_38:                             # %if.end61
	jmp	.LBB206_39
.LBB206_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB206_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB206_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB206_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB206_44
.LBB206_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_44:                             # %if.end74
	jmp	.LBB206_45
.LBB206_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB206_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB206_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB206_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB206_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB206_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB206_54
	jmp	.LBB206_52
.LBB206_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB206_57
	jmp	.LBB206_53
.LBB206_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB206_62
	jmp	.LBB206_71
.LBB206_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB206_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_56:                             # %if.end100
	jmp	.LBB206_72
.LBB206_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB206_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB206_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB206_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_61:                             # %if.end114
	jmp	.LBB206_72
.LBB206_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB206_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB206_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB206_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB206_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB206_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB206_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB206_95
.LBB206_70:                             # %if.end141
	jmp	.LBB206_72
.LBB206_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB206_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB206_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB206_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB206_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB206_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB206_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB206_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB206_79:                             # %if.end161
	jmp	.LBB206_80
.LBB206_80:                             # %if.end162
	jmp	.LBB206_81
.LBB206_81:                             # %if.end163
	jmp	.LBB206_87
.LBB206_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB206_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB206_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB206_85:                             # %if.end173
	jmp	.LBB206_86
.LBB206_86:                             # %if.end174
	jmp	.LBB206_87
.LBB206_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB206_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB206_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB206_90:                             # %if.end182
	jmp	.LBB206_95
.LBB206_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB206_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB206_94
.LBB206_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB206_94:                             # %if.end190
	jmp	.LBB206_95
.LBB206_95:                             # %if.end191
	cmpl	$1353049895, -68(%rbp)  # imm = 0x50A5E727
	jne	.LBB206_97
.LBB206_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_96
.Lfunc_end206:
	.size	uncompress.164, .Lfunc_end206-uncompress.164
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.165
	.type	testStream.165,@function
testStream.165:                         # @testStream.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$26588185, -56(%rbp)    # imm = 0x195B419
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB207_2
# %bb.1:                                # %if.then
	jmp	.LBB207_38
.LBB207_2:                              # %if.end
	jmp	.LBB207_3
.LBB207_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_7 Depth 2
                                        #     Child Loop BB207_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB207_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB207_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB207_6
.LBB207_5:                              # %if.then5
	jmp	.LBB207_32
.LBB207_6:                              # %if.end6
                                        #   in Loop: Header=BB207_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB207_7:                              # %while.cond7
                                        #   Parent Loop BB207_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB207_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB207_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB207_10
# %bb.9:                                # %if.then15
	jmp	.LBB207_32
.LBB207_10:                             # %if.end16
                                        #   in Loop: Header=BB207_7 Depth=2
	jmp	.LBB207_7
.LBB207_11:                             # %while.end
                                        #   in Loop: Header=BB207_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB207_13
# %bb.12:                               # %if.then19
	jmp	.LBB207_32
.LBB207_13:                             # %if.end20
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB207_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB207_15:                             # %if.end24
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB207_16:                             # %for.cond
                                        #   Parent Loop BB207_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB207_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB207_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB207_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB207_16
.LBB207_19:                             # %for.end
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB207_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB207_21:                             # %if.end33
                                        #   in Loop: Header=BB207_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB207_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB207_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB207_24
# %bb.23:                               # %if.then39
	jmp	.LBB207_25
.LBB207_24:                             # %if.end40
                                        #   in Loop: Header=BB207_3 Depth=1
	jmp	.LBB207_3
.LBB207_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB207_27
# %bb.26:                               # %if.then44
	jmp	.LBB207_38
.LBB207_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB207_29
# %bb.28:                               # %if.then49
	jmp	.LBB207_38
.LBB207_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB207_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB207_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB207_50
.LBB207_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB207_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB207_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB207_49
# %bb.35:                               # %if.end60
	movq	.LJTI207_0(,%rax,8), %rax
	jmpq	*%rax
.LBB207_36:                             # %sw.bb
	callq	configError
.LBB207_37:                             # %sw.bb61
	jmp	.LBB207_38
.LBB207_38:                             # %errhandler_io
	callq	ioError
.LBB207_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB207_50
.LBB207_40:                             # %sw.bb64
	callq	outOfMemory
.LBB207_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB207_50
.LBB207_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB207_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB207_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB207_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB207_50
.LBB207_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB207_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB207_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB207_50
.LBB207_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB207_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$26588185, -56(%rbp)    # imm = 0x195B419
	jne	.LBB207_52
.LBB207_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_51
.Lfunc_end207:
	.size	testStream.165, .Lfunc_end207-testStream.165
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI207_0:
	.quad	.LBB207_36
	.quad	.LBB207_49
	.quad	.LBB207_41
	.quad	.LBB207_37
	.quad	.LBB207_42
	.quad	.LBB207_39
	.quad	.LBB207_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.166
	.type	snocString.166,@function
snocString.166:                         # @snocString.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1005318679, -44(%rbp)  # imm = 0x3BEBF217
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB208_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB208_6
.LBB208_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB208_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB208_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB208_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB208_3
.LBB208_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB208_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1005318679, -44(%rbp)  # imm = 0x3BEBF217
	jne	.LBB208_8
.LBB208_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_7
.Lfunc_end208:
	.size	snocString.166, .Lfunc_end208-snocString.166
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.167
	.type	snocString.167,@function
snocString.167:                         # @snocString.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1761910622, -44(%rbp)  # imm = 0x69049F5E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB209_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB209_6
.LBB209_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB209_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB209_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB209_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB209_3
.LBB209_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB209_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1761910622, -44(%rbp)  # imm = 0x69049F5E
	jne	.LBB209_8
.LBB209_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_7
.Lfunc_end209:
	.size	snocString.167, .Lfunc_end209-snocString.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.168
	.type	uInt64_toAscii.168,@function
uInt64_toAscii.168:                     # @uInt64_toAscii.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1524815992, -16(%rbp)  # imm = 0x5AE2D878
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB210_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB210_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB210_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB210_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB210_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB210_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB210_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_4
.LBB210_7:                              # %for.end
	cmpl	$1524815992, -16(%rbp)  # imm = 0x5AE2D878
	jne	.LBB210_9
.LBB210_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_8
.Lfunc_end210:
	.size	uInt64_toAscii.168, .Lfunc_end210-uInt64_toAscii.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.169
	.type	uncompress.169,@function
uncompress.169:                         # @uncompress.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$448239620, -68(%rbp)   # imm = 0x1AB79804
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB211_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB211_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB211_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB211_6
	jmp	.LBB211_4
.LBB211_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB211_14
	jmp	.LBB211_5
.LBB211_5:                              # %if.end
	subl	$3, %eax
	je	.LBB211_7
	jmp	.LBB211_15
.LBB211_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB211_15
.LBB211_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB211_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB211_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB211_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB211_11
# %bb.10:                               # %if.then6
	jmp	.LBB211_16
.LBB211_11:                             # %if.end7
                                        #   in Loop: Header=BB211_8 Depth=1
	jmp	.LBB211_12
.LBB211_12:                             # %for.inc
                                        #   in Loop: Header=BB211_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB211_8
.LBB211_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB211_15
.LBB211_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB211_15:                             # %sw.epilog
	jmp	.LBB211_16
.LBB211_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB211_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB211_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB211_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB211_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB211_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB211_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB211_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB211_29
.LBB211_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB211_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_28:                             # %if.end40
	jmp	.LBB211_29
.LBB211_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB211_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB211_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB211_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB211_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB211_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB211_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB211_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB211_38:                             # %if.end61
	jmp	.LBB211_39
.LBB211_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB211_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB211_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB211_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB211_44
.LBB211_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_44:                             # %if.end74
	jmp	.LBB211_45
.LBB211_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB211_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB211_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB211_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB211_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB211_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB211_54
	jmp	.LBB211_52
.LBB211_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB211_57
	jmp	.LBB211_53
.LBB211_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB211_62
	jmp	.LBB211_71
.LBB211_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB211_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_56:                             # %if.end100
	jmp	.LBB211_72
.LBB211_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB211_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB211_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB211_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_61:                             # %if.end114
	jmp	.LBB211_72
.LBB211_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB211_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB211_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB211_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB211_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB211_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB211_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB211_95
.LBB211_70:                             # %if.end141
	jmp	.LBB211_72
.LBB211_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB211_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB211_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB211_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB211_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB211_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB211_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB211_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB211_79:                             # %if.end161
	jmp	.LBB211_80
.LBB211_80:                             # %if.end162
	jmp	.LBB211_81
.LBB211_81:                             # %if.end163
	jmp	.LBB211_87
.LBB211_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB211_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB211_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB211_85:                             # %if.end173
	jmp	.LBB211_86
.LBB211_86:                             # %if.end174
	jmp	.LBB211_87
.LBB211_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB211_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB211_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB211_90:                             # %if.end182
	jmp	.LBB211_95
.LBB211_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB211_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB211_94
.LBB211_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB211_94:                             # %if.end190
	jmp	.LBB211_95
.LBB211_95:                             # %if.end191
	cmpl	$448239620, -68(%rbp)   # imm = 0x1AB79804
	jne	.LBB211_97
.LBB211_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_96
.Lfunc_end211:
	.size	uncompress.169, .Lfunc_end211-uncompress.169
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.170
	.type	uInt64_qrm10.170,@function
uInt64_qrm10.170:                       # @uInt64_qrm10.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$245102262, -24(%rbp)   # imm = 0xE9BF6B6
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB212_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB212_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB212_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB212_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB212_1
.LBB212_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$245102262, -24(%rbp)   # imm = 0xE9BF6B6
	jne	.LBB212_6
.LBB212_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_5
.Lfunc_end212:
	.size	uInt64_qrm10.170, .Lfunc_end212-uInt64_qrm10.170
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.171
.LCPI213_0:
	.quad	4636737291354636288     # double 100
.LCPI213_1:
	.quad	4607182418800017408     # double 1
.LCPI213_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.171,@function
compressStream.171:                     # @compressStream.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$2107109978, -76(%rbp)  # imm = 0x7D97F25A
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB213_2
# %bb.1:                                # %if.then
	jmp	.LBB213_46
.LBB213_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB213_4
# %bb.3:                                # %if.then3
	jmp	.LBB213_46
.LBB213_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB213_6
# %bb.5:                                # %if.then6
	jmp	.LBB213_40
.LBB213_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB213_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB213_8:                              # %if.end11
	jmp	.LBB213_9
.LBB213_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB213_11
# %bb.10:                               # %if.then14
	jmp	.LBB213_18
.LBB213_11:                             # %if.end15
                                        #   in Loop: Header=BB213_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB213_13
# %bb.12:                               # %if.then19
	jmp	.LBB213_46
.LBB213_13:                             # %if.end20
                                        #   in Loop: Header=BB213_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB213_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB213_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB213_15:                             # %if.end25
                                        #   in Loop: Header=BB213_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB213_17
# %bb.16:                               # %if.then28
	jmp	.LBB213_40
.LBB213_17:                             # %if.end29
                                        #   in Loop: Header=BB213_9 Depth=1
	jmp	.LBB213_9
.LBB213_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB213_20
# %bb.19:                               # %if.then32
	jmp	.LBB213_40
.LBB213_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB213_22
# %bb.21:                               # %if.then36
	jmp	.LBB213_46
.LBB213_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB213_24
# %bb.23:                               # %if.then41
	jmp	.LBB213_46
.LBB213_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB213_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB213_27
# %bb.26:                               # %if.then49
	jmp	.LBB213_46
.LBB213_27:                             # %if.end50
	jmp	.LBB213_28
.LBB213_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB213_30
# %bb.29:                               # %if.then54
	jmp	.LBB213_46
.LBB213_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB213_32
# %bb.31:                               # %if.then59
	jmp	.LBB213_46
.LBB213_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB213_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB213_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB213_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB213_37
.LBB213_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI213_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI213_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI213_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB213_37:                             # %if.end80
	jmp	.LBB213_38
.LBB213_38:                             # %if.end81
	cmpl	$2107109978, -76(%rbp)  # imm = 0x7D97F25A
	jne	.LBB213_48
.LBB213_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB213_43
	jmp	.LBB213_41
.LBB213_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB213_45
	jmp	.LBB213_42
.LBB213_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB213_44
	jmp	.LBB213_47
.LBB213_43:                             # %sw.bb
	callq	configError
.LBB213_44:                             # %sw.bb82
	callq	outOfMemory
.LBB213_45:                             # %sw.bb83
	jmp	.LBB213_46
.LBB213_46:                             # %errhandler_io
	callq	ioError
.LBB213_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB213_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB213_39
.Lfunc_end213:
	.size	compressStream.171, .Lfunc_end213-compressStream.171
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.172
	.type	uInt64_qrm10.172,@function
uInt64_qrm10.172:                       # @uInt64_qrm10.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1983785634, -24(%rbp)  # imm = 0x763E2AA2
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB214_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB214_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB214_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB214_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_1
.LBB214_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1983785634, -24(%rbp)  # imm = 0x763E2AA2
	jne	.LBB214_6
.LBB214_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_5
.Lfunc_end214:
	.size	uInt64_qrm10.172, .Lfunc_end214-uInt64_qrm10.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.173
	.type	uInt64_qrm10.173,@function
uInt64_qrm10.173:                       # @uInt64_qrm10.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$398692744, -24(%rbp)   # imm = 0x17C39188
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB215_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB215_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB215_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB215_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB215_1
.LBB215_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$398692744, -24(%rbp)   # imm = 0x17C39188
	jne	.LBB215_6
.LBB215_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_5
.Lfunc_end215:
	.size	uInt64_qrm10.173, .Lfunc_end215-uInt64_qrm10.173
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.174
	.type	countHardLinks.174,@function
countHardLinks.174:                     # @countHardLinks.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1676206866, -16(%rbp)  # imm = 0x63E8E312
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB216_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB216_3
.LBB216_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB216_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1676206866, -16(%rbp)  # imm = 0x63E8E312
	jne	.LBB216_5
.LBB216_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_4
.Lfunc_end216:
	.size	countHardLinks.174, .Lfunc_end216-countHardLinks.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.175
	.type	hasSuffix.175,@function
hasSuffix.175:                          # @hasSuffix.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2018798114, -24(%rbp)  # imm = 0x78546A22
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB217_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB217_5
.LBB217_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB217_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB217_5
.LBB217_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB217_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2018798114, -24(%rbp)  # imm = 0x78546A22
	jne	.LBB217_7
.LBB217_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_6
.Lfunc_end217:
	.size	hasSuffix.175, .Lfunc_end217-hasSuffix.175
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.176
	.type	notAStandardFile.176,@function
notAStandardFile.176:                   # @notAStandardFile.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1507789777, -16(%rbp)  # imm = 0x59DF0BD1
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB218_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB218_5
.LBB218_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB218_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB218_5
.LBB218_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB218_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1507789777, -16(%rbp)  # imm = 0x59DF0BD1
	jne	.LBB218_7
.LBB218_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_6
.Lfunc_end218:
	.size	notAStandardFile.176, .Lfunc_end218-notAStandardFile.176
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.177
.LCPI219_0:
	.quad	4636737291354636288     # double 100
.LCPI219_1:
	.quad	4607182418800017408     # double 1
.LCPI219_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.177,@function
compressStream.177:                     # @compressStream.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$72512613, -76(%rbp)    # imm = 0x4527465
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_2
# %bb.1:                                # %if.then
	jmp	.LBB219_46
.LBB219_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_4
# %bb.3:                                # %if.then3
	jmp	.LBB219_46
.LBB219_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB219_6
# %bb.5:                                # %if.then6
	jmp	.LBB219_40
.LBB219_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB219_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB219_8:                              # %if.end11
	jmp	.LBB219_9
.LBB219_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB219_11
# %bb.10:                               # %if.then14
	jmp	.LBB219_18
.LBB219_11:                             # %if.end15
                                        #   in Loop: Header=BB219_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_13
# %bb.12:                               # %if.then19
	jmp	.LBB219_46
.LBB219_13:                             # %if.end20
                                        #   in Loop: Header=BB219_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB219_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB219_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB219_15:                             # %if.end25
                                        #   in Loop: Header=BB219_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB219_17
# %bb.16:                               # %if.then28
	jmp	.LBB219_40
.LBB219_17:                             # %if.end29
                                        #   in Loop: Header=BB219_9 Depth=1
	jmp	.LBB219_9
.LBB219_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB219_20
# %bb.19:                               # %if.then32
	jmp	.LBB219_40
.LBB219_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_22
# %bb.21:                               # %if.then36
	jmp	.LBB219_46
.LBB219_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_24
# %bb.23:                               # %if.then41
	jmp	.LBB219_46
.LBB219_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB219_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_27
# %bb.26:                               # %if.then49
	jmp	.LBB219_46
.LBB219_27:                             # %if.end50
	jmp	.LBB219_28
.LBB219_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB219_30
# %bb.29:                               # %if.then54
	jmp	.LBB219_46
.LBB219_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB219_32
# %bb.31:                               # %if.then59
	jmp	.LBB219_46
.LBB219_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB219_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB219_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB219_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB219_37
.LBB219_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI219_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI219_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI219_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-64(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-72(%rbp), %xmm0, %xmm0
	vmulsd	-72(%rbp), %xmm1, %xmm1
	vdivsd	-64(%rbp), %xmm1, %xmm1
	vmovsd	-72(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-64(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB219_37:                             # %if.end80
	jmp	.LBB219_38
.LBB219_38:                             # %if.end81
	cmpl	$72512613, -76(%rbp)    # imm = 0x4527465
	jne	.LBB219_48
.LBB219_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB219_43
	jmp	.LBB219_41
.LBB219_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB219_45
	jmp	.LBB219_42
.LBB219_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB219_44
	jmp	.LBB219_47
.LBB219_43:                             # %sw.bb
	callq	configError
.LBB219_44:                             # %sw.bb82
	callq	outOfMemory
.LBB219_45:                             # %sw.bb83
	jmp	.LBB219_46
.LBB219_46:                             # %errhandler_io
	callq	ioError
.LBB219_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB219_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB219_39
.Lfunc_end219:
	.size	compressStream.177, .Lfunc_end219-compressStream.177
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.178 # -- Begin function fopen_output_safely.178
	.p2align	4, 0x90
	.type	fopen_output_safely.178,@function
fopen_output_safely.178:                # @fopen_output_safely.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1309044428, -16(%rbp)  # imm = 0x4E066ECC
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB220_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB220_5
.LBB220_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB220_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB220_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB220_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$1309044428, -16(%rbp)  # imm = 0x4E066ECC
	jne	.LBB220_7
.LBB220_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_6
.Lfunc_end220:
	.size	fopen_output_safely.178, .Lfunc_end220-fopen_output_safely.178
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.179
	.type	addFlagsFromEnvVar.179,@function
addFlagsFromEnvVar.179:                 # @addFlagsFromEnvVar.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1866292188, -24(%rbp)  # imm = 0x6F3D5BDC
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB221_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB221_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_5 Depth 2
                                        #     Child Loop BB221_8 Depth 2
                                        #     Child Loop BB221_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB221_4
# %bb.3:                                # %if.then3
	jmp	.LBB221_21
.LBB221_4:                              # %if.end
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB221_5:                              # %while.cond4
                                        #   Parent Loop BB221_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB221_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB221_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB221_5
.LBB221_7:                              # %while.end
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_8
.LBB221_8:                              # %while.cond12
                                        #   Parent Loop BB221_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB221_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB221_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB221_10:                             # %land.end
                                        #   in Loop: Header=BB221_8 Depth=2
	testb	$1, %al
	jne	.LBB221_11
	jmp	.LBB221_12
.LBB221_11:                             # %while.body27
                                        #   in Loop: Header=BB221_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_8
.LBB221_12:                             # %while.end28
                                        #   in Loop: Header=BB221_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB221_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB221_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB221_15:                             # %if.end35
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	$0, -8(%rbp)
.LBB221_16:                             # %for.cond
                                        #   Parent Loop BB221_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB221_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB221_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB221_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_16
.LBB221_19:                             # %for.end
                                        #   in Loop: Header=BB221_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB221_20:                             # %if.end46
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_2
.LBB221_21:                             # %while.end47
	jmp	.LBB221_22
.LBB221_22:                             # %if.end48
	cmpl	$1866292188, -24(%rbp)  # imm = 0x6F3D5BDC
	jne	.LBB221_24
.LBB221_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_23
.Lfunc_end221:
	.size	addFlagsFromEnvVar.179, .Lfunc_end221-addFlagsFromEnvVar.179
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.180
	.type	uncompress.180,@function
uncompress.180:                         # @uncompress.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1430286402, -64(%rbp)  # imm = 0x55407042
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB222_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB222_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB222_3:                              # %if.end
	movb	$0, -17(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB222_6
	jmp	.LBB222_4
.LBB222_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB222_14
	jmp	.LBB222_5
.LBB222_5:                              # %if.end
	subl	$3, %eax
	je	.LBB222_7
	jmp	.LBB222_15
.LBB222_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB222_15
.LBB222_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB222_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB222_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB222_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB222_11
# %bb.10:                               # %if.then6
	jmp	.LBB222_16
.LBB222_11:                             # %if.end7
                                        #   in Loop: Header=BB222_8 Depth=1
	jmp	.LBB222_12
.LBB222_12:                             # %for.inc
                                        #   in Loop: Header=BB222_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB222_8
.LBB222_13:                             # %for.end
	movb	$1, -17(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB222_15
.LBB222_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB222_15:                             # %sw.epilog
	jmp	.LBB222_16
.LBB222_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB222_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB222_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB222_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB222_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB222_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB222_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB222_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB222_29
.LBB222_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB222_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_28:                             # %if.end40
	jmp	.LBB222_29
.LBB222_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB222_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB222_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB222_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB222_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB222_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_35:                             # %if.end55
	cmpb	$0, -17(%rbp)
	je	.LBB222_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB222_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB222_38:                             # %if.end61
	jmp	.LBB222_39
.LBB222_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB222_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB222_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB222_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB222_44
.LBB222_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_44:                             # %if.end74
	jmp	.LBB222_45
.LBB222_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB222_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB222_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB222_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB222_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB222_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB222_54
	jmp	.LBB222_52
.LBB222_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB222_57
	jmp	.LBB222_53
.LBB222_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB222_62
	jmp	.LBB222_71
.LBB222_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB222_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_56:                             # %if.end100
	jmp	.LBB222_72
.LBB222_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB222_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB222_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB222_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_61:                             # %if.end114
	jmp	.LBB222_72
.LBB222_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB222_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB222_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB222_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB222_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB222_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB222_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB222_95
.LBB222_70:                             # %if.end141
	jmp	.LBB222_72
.LBB222_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB222_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB222_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB222_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -18(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -18(%rbp)
	je	.LBB222_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB222_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB222_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB222_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB222_79:                             # %if.end161
	jmp	.LBB222_80
.LBB222_80:                             # %if.end162
	jmp	.LBB222_81
.LBB222_81:                             # %if.end163
	jmp	.LBB222_87
.LBB222_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB222_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB222_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB222_85:                             # %if.end173
	jmp	.LBB222_86
.LBB222_86:                             # %if.end174
	jmp	.LBB222_87
.LBB222_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -18(%rbp)
	je	.LBB222_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB222_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB222_90:                             # %if.end182
	jmp	.LBB222_95
.LBB222_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB222_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB222_94
.LBB222_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB222_94:                             # %if.end190
	jmp	.LBB222_95
.LBB222_95:                             # %if.end191
	cmpl	$1430286402, -64(%rbp)  # imm = 0x55407042
	jne	.LBB222_97
.LBB222_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_96
.Lfunc_end222:
	.size	uncompress.180, .Lfunc_end222-uncompress.180
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.181
	.type	uncompress.181,@function
uncompress.181:                         # @uncompress.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1378749395, -64(%rbp)  # imm = 0x522E0BD3
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB223_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB223_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB223_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB223_6
	jmp	.LBB223_4
.LBB223_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB223_14
	jmp	.LBB223_5
.LBB223_5:                              # %if.end
	subl	$3, %eax
	je	.LBB223_7
	jmp	.LBB223_15
.LBB223_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB223_15
.LBB223_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB223_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB223_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB223_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB223_11
# %bb.10:                               # %if.then6
	jmp	.LBB223_16
.LBB223_11:                             # %if.end7
                                        #   in Loop: Header=BB223_8 Depth=1
	jmp	.LBB223_12
.LBB223_12:                             # %for.inc
                                        #   in Loop: Header=BB223_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB223_8
.LBB223_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB223_15
.LBB223_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB223_15:                             # %sw.epilog
	jmp	.LBB223_16
.LBB223_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB223_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB223_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB223_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB223_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB223_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB223_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB223_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB223_29
.LBB223_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB223_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_28:                             # %if.end40
	jmp	.LBB223_29
.LBB223_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB223_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB223_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB223_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB223_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB223_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB223_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB223_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB223_38:                             # %if.end61
	jmp	.LBB223_39
.LBB223_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB223_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB223_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB223_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB223_44
.LBB223_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_44:                             # %if.end74
	jmp	.LBB223_45
.LBB223_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB223_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB223_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB223_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB223_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB223_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB223_54
	jmp	.LBB223_52
.LBB223_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB223_57
	jmp	.LBB223_53
.LBB223_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB223_62
	jmp	.LBB223_71
.LBB223_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB223_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_56:                             # %if.end100
	jmp	.LBB223_72
.LBB223_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB223_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB223_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB223_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_61:                             # %if.end114
	jmp	.LBB223_72
.LBB223_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB223_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB223_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB223_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB223_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB223_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB223_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB223_95
.LBB223_70:                             # %if.end141
	jmp	.LBB223_72
.LBB223_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB223_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB223_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB223_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB223_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB223_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB223_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB223_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB223_79:                             # %if.end161
	jmp	.LBB223_80
.LBB223_80:                             # %if.end162
	jmp	.LBB223_81
.LBB223_81:                             # %if.end163
	jmp	.LBB223_87
.LBB223_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB223_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB223_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB223_85:                             # %if.end173
	jmp	.LBB223_86
.LBB223_86:                             # %if.end174
	jmp	.LBB223_87
.LBB223_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB223_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB223_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB223_90:                             # %if.end182
	jmp	.LBB223_95
.LBB223_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB223_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB223_94
.LBB223_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB223_94:                             # %if.end190
	jmp	.LBB223_95
.LBB223_95:                             # %if.end191
	cmpl	$1378749395, -64(%rbp)  # imm = 0x522E0BD3
	jne	.LBB223_97
.LBB223_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_96
.Lfunc_end223:
	.size	uncompress.181, .Lfunc_end223-uncompress.181
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.182
	.type	countHardLinks.182,@function
countHardLinks.182:                     # @countHardLinks.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$951939484, -20(%rbp)   # imm = 0x38BD719C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB224_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB224_3
.LBB224_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB224_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$951939484, -20(%rbp)   # imm = 0x38BD719C
	jne	.LBB224_5
.LBB224_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_4
.Lfunc_end224:
	.size	countHardLinks.182, .Lfunc_end224-countHardLinks.182
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.183
	.type	mapSuffix.183,@function
mapSuffix.183:                          # @mapSuffix.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1671565979, -36(%rbp)  # imm = 0x63A2129B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB225_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB225_3
.LBB225_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB225_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1671565979, -36(%rbp)  # imm = 0x63A2129B
	jne	.LBB225_5
.LBB225_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_4
.Lfunc_end225:
	.size	mapSuffix.183, .Lfunc_end225-mapSuffix.183
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.184
	.type	uncompress.184,@function
uncompress.184:                         # @uncompress.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1662096434, -64(%rbp)  # imm = 0x63119432
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB226_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB226_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB226_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB226_6
	jmp	.LBB226_4
.LBB226_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB226_14
	jmp	.LBB226_5
.LBB226_5:                              # %if.end
	subl	$3, %eax
	je	.LBB226_7
	jmp	.LBB226_15
.LBB226_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB226_15
.LBB226_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB226_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB226_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB226_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB226_11
# %bb.10:                               # %if.then6
	jmp	.LBB226_16
.LBB226_11:                             # %if.end7
                                        #   in Loop: Header=BB226_8 Depth=1
	jmp	.LBB226_12
.LBB226_12:                             # %for.inc
                                        #   in Loop: Header=BB226_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB226_8
.LBB226_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB226_15
.LBB226_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB226_15:                             # %sw.epilog
	jmp	.LBB226_16
.LBB226_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB226_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB226_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB226_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB226_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB226_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB226_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB226_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB226_29
.LBB226_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB226_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_28:                             # %if.end40
	jmp	.LBB226_29
.LBB226_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB226_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB226_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB226_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB226_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB226_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB226_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB226_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB226_38:                             # %if.end61
	jmp	.LBB226_39
.LBB226_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB226_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB226_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB226_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB226_44
.LBB226_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_44:                             # %if.end74
	jmp	.LBB226_45
.LBB226_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB226_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB226_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB226_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB226_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB226_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB226_54
	jmp	.LBB226_52
.LBB226_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB226_57
	jmp	.LBB226_53
.LBB226_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB226_62
	jmp	.LBB226_71
.LBB226_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB226_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_56:                             # %if.end100
	jmp	.LBB226_72
.LBB226_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB226_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB226_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB226_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_61:                             # %if.end114
	jmp	.LBB226_72
.LBB226_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB226_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB226_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB226_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB226_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB226_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB226_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB226_95
.LBB226_70:                             # %if.end141
	jmp	.LBB226_72
.LBB226_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB226_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB226_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB226_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB226_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB226_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB226_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB226_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB226_79:                             # %if.end161
	jmp	.LBB226_80
.LBB226_80:                             # %if.end162
	jmp	.LBB226_81
.LBB226_81:                             # %if.end163
	jmp	.LBB226_87
.LBB226_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB226_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB226_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB226_85:                             # %if.end173
	jmp	.LBB226_86
.LBB226_86:                             # %if.end174
	jmp	.LBB226_87
.LBB226_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB226_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB226_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB226_90:                             # %if.end182
	jmp	.LBB226_95
.LBB226_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB226_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB226_94
.LBB226_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB226_94:                             # %if.end190
	jmp	.LBB226_95
.LBB226_95:                             # %if.end191
	cmpl	$1662096434, -64(%rbp)  # imm = 0x63119432
	jne	.LBB226_97
.LBB226_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_96
.Lfunc_end226:
	.size	uncompress.184, .Lfunc_end226-uncompress.184
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.185
	.type	hasSuffix.185,@function
hasSuffix.185:                          # @hasSuffix.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1504357020, -24(%rbp)  # imm = 0x59AAAA9C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB227_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB227_5
.LBB227_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB227_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB227_5
.LBB227_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB227_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1504357020, -24(%rbp)  # imm = 0x59AAAA9C
	jne	.LBB227_7
.LBB227_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_6
.Lfunc_end227:
	.size	hasSuffix.185, .Lfunc_end227-hasSuffix.185
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.186
	.type	compress.186,@function
compress.186:                           # @compress.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2064831816, -60(%rbp)  # imm = 0x7B12D548
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB228_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB228_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB228_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB228_6
	jmp	.LBB228_4
.LBB228_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB228_8
	jmp	.LBB228_5
.LBB228_5:                              # %if.end
	subl	$3, %eax
	je	.LBB228_7
	jmp	.LBB228_9
.LBB228_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB228_9
.LBB228_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB228_9
.LBB228_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB228_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB228_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB228_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB228_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB228_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB228_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB228_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB228_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB228_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB228_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB228_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB228_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB228_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_23:                             # %if.end34
                                        #   in Loop: Header=BB228_18 Depth=1
	jmp	.LBB228_24
.LBB228_24:                             # %for.inc
                                        #   in Loop: Header=BB228_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB228_18
.LBB228_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB228_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB228_30
.LBB228_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB228_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_29:                             # %if.end45
	jmp	.LBB228_30
.LBB228_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB228_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB228_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB228_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB228_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB228_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB228_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB228_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB228_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB228_41
.LBB228_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_41:                             # %if.end72
	jmp	.LBB228_42
.LBB228_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB228_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB228_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB228_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB228_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB228_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB228_51
	jmp	.LBB228_49
.LBB228_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB228_54
	jmp	.LBB228_50
.LBB228_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB228_61
	jmp	.LBB228_70
.LBB228_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB228_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_53:                             # %if.end98
	jmp	.LBB228_71
.LBB228_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB228_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB228_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB228_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB228_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_60:                             # %if.end119
	jmp	.LBB228_71
.LBB228_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB228_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB228_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB228_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB228_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB228_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB228_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB228_80
.LBB228_69:                             # %if.end146
	jmp	.LBB228_71
.LBB228_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB228_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB228_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB228_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB228_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB228_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB228_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB228_77:                             # %if.end163
	jmp	.LBB228_78
.LBB228_78:                             # %if.end164
	jmp	.LBB228_79
.LBB228_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB228_80:                             # %return
	cmpl	$2064831816, -60(%rbp)  # imm = 0x7B12D548
	jne	.LBB228_82
.LBB228_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_81
.Lfunc_end228:
	.size	compress.186, .Lfunc_end228-compress.186
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.187
	.type	addFlagsFromEnvVar.187,@function
addFlagsFromEnvVar.187:                 # @addFlagsFromEnvVar.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1678917306, -24(%rbp)  # imm = 0x64123EBA
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB229_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB229_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_5 Depth 2
                                        #     Child Loop BB229_8 Depth 2
                                        #     Child Loop BB229_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB229_4
# %bb.3:                                # %if.then3
	jmp	.LBB229_21
.LBB229_4:                              # %if.end
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB229_5:                              # %while.cond4
                                        #   Parent Loop BB229_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB229_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB229_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB229_5
.LBB229_7:                              # %while.end
                                        #   in Loop: Header=BB229_2 Depth=1
	jmp	.LBB229_8
.LBB229_8:                              # %while.cond12
                                        #   Parent Loop BB229_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB229_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB229_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB229_10:                             # %land.end
                                        #   in Loop: Header=BB229_8 Depth=2
	testb	$1, %al
	jne	.LBB229_11
	jmp	.LBB229_12
.LBB229_11:                             # %while.body27
                                        #   in Loop: Header=BB229_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB229_8
.LBB229_12:                             # %while.end28
                                        #   in Loop: Header=BB229_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB229_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB229_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB229_15:                             # %if.end35
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	$0, -8(%rbp)
.LBB229_16:                             # %for.cond
                                        #   Parent Loop BB229_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB229_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB229_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB229_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB229_16
.LBB229_19:                             # %for.end
                                        #   in Loop: Header=BB229_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB229_20:                             # %if.end46
                                        #   in Loop: Header=BB229_2 Depth=1
	jmp	.LBB229_2
.LBB229_21:                             # %while.end47
	jmp	.LBB229_22
.LBB229_22:                             # %if.end48
	cmpl	$1678917306, -24(%rbp)  # imm = 0x64123EBA
	jne	.LBB229_24
.LBB229_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_23
.Lfunc_end229:
	.size	addFlagsFromEnvVar.187, .Lfunc_end229-addFlagsFromEnvVar.187
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.188
	.type	testStream.188,@function
testStream.188:                         # @testStream.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$610657128, -56(%rbp)   # imm = 0x2465E368
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_2
# %bb.1:                                # %if.then
	jmp	.LBB230_38
.LBB230_2:                              # %if.end
	jmp	.LBB230_3
.LBB230_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_7 Depth 2
                                        #     Child Loop BB230_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB230_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB230_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB230_6
.LBB230_5:                              # %if.then5
	jmp	.LBB230_32
.LBB230_6:                              # %if.end6
                                        #   in Loop: Header=BB230_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB230_7:                              # %while.cond7
                                        #   Parent Loop BB230_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB230_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB230_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB230_10
# %bb.9:                                # %if.then15
	jmp	.LBB230_32
.LBB230_10:                             # %if.end16
                                        #   in Loop: Header=BB230_7 Depth=2
	jmp	.LBB230_7
.LBB230_11:                             # %while.end
                                        #   in Loop: Header=BB230_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB230_13
# %bb.12:                               # %if.then19
	jmp	.LBB230_32
.LBB230_13:                             # %if.end20
                                        #   in Loop: Header=BB230_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB230_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB230_15:                             # %if.end24
                                        #   in Loop: Header=BB230_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB230_16:                             # %for.cond
                                        #   Parent Loop BB230_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB230_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB230_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB230_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB230_16
.LBB230_19:                             # %for.end
                                        #   in Loop: Header=BB230_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB230_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB230_21:                             # %if.end33
                                        #   in Loop: Header=BB230_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB230_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB230_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB230_24
# %bb.23:                               # %if.then39
	jmp	.LBB230_25
.LBB230_24:                             # %if.end40
                                        #   in Loop: Header=BB230_3 Depth=1
	jmp	.LBB230_3
.LBB230_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB230_27
# %bb.26:                               # %if.then44
	jmp	.LBB230_38
.LBB230_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB230_29
# %bb.28:                               # %if.then49
	jmp	.LBB230_38
.LBB230_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB230_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB230_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB230_50
.LBB230_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB230_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB230_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB230_49
# %bb.35:                               # %if.end60
	movq	.LJTI230_0(,%rax,8), %rax
	jmpq	*%rax
.LBB230_36:                             # %sw.bb
	callq	configError
.LBB230_37:                             # %sw.bb61
	jmp	.LBB230_38
.LBB230_38:                             # %errhandler_io
	callq	ioError
.LBB230_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB230_50
.LBB230_40:                             # %sw.bb64
	callq	outOfMemory
.LBB230_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB230_50
.LBB230_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB230_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB230_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB230_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB230_50
.LBB230_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB230_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB230_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB230_50
.LBB230_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB230_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$610657128, -56(%rbp)   # imm = 0x2465E368
	jne	.LBB230_52
.LBB230_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_51
.Lfunc_end230:
	.size	testStream.188, .Lfunc_end230-testStream.188
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI230_0:
	.quad	.LBB230_36
	.quad	.LBB230_49
	.quad	.LBB230_41
	.quad	.LBB230_37
	.quad	.LBB230_42
	.quad	.LBB230_39
	.quad	.LBB230_40
                                        # -- End function
	.text
	.globl	fopen_output_safely.189 # -- Begin function fopen_output_safely.189
	.p2align	4, 0x90
	.type	fopen_output_safely.189,@function
fopen_output_safely.189:                # @fopen_output_safely.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$469437679, -16(%rbp)   # imm = 0x1BFB0CEF
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB231_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB231_5
.LBB231_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB231_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB231_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB231_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$469437679, -16(%rbp)   # imm = 0x1BFB0CEF
	jne	.LBB231_7
.LBB231_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_6
.Lfunc_end231:
	.size	fopen_output_safely.189, .Lfunc_end231-fopen_output_safely.189
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.190
	.type	uInt64_toAscii.190,@function
uInt64_toAscii.190:                     # @uInt64_toAscii.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2051418401, -16(%rbp)  # imm = 0x7A462921
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB232_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB232_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB232_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB232_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB232_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB232_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB232_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB232_4
.LBB232_7:                              # %for.end
	cmpl	$2051418401, -16(%rbp)  # imm = 0x7A462921
	jne	.LBB232_9
.LBB232_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_8
.Lfunc_end232:
	.size	uInt64_toAscii.190, .Lfunc_end232-uInt64_toAscii.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.191
	.type	snocString.191,@function
snocString.191:                         # @snocString.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1782261081, -44(%rbp)  # imm = 0x6A3B2559
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB233_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB233_6
.LBB233_2:                              # %if.else
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB233_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB233_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB233_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB233_3
.LBB233_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB233_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1782261081, -44(%rbp)  # imm = 0x6A3B2559
	jne	.LBB233_8
.LBB233_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_7
.Lfunc_end233:
	.size	snocString.191, .Lfunc_end233-snocString.191
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.192
	.type	testStream.192,@function
testStream.192:                         # @testStream.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$867860509, -52(%rbp)   # imm = 0x33BA801D
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB234_2
# %bb.1:                                # %if.then
	jmp	.LBB234_38
.LBB234_2:                              # %if.end
	jmp	.LBB234_3
.LBB234_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB234_7 Depth 2
                                        #     Child Loop BB234_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB234_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB234_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB234_6
.LBB234_5:                              # %if.then5
	jmp	.LBB234_32
.LBB234_6:                              # %if.end6
                                        #   in Loop: Header=BB234_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB234_7:                              # %while.cond7
                                        #   Parent Loop BB234_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB234_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB234_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB234_10
# %bb.9:                                # %if.then15
	jmp	.LBB234_32
.LBB234_10:                             # %if.end16
                                        #   in Loop: Header=BB234_7 Depth=2
	jmp	.LBB234_7
.LBB234_11:                             # %while.end
                                        #   in Loop: Header=BB234_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB234_13
# %bb.12:                               # %if.then19
	jmp	.LBB234_32
.LBB234_13:                             # %if.end20
                                        #   in Loop: Header=BB234_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB234_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB234_15:                             # %if.end24
                                        #   in Loop: Header=BB234_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB234_16:                             # %for.cond
                                        #   Parent Loop BB234_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB234_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB234_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB234_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB234_16
.LBB234_19:                             # %for.end
                                        #   in Loop: Header=BB234_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB234_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB234_21:                             # %if.end33
                                        #   in Loop: Header=BB234_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB234_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB234_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB234_24
# %bb.23:                               # %if.then39
	jmp	.LBB234_25
.LBB234_24:                             # %if.end40
                                        #   in Loop: Header=BB234_3 Depth=1
	jmp	.LBB234_3
.LBB234_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB234_27
# %bb.26:                               # %if.then44
	jmp	.LBB234_38
.LBB234_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jne	.LBB234_29
# %bb.28:                               # %if.then49
	jmp	.LBB234_38
.LBB234_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB234_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB234_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB234_50
.LBB234_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB234_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB234_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB234_49
# %bb.35:                               # %if.end60
	movq	.LJTI234_0(,%rax,8), %rax
	jmpq	*%rax
.LBB234_36:                             # %sw.bb
	callq	configError
.LBB234_37:                             # %sw.bb61
	jmp	.LBB234_38
.LBB234_38:                             # %errhandler_io
	callq	ioError
.LBB234_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB234_50
.LBB234_40:                             # %sw.bb64
	callq	outOfMemory
.LBB234_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB234_50
.LBB234_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB234_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB234_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB234_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB234_50
.LBB234_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB234_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB234_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB234_50
.LBB234_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB234_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$867860509, -52(%rbp)   # imm = 0x33BA801D
	jne	.LBB234_52
.LBB234_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_51
.Lfunc_end234:
	.size	testStream.192, .Lfunc_end234-testStream.192
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI234_0:
	.quad	.LBB234_36
	.quad	.LBB234_49
	.quad	.LBB234_41
	.quad	.LBB234_37
	.quad	.LBB234_42
	.quad	.LBB234_39
	.quad	.LBB234_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uncompress.193
	.type	uncompress.193,@function
uncompress.193:                         # @uncompress.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$815222669, -60(%rbp)   # imm = 0x30974F8D
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB235_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB235_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB235_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB235_6
	jmp	.LBB235_4
.LBB235_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB235_14
	jmp	.LBB235_5
.LBB235_5:                              # %if.end
	subl	$3, %eax
	je	.LBB235_7
	jmp	.LBB235_15
.LBB235_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB235_15
.LBB235_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB235_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB235_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB235_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB235_11
# %bb.10:                               # %if.then6
	jmp	.LBB235_16
.LBB235_11:                             # %if.end7
                                        #   in Loop: Header=BB235_8 Depth=1
	jmp	.LBB235_12
.LBB235_12:                             # %for.inc
                                        #   in Loop: Header=BB235_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB235_8
.LBB235_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB235_15
.LBB235_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB235_15:                             # %sw.epilog
	jmp	.LBB235_16
.LBB235_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB235_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB235_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB235_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB235_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB235_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB235_29
.LBB235_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB235_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_28:                             # %if.end40
	jmp	.LBB235_29
.LBB235_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB235_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB235_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB235_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB235_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB235_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB235_38:                             # %if.end61
	jmp	.LBB235_39
.LBB235_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB235_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB235_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB235_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB235_44
.LBB235_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_44:                             # %if.end74
	jmp	.LBB235_45
.LBB235_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB235_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB235_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB235_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB235_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB235_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB235_54
	jmp	.LBB235_52
.LBB235_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB235_57
	jmp	.LBB235_53
.LBB235_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB235_62
	jmp	.LBB235_71
.LBB235_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB235_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_56:                             # %if.end100
	jmp	.LBB235_72
.LBB235_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB235_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB235_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB235_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_61:                             # %if.end114
	jmp	.LBB235_72
.LBB235_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB235_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB235_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB235_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB235_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB235_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB235_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB235_95
.LBB235_70:                             # %if.end141
	jmp	.LBB235_72
.LBB235_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB235_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB235_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB235_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB235_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB235_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB235_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB235_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB235_79:                             # %if.end161
	jmp	.LBB235_80
.LBB235_80:                             # %if.end162
	jmp	.LBB235_81
.LBB235_81:                             # %if.end163
	jmp	.LBB235_87
.LBB235_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB235_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB235_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB235_85:                             # %if.end173
	jmp	.LBB235_86
.LBB235_86:                             # %if.end174
	jmp	.LBB235_87
.LBB235_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB235_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB235_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB235_90:                             # %if.end182
	jmp	.LBB235_95
.LBB235_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB235_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB235_94
.LBB235_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB235_94:                             # %if.end190
	jmp	.LBB235_95
.LBB235_95:                             # %if.end191
	cmpl	$815222669, -60(%rbp)   # imm = 0x30974F8D
	jne	.LBB235_97
.LBB235_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_96
.Lfunc_end235:
	.size	uncompress.193, .Lfunc_end235-uncompress.193
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.194
.LCPI236_0:
	.quad	4636737291354636288     # double 100
.LCPI236_1:
	.quad	4607182418800017408     # double 1
.LCPI236_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.194,@function
compressStream.194:                     # @compressStream.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$2065559721, -76(%rbp)  # imm = 0x7B1DF0A9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_2
# %bb.1:                                # %if.then
	jmp	.LBB236_46
.LBB236_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_4
# %bb.3:                                # %if.then3
	jmp	.LBB236_46
.LBB236_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB236_6
# %bb.5:                                # %if.then6
	jmp	.LBB236_40
.LBB236_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB236_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB236_8:                              # %if.end11
	jmp	.LBB236_9
.LBB236_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB236_11
# %bb.10:                               # %if.then14
	jmp	.LBB236_18
.LBB236_11:                             # %if.end15
                                        #   in Loop: Header=BB236_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_13
# %bb.12:                               # %if.then19
	jmp	.LBB236_46
.LBB236_13:                             # %if.end20
                                        #   in Loop: Header=BB236_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB236_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB236_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB236_15:                             # %if.end25
                                        #   in Loop: Header=BB236_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB236_17
# %bb.16:                               # %if.then28
	jmp	.LBB236_40
.LBB236_17:                             # %if.end29
                                        #   in Loop: Header=BB236_9 Depth=1
	jmp	.LBB236_9
.LBB236_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB236_20
# %bb.19:                               # %if.then32
	jmp	.LBB236_40
.LBB236_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_22
# %bb.21:                               # %if.then36
	jmp	.LBB236_46
.LBB236_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB236_24
# %bb.23:                               # %if.then41
	jmp	.LBB236_46
.LBB236_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB236_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB236_27
# %bb.26:                               # %if.then49
	jmp	.LBB236_46
.LBB236_27:                             # %if.end50
	jmp	.LBB236_28
.LBB236_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB236_30
# %bb.29:                               # %if.then54
	jmp	.LBB236_46
.LBB236_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB236_32
# %bb.31:                               # %if.then59
	jmp	.LBB236_46
.LBB236_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB236_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB236_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB236_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB236_37
.LBB236_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI236_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI236_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI236_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB236_37:                             # %if.end80
	jmp	.LBB236_38
.LBB236_38:                             # %if.end81
	cmpl	$2065559721, -76(%rbp)  # imm = 0x7B1DF0A9
	jne	.LBB236_48
.LBB236_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-36(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB236_43
	jmp	.LBB236_41
.LBB236_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB236_45
	jmp	.LBB236_42
.LBB236_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB236_44
	jmp	.LBB236_47
.LBB236_43:                             # %sw.bb
	callq	configError
.LBB236_44:                             # %sw.bb82
	callq	outOfMemory
.LBB236_45:                             # %sw.bb83
	jmp	.LBB236_46
.LBB236_46:                             # %errhandler_io
	callq	ioError
.LBB236_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB236_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB236_39
.Lfunc_end236:
	.size	compressStream.194, .Lfunc_end236-compressStream.194
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.195
	.type	hasSuffix.195,@function
hasSuffix.195:                          # @hasSuffix.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$170291814, -24(%rbp)   # imm = 0xA267266
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB237_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB237_5
.LBB237_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB237_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB237_5
.LBB237_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB237_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$170291814, -24(%rbp)   # imm = 0xA267266
	jne	.LBB237_7
.LBB237_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_6
.Lfunc_end237:
	.size	hasSuffix.195, .Lfunc_end237-hasSuffix.195
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.196
	.type	uInt64_toAscii.196,@function
uInt64_toAscii.196:                     # @uInt64_toAscii.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1287471508, -16(%rbp)  # imm = 0x4CBD4194
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB238_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB238_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB238_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB238_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB238_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB238_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB238_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB238_4
.LBB238_7:                              # %for.end
	cmpl	$1287471508, -16(%rbp)  # imm = 0x4CBD4194
	jne	.LBB238_9
.LBB238_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_8
.Lfunc_end238:
	.size	uInt64_toAscii.196, .Lfunc_end238-uInt64_toAscii.196
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.197
	.type	mapSuffix.197,@function
mapSuffix.197:                          # @mapSuffix.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1097252499, -36(%rbp)  # imm = 0x4166BE93
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB239_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB239_3
.LBB239_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB239_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1097252499, -36(%rbp)  # imm = 0x4166BE93
	jne	.LBB239_5
.LBB239_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_4
.Lfunc_end239:
	.size	mapSuffix.197, .Lfunc_end239-mapSuffix.197
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.198
	.type	notAStandardFile.198,@function
notAStandardFile.198:                   # @notAStandardFile.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$2113874562, -16(%rbp)  # imm = 0x7DFF2A82
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB240_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB240_5
.LBB240_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB240_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB240_5
.LBB240_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB240_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$2113874562, -16(%rbp)  # imm = 0x7DFF2A82
	jne	.LBB240_7
.LBB240_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_6
.Lfunc_end240:
	.size	notAStandardFile.198, .Lfunc_end240-notAStandardFile.198
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompress.199
	.type	uncompress.199,@function
uncompress.199:                         # @uncompress.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$208, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$457753852, -68(%rbp)   # imm = 0x1B48C4FC
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB241_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB241_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.79, %rdi
	callq	panic
.LBB241_3:                              # %if.end
	movb	$0, -18(%rbp)
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB241_6
	jmp	.LBB241_4
.LBB241_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB241_14
	jmp	.LBB241_5
.LBB241_5:                              # %if.end
	subl	$3, %eax
	je	.LBB241_7
	jmp	.LBB241_15
.LBB241_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB241_15
.LBB241_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movl	$0, -24(%rbp)
.LBB241_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -24(%rbp)
	jge	.LBB241_13
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB241_8 Depth=1
	movslq	-24(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movslq	-24(%rbp), %rax
	movq	unzSuffix(,%rax,8), %rdx
	movabsq	$outName, %rdi
	callq	mapSuffix
	cmpb	$0, %al
	je	.LBB241_11
# %bb.10:                               # %if.then6
	jmp	.LBB241_16
.LBB241_11:                             # %if.end7
                                        #   in Loop: Header=BB241_8 Depth=1
	jmp	.LBB241_12
.LBB241_12:                             # %for.inc
                                        #   in Loop: Header=BB241_8 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB241_8
.LBB241_13:                             # %for.end
	movb	$1, -18(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.80, %rsi
	callq	strcat
	jmp	.LBB241_15
.LBB241_14:                             # %sw.bb9
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB241_15:                             # %sw.epilog
	jmp	.LBB241_16
.LBB241_16:                             # %zzz
	cmpl	$1, srcMode
	je	.LBB241_21
# %bb.17:                               # %land.lhs.true11
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB241_21
# %bb.18:                               # %if.then14
	cmpb	$0, noisy
	je	.LBB241_20
# %bb.19:                               # %if.then16
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB241_20:                             # %if.end18
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_21:                             # %if.end19
	cmpl	$1, srcMode
	je	.LBB241_24
# %bb.22:                               # %land.lhs.true22
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB241_24
# %bb.23:                               # %if.then25
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_24:                             # %if.end29
	cmpl	$3, srcMode
	je	.LBB241_26
# %bb.25:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB241_29
.LBB241_26:                             # %if.then34
	movabsq	$inName, %rdi
	leaq	-216(%rbp), %rsi
	callq	stat
	movl	-192(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB241_28
# %bb.27:                               # %if.then38
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_28:                             # %if.end40
	jmp	.LBB241_29
.LBB241_29:                             # %if.end41
	cmpl	$3, srcMode
	jne	.LBB241_35
# %bb.30:                               # %land.lhs.true44
	cmpb	$0, forceOverwrite
	jne	.LBB241_35
# %bb.31:                               # %land.lhs.true46
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB241_35
# %bb.32:                               # %if.then50
	cmpb	$0, noisy
	je	.LBB241_34
# %bb.33:                               # %if.then52
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB241_34:                             # %if.end54
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_35:                             # %if.end55
	cmpb	$0, -18(%rbp)
	je	.LBB241_39
# %bb.36:                               # %if.then57
	cmpb	$0, noisy
	je	.LBB241_38
# %bb.37:                               # %if.then59
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.81, %rsi
	movabsq	$inName, %rcx
	movabsq	$outName, %r8
	movb	$0, %al
	callq	fprintf
.LBB241_38:                             # %if.end61
	jmp	.LBB241_39
.LBB241_39:                             # %if.end62
	cmpl	$3, srcMode
	jne	.LBB241_45
# %bb.40:                               # %land.lhs.true65
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB241_45
# %bb.41:                               # %if.then69
	cmpb	$0, forceOverwrite
	je	.LBB241_43
# %bb.42:                               # %if.then71
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB241_44
.LBB241_43:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_44:                             # %if.end74
	jmp	.LBB241_45
.LBB241_45:                             # %if.end75
	cmpl	$3, srcMode
	jne	.LBB241_49
# %bb.46:                               # %land.lhs.true78
	cmpb	$0, forceOverwrite
	jne	.LBB241_49
# %bb.47:                               # %land.lhs.true80
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB241_49
# %bb.48:                               # %if.then84
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_49:                             # %if.end88
	cmpl	$3, srcMode
	jne	.LBB241_51
# %bb.50:                               # %if.then91
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB241_51:                             # %if.end92
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB241_54
	jmp	.LBB241_52
.LBB241_52:                             # %if.end92
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB241_57
	jmp	.LBB241_53
.LBB241_53:                             # %if.end92
	subl	$3, %eax
	je	.LBB241_62
	jmp	.LBB241_71
.LBB241_54:                             # %sw.bb93
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB241_56
# %bb.55:                               # %if.then97
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_56:                             # %if.end100
	jmp	.LBB241_72
.LBB241_57:                             # %sw.bb101
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB241_61
# %bb.58:                               # %if.then105
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB241_60
# %bb.59:                               # %if.then111
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB241_60:                             # %if.end113
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_61:                             # %if.end114
	jmp	.LBB241_72
.LBB241_62:                             # %sw.bb115
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB241_66
# %bb.63:                               # %if.then120
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB241_65
# %bb.64:                               # %if.then126
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB241_65:                             # %if.end128
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_66:                             # %if.end129
	cmpq	$0, -32(%rbp)
	jne	.LBB241_70
# %bb.67:                               # %if.then132
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB241_69
# %bb.68:                               # %if.then138
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB241_69:                             # %if.end140
	movl	$1, %edi
	callq	setExit
	jmp	.LBB241_95
.LBB241_70:                             # %if.end141
	jmp	.LBB241_72
.LBB241_71:                             # %sw.default
	movabsq	$.L.str.84, %rdi
	callq	panic
.LBB241_72:                             # %sw.epilog142
	cmpl	$1, verbosity
	jl	.LBB241_74
# %bb.73:                               # %if.then145
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB241_74:                             # %if.end148
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	uncompressStream
	movb	%al, -17(%rbp)
	movq	$0, outputHandleJustInCase
	cmpb	$0, -17(%rbp)
	je	.LBB241_82
# %bb.75:                               # %if.then151
	cmpl	$3, srcMode
	jne	.LBB241_81
# %bb.76:                               # %if.then154
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB241_80
# %bb.77:                               # %if.then156
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB241_79
# %bb.78:                               # %if.then160
	callq	ioError
.LBB241_79:                             # %if.end161
	jmp	.LBB241_80
.LBB241_80:                             # %if.end162
	jmp	.LBB241_81
.LBB241_81:                             # %if.end163
	jmp	.LBB241_87
.LBB241_82:                             # %if.else164
	movb	$1, unzFailsExist
	movb	$0, deleteOutputOnInterrupt
	cmpl	$3, srcMode
	jne	.LBB241_86
# %bb.83:                               # %if.then167
	movabsq	$outName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB241_85
# %bb.84:                               # %if.then172
	callq	ioError
.LBB241_85:                             # %if.end173
	jmp	.LBB241_86
.LBB241_86:                             # %if.end174
	jmp	.LBB241_87
.LBB241_87:                             # %if.end175
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, -17(%rbp)
	je	.LBB241_91
# %bb.88:                               # %if.then177
	cmpl	$1, verbosity
	jl	.LBB241_90
# %bb.89:                               # %if.then180
	movq	stderr, %rdi
	movabsq	$.L.str.85, %rsi
	movb	$0, %al
	callq	fprintf
.LBB241_90:                             # %if.end182
	jmp	.LBB241_95
.LBB241_91:                             # %if.else183
	movl	$2, %edi
	callq	setExit
	cmpl	$1, verbosity
	jl	.LBB241_93
# %bb.92:                               # %if.then186
	movq	stderr, %rdi
	movabsq	$.L.str.86, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB241_94
.LBB241_93:                             # %if.else188
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.87, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB241_94:                             # %if.end190
	jmp	.LBB241_95
.LBB241_95:                             # %if.end191
	cmpl	$457753852, -68(%rbp)   # imm = 0x1B48C4FC
	jne	.LBB241_97
.LBB241_96:
	addq	$208, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_97:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_96
.Lfunc_end241:
	.size	uncompress.199, .Lfunc_end241-uncompress.199
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.200
	.type	mapSuffix.200,@function
mapSuffix.200:                          # @mapSuffix.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1676350124, -36(%rbp)  # imm = 0x63EB12AC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB242_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB242_3
.LBB242_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB242_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$1676350124, -36(%rbp)  # imm = 0x63EB12AC
	jne	.LBB242_5
.LBB242_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_4
.Lfunc_end242:
	.size	mapSuffix.200, .Lfunc_end242-mapSuffix.200
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.201
.LCPI243_0:
	.quad	4607182418800017408     # double 1
.LCPI243_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.201,@function
uInt64_to_double.201:                   # @uInt64_to_double.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI243_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$235653620, -28(%rbp)   # imm = 0xE0BC9F4
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB243_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB243_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB243_1 Depth=1
	vmovsd	.LCPI243_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB243_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB243_1
.LBB243_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$235653620, -28(%rbp)   # imm = 0xE0BC9F4
	jne	.LBB243_6
.LBB243_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB243_5
.Lfunc_end243:
	.size	uInt64_to_double.201, .Lfunc_end243-uInt64_to_double.201
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.202
	.type	snocString.202,@function
snocString.202:                         # @snocString.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1178083687, -44(%rbp)  # imm = 0x46382167
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB244_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB244_6
.LBB244_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB244_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB244_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB244_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB244_3
.LBB244_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB244_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1178083687, -44(%rbp)  # imm = 0x46382167
	jne	.LBB244_8
.LBB244_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_7
.Lfunc_end244:
	.size	snocString.202, .Lfunc_end244-snocString.202
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.203
	.type	testStream.203,@function
testStream.203:                         # @testStream.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$912090369, -56(%rbp)   # imm = 0x365D6501
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB245_2
# %bb.1:                                # %if.then
	jmp	.LBB245_38
.LBB245_2:                              # %if.end
	jmp	.LBB245_3
.LBB245_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_7 Depth 2
                                        #     Child Loop BB245_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB245_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB245_6
.LBB245_5:                              # %if.then5
	jmp	.LBB245_32
.LBB245_6:                              # %if.end6
                                        #   in Loop: Header=BB245_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB245_7:                              # %while.cond7
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB245_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB245_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -76(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB245_10
# %bb.9:                                # %if.then15
	jmp	.LBB245_32
.LBB245_10:                             # %if.end16
                                        #   in Loop: Header=BB245_7 Depth=2
	jmp	.LBB245_7
.LBB245_11:                             # %while.end
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB245_13
# %bb.12:                               # %if.then19
	jmp	.LBB245_32
.LBB245_13:                             # %if.end20
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB245_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB245_15:                             # %if.end24
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB245_16:                             # %for.cond
                                        #   Parent Loop BB245_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB245_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB245_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB245_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB245_16
.LBB245_19:                             # %for.end
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB245_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB245_21:                             # %if.end33
                                        #   in Loop: Header=BB245_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB245_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB245_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB245_24
# %bb.23:                               # %if.then39
	jmp	.LBB245_25
.LBB245_24:                             # %if.end40
                                        #   in Loop: Header=BB245_3 Depth=1
	jmp	.LBB245_3
.LBB245_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB245_27
# %bb.26:                               # %if.then44
	jmp	.LBB245_38
.LBB245_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB245_29
# %bb.28:                               # %if.then49
	jmp	.LBB245_38
.LBB245_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB245_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB245_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB245_50
.LBB245_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-80(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB245_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB245_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB245_49
# %bb.35:                               # %if.end60
	movq	.LJTI245_0(,%rax,8), %rax
	jmpq	*%rax
.LBB245_36:                             # %sw.bb
	callq	configError
.LBB245_37:                             # %sw.bb61
	jmp	.LBB245_38
.LBB245_38:                             # %errhandler_io
	callq	ioError
.LBB245_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_40:                             # %sw.bb64
	callq	outOfMemory
.LBB245_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB245_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB245_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB245_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB245_50
.LBB245_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB245_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB245_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB245_50
.LBB245_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB245_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$912090369, -56(%rbp)   # imm = 0x365D6501
	jne	.LBB245_52
.LBB245_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_51
.Lfunc_end245:
	.size	testStream.203, .Lfunc_end245-testStream.203
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI245_0:
	.quad	.LBB245_36
	.quad	.LBB245_49
	.quad	.LBB245_41
	.quad	.LBB245_37
	.quad	.LBB245_42
	.quad	.LBB245_39
	.quad	.LBB245_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function testf.204
	.type	testf.204,@function
testf.204:                              # @testf.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1491510915, -44(%rbp)  # imm = 0x58E6A683
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB246_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB246_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB246_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB246_6
	jmp	.LBB246_4
.LBB246_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB246_8
	jmp	.LBB246_5
.LBB246_5:                              # %if.end
	subl	$3, %eax
	je	.LBB246_7
	jmp	.LBB246_9
.LBB246_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB246_9
.LBB246_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB246_9
.LBB246_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB246_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB246_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB246_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB246_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB246_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB246_37
.LBB246_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB246_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB246_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB246_37
.LBB246_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB246_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB246_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB246_37
.LBB246_20:                             # %if.end30
	jmp	.LBB246_21
.LBB246_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB246_23
	jmp	.LBB246_22
.LBB246_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB246_26
	jmp	.LBB246_29
.LBB246_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB246_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB246_37
.LBB246_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB246_30
.LBB246_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB246_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB246_37
.LBB246_28:                             # %if.end48
	jmp	.LBB246_30
.LBB246_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB246_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB246_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB246_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB246_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB246_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB246_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB246_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB246_37:                             # %if.end67
	cmpl	$1491510915, -44(%rbp)  # imm = 0x58E6A683
	jne	.LBB246_39
.LBB246_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_38
.Lfunc_end246:
	.size	testf.204, .Lfunc_end246-testf.204
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.205
	.type	compress.205,@function
compress.205:                           # @compress.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1447146152, -64(%rbp)  # imm = 0x5641B2A8
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB247_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB247_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB247_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB247_6
	jmp	.LBB247_4
.LBB247_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB247_8
	jmp	.LBB247_5
.LBB247_5:                              # %if.end
	subl	$3, %eax
	je	.LBB247_7
	jmp	.LBB247_9
.LBB247_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB247_9
.LBB247_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB247_9
.LBB247_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB247_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB247_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB247_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB247_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB247_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB247_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB247_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB247_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB247_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB247_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB247_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB247_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB247_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_23:                             # %if.end34
                                        #   in Loop: Header=BB247_18 Depth=1
	jmp	.LBB247_24
.LBB247_24:                             # %for.inc
                                        #   in Loop: Header=BB247_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB247_18
.LBB247_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB247_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB247_30
.LBB247_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB247_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_29:                             # %if.end45
	jmp	.LBB247_30
.LBB247_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB247_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB247_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB247_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB247_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB247_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB247_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB247_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB247_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB247_41
.LBB247_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_41:                             # %if.end72
	jmp	.LBB247_42
.LBB247_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB247_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB247_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB247_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB247_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB247_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB247_51
	jmp	.LBB247_49
.LBB247_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB247_54
	jmp	.LBB247_50
.LBB247_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB247_61
	jmp	.LBB247_70
.LBB247_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB247_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_53:                             # %if.end98
	jmp	.LBB247_71
.LBB247_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB247_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB247_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB247_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB247_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_60:                             # %if.end119
	jmp	.LBB247_71
.LBB247_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB247_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB247_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB247_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB247_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB247_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB247_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB247_80
.LBB247_69:                             # %if.end146
	jmp	.LBB247_71
.LBB247_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB247_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB247_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB247_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB247_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB247_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB247_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB247_77:                             # %if.end163
	jmp	.LBB247_78
.LBB247_78:                             # %if.end164
	jmp	.LBB247_79
.LBB247_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB247_80:                             # %return
	cmpl	$1447146152, -64(%rbp)  # imm = 0x5641B2A8
	jne	.LBB247_82
.LBB247_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_81
.Lfunc_end247:
	.size	compress.205, .Lfunc_end247-compress.205
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.206
	.type	uInt64_qrm10.206,@function
uInt64_qrm10.206:                       # @uInt64_qrm10.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$731338315, -24(%rbp)   # imm = 0x2B97564B
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB248_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB248_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB248_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB248_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_1
.LBB248_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$731338315, -24(%rbp)   # imm = 0x2B97564B
	jne	.LBB248_6
.LBB248_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_5
.Lfunc_end248:
	.size	uInt64_qrm10.206, .Lfunc_end248-uInt64_qrm10.206
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testStream.207
	.type	testStream.207,@function
testStream.207:                         # @testStream.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10088, %rsp            # imm = 0x2768
	.cfi_offset %rbx, -24
	movl	$1127716023, -56(%rbp)  # imm = 0x433794B7
	movq	%rdi, -32(%rbp)
	movq	$0, -48(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_2
# %bb.1:                                # %if.then
	jmp	.LBB249_38
.LBB249_2:                              # %if.end
	jmp	.LBB249_3
.LBB249_3:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_7 Depth 2
                                        #     Child Loop BB249_16 Depth 2
	leaq	-5088(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-24(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -48(%rbp)
	cmpq	$0, -48(%rbp)
	je	.LBB249_5
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB249_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB249_6
.LBB249_5:                              # %if.then5
	jmp	.LBB249_32
.LBB249_6:                              # %if.end6
                                        #   in Loop: Header=BB249_3 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
.LBB249_7:                              # %while.cond7
                                        #   Parent Loop BB249_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB249_11
# %bb.8:                                # %while.body10
                                        #   in Loop: Header=BB249_7 Depth=2
	leaq	-10096(%rbp), %rdx
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -80(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB249_10
# %bb.9:                                # %if.then15
	jmp	.LBB249_32
.LBB249_10:                             # %if.end16
                                        #   in Loop: Header=BB249_7 Depth=2
	jmp	.LBB249_7
.LBB249_11:                             # %while.end
                                        #   in Loop: Header=BB249_3 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB249_13
# %bb.12:                               # %if.then19
	jmp	.LBB249_32
.LBB249_13:                             # %if.end20
                                        #   in Loop: Header=BB249_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-64(%rbp), %rdx
	leaq	-24(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB249_15
# %bb.14:                               # %if.then23
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB249_15:                             # %if.end24
                                        #   in Loop: Header=BB249_3 Depth=1
	movq	-64(%rbp), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
.LBB249_16:                             # %for.cond
                                        #   Parent Loop BB249_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB249_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB249_16 Depth=2
	movq	-72(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-20(%rbp), %rcx
	movb	%al, -5088(%rbp,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB249_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB249_16
.LBB249_19:                             # %for.end
                                        #   in Loop: Header=BB249_3 Depth=1
	movq	-48(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB249_21
# %bb.20:                               # %if.then32
	movabsq	$.L.str.98, %rdi
	callq	panic
.LBB249_21:                             # %if.end33
                                        #   in Loop: Header=BB249_3 Depth=1
	cmpl	$0, -24(%rbp)
	jne	.LBB249_24
# %bb.22:                               # %land.lhs.true
                                        #   in Loop: Header=BB249_3 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB249_24
# %bb.23:                               # %if.then39
	jmp	.LBB249_25
.LBB249_24:                             # %if.end40
                                        #   in Loop: Header=BB249_3 Depth=1
	jmp	.LBB249_3
.LBB249_25:                             # %while.end41
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB249_27
# %bb.26:                               # %if.then44
	jmp	.LBB249_38
.LBB249_27:                             # %if.end45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jne	.LBB249_29
# %bb.28:                               # %if.then49
	jmp	.LBB249_38
.LBB249_29:                             # %if.end50
	cmpl	$2, verbosity
	jl	.LBB249_31
# %bb.30:                               # %if.then53
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB249_31:                             # %if.end55
	movb	$1, -9(%rbp)
	jmp	.LBB249_50
.LBB249_32:                             # %errhandler
	movq	-48(%rbp), %rsi
	leaq	-76(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, verbosity
	jne	.LBB249_34
# %bb.33:                               # %if.then58
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.99, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB249_34:                             # %if.end60
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB249_49
# %bb.35:                               # %if.end60
	movq	.LJTI249_0(,%rax,8), %rax
	jmpq	*%rax
.LBB249_36:                             # %sw.bb
	callq	configError
.LBB249_37:                             # %sw.bb61
	jmp	.LBB249_38
.LBB249_38:                             # %errhandler_io
	callq	ioError
.LBB249_39:                             # %sw.bb62
	movq	stderr, %rdi
	movabsq	$.L.str.100, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB249_50
.LBB249_40:                             # %sw.bb64
	callq	outOfMemory
.LBB249_41:                             # %sw.bb65
	movq	stderr, %rdi
	movabsq	$.L.str.101, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB249_50
.LBB249_42:                             # %sw.bb67
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB249_44
# %bb.43:                               # %if.then70
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB249_44:                             # %if.end72
	cmpl	$1, -36(%rbp)
	jne	.LBB249_46
# %bb.45:                               # %if.then75
	movq	stderr, %rdi
	movabsq	$.L.str.102, %rsi
	movb	$0, %al
	callq	fprintf
	movb	$0, -9(%rbp)
	jmp	.LBB249_50
.LBB249_46:                             # %if.else
	cmpb	$0, noisy
	je	.LBB249_48
# %bb.47:                               # %if.then78
	movq	stderr, %rdi
	movabsq	$.L.str.103, %rsi
	movb	$0, %al
	callq	fprintf
.LBB249_48:                             # %if.end80
	movb	$1, -9(%rbp)
	jmp	.LBB249_50
.LBB249_49:                             # %sw.default
	movabsq	$.L.str.104, %rdi
	callq	panic
.LBB249_50:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1127716023, -56(%rbp)  # imm = 0x433794B7
	jne	.LBB249_52
.LBB249_51:
	movzbl	%bl, %eax
	addq	$10088, %rsp            # imm = 0x2768
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_51
.Lfunc_end249:
	.size	testStream.207, .Lfunc_end249-testStream.207
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI249_0:
	.quad	.LBB249_36
	.quad	.LBB249_49
	.quad	.LBB249_41
	.quad	.LBB249_37
	.quad	.LBB249_42
	.quad	.LBB249_39
	.quad	.LBB249_40
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mapSuffix.208
	.type	mapSuffix.208,@function
mapSuffix.208:                          # @mapSuffix.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$872618047, -36(%rbp)   # imm = 0x3403183F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB250_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB250_3
.LBB250_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB250_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$872618047, -36(%rbp)   # imm = 0x3403183F
	jne	.LBB250_5
.LBB250_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_4
.Lfunc_end250:
	.size	mapSuffix.208, .Lfunc_end250-mapSuffix.208
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.209
	.type	countHardLinks.209,@function
countHardLinks.209:                     # @countHardLinks.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$777735870, -20(%rbp)   # imm = 0x2E5B4EBE
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB251_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB251_3
.LBB251_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB251_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$777735870, -20(%rbp)   # imm = 0x2E5B4EBE
	jne	.LBB251_5
.LBB251_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_4
.Lfunc_end251:
	.size	countHardLinks.209, .Lfunc_end251-countHardLinks.209
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.210
	.type	testf.210,@function
testf.210:                              # @testf.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$144985911, -44(%rbp)   # imm = 0x8A44F37
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB252_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB252_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB252_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB252_6
	jmp	.LBB252_4
.LBB252_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB252_8
	jmp	.LBB252_5
.LBB252_5:                              # %if.end
	subl	$3, %eax
	je	.LBB252_7
	jmp	.LBB252_9
.LBB252_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB252_9
.LBB252_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB252_9
.LBB252_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB252_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB252_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB252_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB252_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB252_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB252_37
.LBB252_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB252_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB252_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB252_37
.LBB252_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB252_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB252_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB252_37
.LBB252_20:                             # %if.end30
	jmp	.LBB252_21
.LBB252_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB252_23
	jmp	.LBB252_22
.LBB252_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB252_26
	jmp	.LBB252_29
.LBB252_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB252_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB252_37
.LBB252_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB252_30
.LBB252_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB252_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB252_37
.LBB252_28:                             # %if.end48
	jmp	.LBB252_30
.LBB252_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB252_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB252_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB252_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB252_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB252_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB252_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB252_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB252_37:                             # %if.end67
	cmpl	$144985911, -44(%rbp)   # imm = 0x8A44F37
	jne	.LBB252_39
.LBB252_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_38
.Lfunc_end252:
	.size	testf.210, .Lfunc_end252-testf.210
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.211
	.type	uInt64_qrm10.211,@function
uInt64_qrm10.211:                       # @uInt64_qrm10.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$727129620, -24(%rbp)   # imm = 0x2B571E14
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB253_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB253_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB253_1
.LBB253_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$727129620, -24(%rbp)   # imm = 0x2B571E14
	jne	.LBB253_6
.LBB253_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_5
.Lfunc_end253:
	.size	uInt64_qrm10.211, .Lfunc_end253-uInt64_qrm10.211
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.212
	.type	compress.212,@function
compress.212:                           # @compress.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$234982419, -60(%rbp)   # imm = 0xE018C13
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB254_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB254_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB254_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB254_6
	jmp	.LBB254_4
.LBB254_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB254_8
	jmp	.LBB254_5
.LBB254_5:                              # %if.end
	subl	$3, %eax
	je	.LBB254_7
	jmp	.LBB254_9
.LBB254_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB254_9
.LBB254_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB254_9
.LBB254_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB254_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB254_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB254_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB254_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB254_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB254_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB254_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB254_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB254_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB254_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB254_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB254_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB254_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_23:                             # %if.end34
                                        #   in Loop: Header=BB254_18 Depth=1
	jmp	.LBB254_24
.LBB254_24:                             # %for.inc
                                        #   in Loop: Header=BB254_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB254_18
.LBB254_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB254_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB254_30
.LBB254_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB254_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_29:                             # %if.end45
	jmp	.LBB254_30
.LBB254_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB254_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB254_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB254_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB254_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB254_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB254_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB254_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB254_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB254_41
.LBB254_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_41:                             # %if.end72
	jmp	.LBB254_42
.LBB254_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB254_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB254_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB254_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB254_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB254_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB254_51
	jmp	.LBB254_49
.LBB254_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB254_54
	jmp	.LBB254_50
.LBB254_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB254_61
	jmp	.LBB254_70
.LBB254_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB254_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_53:                             # %if.end98
	jmp	.LBB254_71
.LBB254_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB254_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB254_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB254_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB254_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_60:                             # %if.end119
	jmp	.LBB254_71
.LBB254_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB254_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB254_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB254_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB254_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB254_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB254_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB254_80
.LBB254_69:                             # %if.end146
	jmp	.LBB254_71
.LBB254_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB254_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB254_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB254_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB254_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB254_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB254_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB254_77:                             # %if.end163
	jmp	.LBB254_78
.LBB254_78:                             # %if.end164
	jmp	.LBB254_79
.LBB254_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB254_80:                             # %return
	cmpl	$234982419, -60(%rbp)   # imm = 0xE018C13
	jne	.LBB254_82
.LBB254_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_81
.Lfunc_end254:
	.size	compress.212, .Lfunc_end254-compress.212
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.213
	.type	compress.213,@function
compress.213:                           # @compress.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1234360897, -64(%rbp)  # imm = 0x4992DA41
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB255_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB255_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB255_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB255_6
	jmp	.LBB255_4
.LBB255_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB255_8
	jmp	.LBB255_5
.LBB255_5:                              # %if.end
	subl	$3, %eax
	je	.LBB255_7
	jmp	.LBB255_9
.LBB255_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB255_9
.LBB255_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB255_9
.LBB255_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB255_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB255_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB255_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB255_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB255_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB255_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB255_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB255_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB255_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB255_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB255_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB255_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB255_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_23:                             # %if.end34
                                        #   in Loop: Header=BB255_18 Depth=1
	jmp	.LBB255_24
.LBB255_24:                             # %for.inc
                                        #   in Loop: Header=BB255_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB255_18
.LBB255_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB255_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB255_30
.LBB255_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB255_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_29:                             # %if.end45
	jmp	.LBB255_30
.LBB255_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB255_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB255_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB255_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB255_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB255_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB255_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB255_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB255_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB255_41
.LBB255_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_41:                             # %if.end72
	jmp	.LBB255_42
.LBB255_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB255_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB255_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB255_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB255_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB255_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB255_51
	jmp	.LBB255_49
.LBB255_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB255_54
	jmp	.LBB255_50
.LBB255_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB255_61
	jmp	.LBB255_70
.LBB255_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB255_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_53:                             # %if.end98
	jmp	.LBB255_71
.LBB255_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB255_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB255_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB255_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB255_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_60:                             # %if.end119
	jmp	.LBB255_71
.LBB255_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB255_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB255_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB255_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB255_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB255_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB255_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB255_80
.LBB255_69:                             # %if.end146
	jmp	.LBB255_71
.LBB255_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB255_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB255_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB255_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB255_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB255_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB255_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB255_77:                             # %if.end163
	jmp	.LBB255_78
.LBB255_78:                             # %if.end164
	jmp	.LBB255_79
.LBB255_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB255_80:                             # %return
	cmpl	$1234360897, -64(%rbp)  # imm = 0x4992DA41
	jne	.LBB255_82
.LBB255_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_81
.Lfunc_end255:
	.size	compress.213, .Lfunc_end255-compress.213
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.214
	.type	countHardLinks.214,@function
countHardLinks.214:                     # @countHardLinks.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1088433164, -16(%rbp)  # imm = 0x40E02C0C
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB256_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB256_3
.LBB256_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB256_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1088433164, -16(%rbp)  # imm = 0x40E02C0C
	jne	.LBB256_5
.LBB256_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_4
.Lfunc_end256:
	.size	countHardLinks.214, .Lfunc_end256-countHardLinks.214
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.215 # -- Begin function fopen_output_safely.215
	.p2align	4, 0x90
	.type	fopen_output_safely.215,@function
fopen_output_safely.215:                # @fopen_output_safely.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$129678166, -16(%rbp)   # imm = 0x7BABB56
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB257_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB257_5
.LBB257_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB257_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB257_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB257_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$129678166, -16(%rbp)   # imm = 0x7BABB56
	jne	.LBB257_7
.LBB257_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_6
.Lfunc_end257:
	.size	fopen_output_safely.215, .Lfunc_end257-fopen_output_safely.215
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.216
	.type	addFlagsFromEnvVar.216,@function
addFlagsFromEnvVar.216:                 # @addFlagsFromEnvVar.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1349976717, -24(%rbp)  # imm = 0x5077028D
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB258_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB258_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB258_5 Depth 2
                                        #     Child Loop BB258_8 Depth 2
                                        #     Child Loop BB258_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB258_4
# %bb.3:                                # %if.then3
	jmp	.LBB258_21
.LBB258_4:                              # %if.end
                                        #   in Loop: Header=BB258_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB258_5:                              # %while.cond4
                                        #   Parent Loop BB258_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB258_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB258_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB258_5
.LBB258_7:                              # %while.end
                                        #   in Loop: Header=BB258_2 Depth=1
	jmp	.LBB258_8
.LBB258_8:                              # %while.cond12
                                        #   Parent Loop BB258_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB258_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB258_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB258_10:                             # %land.end
                                        #   in Loop: Header=BB258_8 Depth=2
	testb	$1, %al
	jne	.LBB258_11
	jmp	.LBB258_12
.LBB258_11:                             # %while.body27
                                        #   in Loop: Header=BB258_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB258_8
.LBB258_12:                             # %while.end28
                                        #   in Loop: Header=BB258_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB258_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB258_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB258_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB258_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB258_15:                             # %if.end35
                                        #   in Loop: Header=BB258_2 Depth=1
	movl	$0, -8(%rbp)
.LBB258_16:                             # %for.cond
                                        #   Parent Loop BB258_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB258_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB258_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB258_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB258_16
.LBB258_19:                             # %for.end
                                        #   in Loop: Header=BB258_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB258_20:                             # %if.end46
                                        #   in Loop: Header=BB258_2 Depth=1
	jmp	.LBB258_2
.LBB258_21:                             # %while.end47
	jmp	.LBB258_22
.LBB258_22:                             # %if.end48
	cmpl	$1349976717, -24(%rbp)  # imm = 0x5077028D
	jne	.LBB258_24
.LBB258_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_23
.Lfunc_end258:
	.size	addFlagsFromEnvVar.216, .Lfunc_end258-addFlagsFromEnvVar.216
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.217
	.type	countHardLinks.217,@function
countHardLinks.217:                     # @countHardLinks.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$2060182612, -16(%rbp)  # imm = 0x7ACBE454
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB259_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB259_3
.LBB259_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB259_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2060182612, -16(%rbp)  # imm = 0x7ACBE454
	jne	.LBB259_5
.LBB259_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_4
.Lfunc_end259:
	.size	countHardLinks.217, .Lfunc_end259-countHardLinks.217
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.218
	.type	uncompressStream.218,@function
uncompressStream.218:                   # @uncompressStream.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$505393462, -68(%rbp)   # imm = 0x1E1FB136
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_2
# %bb.1:                                # %if.then
	jmp	.LBB260_66
.LBB260_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_4
# %bb.3:                                # %if.then3
	jmp	.LBB260_66
.LBB260_4:                              # %if.end4
	jmp	.LBB260_5
.LBB260_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_9 Depth 2
                                        #     Child Loop BB260_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB260_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB260_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB260_8
.LBB260_7:                              # %if.then9
	jmp	.LBB260_62
.LBB260_8:                              # %if.end10
                                        #   in Loop: Header=BB260_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB260_9:                              # %while.cond11
                                        #   Parent Loop BB260_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB260_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB260_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB260_12
# %bb.11:                               # %if.then19
	jmp	.LBB260_49
.LBB260_12:                             # %if.end20
                                        #   in Loop: Header=BB260_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB260_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB260_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB260_16
.LBB260_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB260_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB260_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB260_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB260_16:                             # %if.end32
                                        #   in Loop: Header=BB260_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_18
# %bb.17:                               # %if.then35
	jmp	.LBB260_66
.LBB260_18:                             # %if.end36
                                        #   in Loop: Header=BB260_9 Depth=2
	jmp	.LBB260_9
.LBB260_19:                             # %while.end
                                        #   in Loop: Header=BB260_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB260_21
# %bb.20:                               # %if.then39
	jmp	.LBB260_62
.LBB260_21:                             # %if.end40
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB260_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB260_23:                             # %if.end44
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB260_24:                             # %for.cond
                                        #   Parent Loop BB260_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB260_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB260_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB260_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB260_24
.LBB260_27:                             # %for.end
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB260_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB260_29:                             # %if.end53
                                        #   in Loop: Header=BB260_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB260_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB260_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB260_32
# %bb.31:                               # %if.then60
	jmp	.LBB260_33
.LBB260_32:                             # %if.end61
                                        #   in Loop: Header=BB260_5 Depth=1
	jmp	.LBB260_5
.LBB260_33:                             # %while.end62
	jmp	.LBB260_34
.LBB260_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_36
# %bb.35:                               # %if.then65
	jmp	.LBB260_66
.LBB260_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB260_38
# %bb.37:                               # %if.then70
	jmp	.LBB260_66
.LBB260_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_40
# %bb.39:                               # %if.then74
	jmp	.LBB260_66
.LBB260_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB260_42
# %bb.41:                               # %if.then79
	jmp	.LBB260_66
.LBB260_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB260_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB260_45
# %bb.44:                               # %if.then87
	jmp	.LBB260_66
.LBB260_45:                             # %if.end88
	jmp	.LBB260_46
.LBB260_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB260_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB260_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB260_80
.LBB260_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB260_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB260_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB260_53
# %bb.52:                               # %if.then100
	jmp	.LBB260_60
.LBB260_53:                             # %if.end101
                                        #   in Loop: Header=BB260_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_55
# %bb.54:                               # %if.then107
	jmp	.LBB260_66
.LBB260_55:                             # %if.end108
                                        #   in Loop: Header=BB260_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB260_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB260_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB260_57:                             # %if.end115
                                        #   in Loop: Header=BB260_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB260_59
# %bb.58:                               # %if.then118
	jmp	.LBB260_66
.LBB260_59:                             # %if.end119
                                        #   in Loop: Header=BB260_51 Depth=1
	jmp	.LBB260_51
.LBB260_60:                             # %while.end120
	jmp	.LBB260_34
.LBB260_61:                             # %if.end121
	jmp	.LBB260_62
.LBB260_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB260_79
# %bb.63:                               # %errhandler
	movq	.LJTI260_0(,%rax,8), %rax
	jmpq	*%rax
.LBB260_64:                             # %sw.bb
	callq	configError
.LBB260_65:                             # %sw.bb122
	jmp	.LBB260_66
.LBB260_66:                             # %errhandler_io
	callq	ioError
.LBB260_67:                             # %sw.bb123
	callq	crcError
.LBB260_68:                             # %sw.bb124
	callq	outOfMemory
.LBB260_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB260_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB260_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB260_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB260_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB260_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB260_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB260_80
.LBB260_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB260_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB260_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB260_80
.LBB260_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB260_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$505393462, -68(%rbp)   # imm = 0x1E1FB136
	jne	.LBB260_82
.LBB260_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_81
.Lfunc_end260:
	.size	uncompressStream.218, .Lfunc_end260-uncompressStream.218
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI260_0:
	.quad	.LBB260_64
	.quad	.LBB260_79
	.quad	.LBB260_69
	.quad	.LBB260_65
	.quad	.LBB260_70
	.quad	.LBB260_67
	.quad	.LBB260_68
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.219
.LCPI261_0:
	.quad	4636737291354636288     # double 100
.LCPI261_1:
	.quad	4607182418800017408     # double 1
.LCPI261_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.219,@function
compressStream.219:                     # @compressStream.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1105896997, -76(%rbp)  # imm = 0x41EAA625
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB261_2
# %bb.1:                                # %if.then
	jmp	.LBB261_46
.LBB261_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB261_4
# %bb.3:                                # %if.then3
	jmp	.LBB261_46
.LBB261_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB261_6
# %bb.5:                                # %if.then6
	jmp	.LBB261_40
.LBB261_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB261_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB261_8:                              # %if.end11
	jmp	.LBB261_9
.LBB261_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB261_11
# %bb.10:                               # %if.then14
	jmp	.LBB261_18
.LBB261_11:                             # %if.end15
                                        #   in Loop: Header=BB261_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB261_13
# %bb.12:                               # %if.then19
	jmp	.LBB261_46
.LBB261_13:                             # %if.end20
                                        #   in Loop: Header=BB261_9 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB261_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB261_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-40(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB261_15:                             # %if.end25
                                        #   in Loop: Header=BB261_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB261_17
# %bb.16:                               # %if.then28
	jmp	.LBB261_40
.LBB261_17:                             # %if.end29
                                        #   in Loop: Header=BB261_9 Depth=1
	jmp	.LBB261_9
.LBB261_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB261_20
# %bb.19:                               # %if.then32
	jmp	.LBB261_40
.LBB261_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB261_22
# %bb.21:                               # %if.then36
	jmp	.LBB261_46
.LBB261_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB261_24
# %bb.23:                               # %if.then41
	jmp	.LBB261_46
.LBB261_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB261_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB261_27
# %bb.26:                               # %if.then49
	jmp	.LBB261_46
.LBB261_27:                             # %if.end50
	jmp	.LBB261_28
.LBB261_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB261_30
# %bb.29:                               # %if.then54
	jmp	.LBB261_46
.LBB261_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB261_32
# %bb.31:                               # %if.then59
	jmp	.LBB261_46
.LBB261_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB261_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB261_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB261_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB261_37
.LBB261_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI261_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI261_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI261_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB261_37:                             # %if.end80
	jmp	.LBB261_38
.LBB261_38:                             # %if.end81
	cmpl	$1105896997, -76(%rbp)  # imm = 0x41EAA625
	jne	.LBB261_48
.LBB261_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB261_43
	jmp	.LBB261_41
.LBB261_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB261_45
	jmp	.LBB261_42
.LBB261_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB261_44
	jmp	.LBB261_47
.LBB261_43:                             # %sw.bb
	callq	configError
.LBB261_44:                             # %sw.bb82
	callq	outOfMemory
.LBB261_45:                             # %sw.bb83
	jmp	.LBB261_46
.LBB261_46:                             # %errhandler_io
	callq	ioError
.LBB261_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB261_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB261_39
.Lfunc_end261:
	.size	compressStream.219, .Lfunc_end261-compressStream.219
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.220
	.type	compress.220,@function
compress.220:                           # @compress.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$415849424, -64(%rbp)   # imm = 0x18C95BD0
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB262_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB262_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB262_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB262_6
	jmp	.LBB262_4
.LBB262_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB262_8
	jmp	.LBB262_5
.LBB262_5:                              # %if.end
	subl	$3, %eax
	je	.LBB262_7
	jmp	.LBB262_9
.LBB262_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB262_9
.LBB262_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB262_9
.LBB262_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB262_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB262_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB262_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB262_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB262_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB262_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB262_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB262_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB262_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB262_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB262_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB262_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB262_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_23:                             # %if.end34
                                        #   in Loop: Header=BB262_18 Depth=1
	jmp	.LBB262_24
.LBB262_24:                             # %for.inc
                                        #   in Loop: Header=BB262_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB262_18
.LBB262_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB262_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB262_30
.LBB262_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB262_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_29:                             # %if.end45
	jmp	.LBB262_30
.LBB262_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB262_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB262_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB262_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB262_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB262_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB262_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB262_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB262_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB262_41
.LBB262_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_41:                             # %if.end72
	jmp	.LBB262_42
.LBB262_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB262_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB262_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB262_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB262_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB262_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB262_51
	jmp	.LBB262_49
.LBB262_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB262_54
	jmp	.LBB262_50
.LBB262_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB262_61
	jmp	.LBB262_70
.LBB262_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB262_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_53:                             # %if.end98
	jmp	.LBB262_71
.LBB262_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB262_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB262_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB262_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB262_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_60:                             # %if.end119
	jmp	.LBB262_71
.LBB262_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB262_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB262_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB262_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB262_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB262_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB262_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB262_80
.LBB262_69:                             # %if.end146
	jmp	.LBB262_71
.LBB262_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB262_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB262_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB262_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB262_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB262_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB262_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB262_77:                             # %if.end163
	jmp	.LBB262_78
.LBB262_78:                             # %if.end164
	jmp	.LBB262_79
.LBB262_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB262_80:                             # %return
	cmpl	$415849424, -64(%rbp)   # imm = 0x18C95BD0
	jne	.LBB262_82
.LBB262_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_81
.Lfunc_end262:
	.size	compress.220, .Lfunc_end262-compress.220
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.221
	.type	hasSuffix.221,@function
hasSuffix.221:                          # @hasSuffix.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$530429001, -24(%rbp)   # imm = 0x1F9DB449
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB263_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB263_5
.LBB263_2:                              # %if.end
	xorl	%eax, %eax
	movq	-40(%rbp), %rdi
	movslq	-16(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-20(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-32(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB263_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB263_5
.LBB263_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB263_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$530429001, -24(%rbp)   # imm = 0x1F9DB449
	jne	.LBB263_7
.LBB263_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_6
.Lfunc_end263:
	.size	hasSuffix.221, .Lfunc_end263-hasSuffix.221
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.222
	.type	uInt64_qrm10.222,@function
uInt64_qrm10.222:                       # @uInt64_qrm10.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1100405628, -24(%rbp)  # imm = 0x4196DB7C
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB264_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB264_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_1
.LBB264_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1100405628, -24(%rbp)  # imm = 0x4196DB7C
	jne	.LBB264_6
.LBB264_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_5
.Lfunc_end264:
	.size	uInt64_qrm10.222, .Lfunc_end264-uInt64_qrm10.222
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.223
	.type	compress.223,@function
compress.223:                           # @compress.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2121155493, -60(%rbp)  # imm = 0x7E6E43A5
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB265_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB265_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB265_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB265_6
	jmp	.LBB265_4
.LBB265_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB265_8
	jmp	.LBB265_5
.LBB265_5:                              # %if.end
	subl	$3, %eax
	je	.LBB265_7
	jmp	.LBB265_9
.LBB265_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB265_9
.LBB265_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB265_9
.LBB265_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB265_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB265_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB265_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB265_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB265_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB265_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB265_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB265_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB265_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB265_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB265_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB265_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB265_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_23:                             # %if.end34
                                        #   in Loop: Header=BB265_18 Depth=1
	jmp	.LBB265_24
.LBB265_24:                             # %for.inc
                                        #   in Loop: Header=BB265_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB265_18
.LBB265_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB265_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB265_30
.LBB265_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB265_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_29:                             # %if.end45
	jmp	.LBB265_30
.LBB265_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB265_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB265_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB265_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB265_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB265_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB265_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB265_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB265_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB265_41
.LBB265_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_41:                             # %if.end72
	jmp	.LBB265_42
.LBB265_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB265_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB265_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB265_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB265_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB265_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB265_51
	jmp	.LBB265_49
.LBB265_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB265_54
	jmp	.LBB265_50
.LBB265_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB265_61
	jmp	.LBB265_70
.LBB265_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB265_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_53:                             # %if.end98
	jmp	.LBB265_71
.LBB265_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB265_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB265_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB265_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB265_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_60:                             # %if.end119
	jmp	.LBB265_71
.LBB265_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB265_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB265_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB265_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB265_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB265_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB265_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB265_80
.LBB265_69:                             # %if.end146
	jmp	.LBB265_71
.LBB265_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB265_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB265_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB265_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB265_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB265_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB265_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB265_77:                             # %if.end163
	jmp	.LBB265_78
.LBB265_78:                             # %if.end164
	jmp	.LBB265_79
.LBB265_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB265_80:                             # %return
	cmpl	$2121155493, -60(%rbp)  # imm = 0x7E6E43A5
	jne	.LBB265_82
.LBB265_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_81
.Lfunc_end265:
	.size	compress.223, .Lfunc_end265-compress.223
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.224
	.type	countHardLinks.224,@function
countHardLinks.224:                     # @countHardLinks.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$258504039, -20(%rbp)   # imm = 0xF687567
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB266_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB266_3
.LBB266_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB266_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$258504039, -20(%rbp)   # imm = 0xF687567
	jne	.LBB266_5
.LBB266_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_4
.Lfunc_end266:
	.size	countHardLinks.224, .Lfunc_end266-countHardLinks.224
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.225
	.type	compress.225,@function
compress.225:                           # @compress.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1807434649, -64(%rbp)  # imm = 0x6BBB4399
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB267_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB267_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB267_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB267_6
	jmp	.LBB267_4
.LBB267_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB267_8
	jmp	.LBB267_5
.LBB267_5:                              # %if.end
	subl	$3, %eax
	je	.LBB267_7
	jmp	.LBB267_9
.LBB267_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB267_9
.LBB267_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB267_9
.LBB267_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB267_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB267_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB267_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB267_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB267_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB267_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB267_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB267_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB267_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB267_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB267_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB267_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB267_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_23:                             # %if.end34
                                        #   in Loop: Header=BB267_18 Depth=1
	jmp	.LBB267_24
.LBB267_24:                             # %for.inc
                                        #   in Loop: Header=BB267_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB267_18
.LBB267_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB267_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB267_30
.LBB267_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB267_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_29:                             # %if.end45
	jmp	.LBB267_30
.LBB267_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB267_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB267_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB267_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB267_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB267_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB267_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB267_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB267_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB267_41
.LBB267_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_41:                             # %if.end72
	jmp	.LBB267_42
.LBB267_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB267_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB267_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB267_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB267_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB267_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB267_51
	jmp	.LBB267_49
.LBB267_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB267_54
	jmp	.LBB267_50
.LBB267_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB267_61
	jmp	.LBB267_70
.LBB267_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB267_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_53:                             # %if.end98
	jmp	.LBB267_71
.LBB267_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB267_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB267_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB267_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB267_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_60:                             # %if.end119
	jmp	.LBB267_71
.LBB267_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB267_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB267_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB267_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB267_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB267_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB267_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB267_80
.LBB267_69:                             # %if.end146
	jmp	.LBB267_71
.LBB267_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB267_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB267_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB267_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB267_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB267_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB267_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB267_77:                             # %if.end163
	jmp	.LBB267_78
.LBB267_78:                             # %if.end164
	jmp	.LBB267_79
.LBB267_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB267_80:                             # %return
	cmpl	$1807434649, -64(%rbp)  # imm = 0x6BBB4399
	jne	.LBB267_82
.LBB267_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_81
.Lfunc_end267:
	.size	compress.225, .Lfunc_end267-compress.225
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.226 # -- Begin function fopen_output_safely.226
	.p2align	4, 0x90
	.type	fopen_output_safely.226,@function
fopen_output_safely.226:                # @fopen_output_safely.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1102561626, -16(%rbp)  # imm = 0x41B7C15A
	movq	%rdi, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-48(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB268_2
# %bb.1:                                # %if.then
	movq	$0, -32(%rbp)
	jmp	.LBB268_5
.LBB268_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-40(%rbp), %rsi
	callq	fdopen
	movq	%rax, -24(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB268_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB268_4:                              # %if.end5
	movq	-24(%rbp), %rax
	movq	%rax, -32(%rbp)
.LBB268_5:                              # %return
	movq	-32(%rbp), %rbx
	cmpl	$1102561626, -16(%rbp)  # imm = 0x41B7C15A
	jne	.LBB268_7
.LBB268_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_6
.Lfunc_end268:
	.size	fopen_output_safely.226, .Lfunc_end268-fopen_output_safely.226
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.227
	.type	uInt64_qrm10.227,@function
uInt64_qrm10.227:                       # @uInt64_qrm10.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1297830352, -24(%rbp)  # imm = 0x4D5B51D0
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB269_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB269_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB269_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB269_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_1
.LBB269_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1297830352, -24(%rbp)  # imm = 0x4D5B51D0
	jne	.LBB269_6
.LBB269_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_5
.Lfunc_end269:
	.size	uInt64_qrm10.227, .Lfunc_end269-uInt64_qrm10.227
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function hasSuffix.228
	.type	hasSuffix.228,@function
hasSuffix.228:                          # @hasSuffix.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$424069416, -24(%rbp)   # imm = 0x1946C928
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	movl	%eax, -16(%rbp)
	movl	-20(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB270_2
# %bb.1:                                # %if.then
	movb	$0, -9(%rbp)
	jmp	.LBB270_5
.LBB270_2:                              # %if.end
	xorl	%eax, %eax
	movq	-32(%rbp), %rdi
	movslq	-20(%rbp), %rcx
	addq	%rcx, %rdi
	movslq	-16(%rbp), %rcx
	subq	%rcx, %rax
	addq	%rax, %rdi
	movq	-40(%rbp), %rsi
	callq	strcmp
	cmpl	$0, %eax
	jne	.LBB270_4
# %bb.3:                                # %if.then9
	movb	$1, -9(%rbp)
	jmp	.LBB270_5
.LBB270_4:                              # %if.end10
	movb	$0, -9(%rbp)
.LBB270_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$424069416, -24(%rbp)   # imm = 0x1946C928
	jne	.LBB270_7
.LBB270_6:
	movzbl	%bl, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_6
.Lfunc_end270:
	.size	hasSuffix.228, .Lfunc_end270-hasSuffix.228
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.229
	.type	uInt64_toAscii.229,@function
uInt64_toAscii.229:                     # @uInt64_toAscii.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$15618105, -16(%rbp)    # imm = 0xEE5039
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB271_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB271_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB271_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB271_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB271_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB271_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB271_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB271_4
.LBB271_7:                              # %for.end
	cmpl	$15618105, -16(%rbp)    # imm = 0xEE5039
	jne	.LBB271_9
.LBB271_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_8
.Lfunc_end271:
	.size	uInt64_toAscii.229, .Lfunc_end271-uInt64_toAscii.229
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.230
	.type	uncompressStream.230,@function
uncompressStream.230:                   # @uncompressStream.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1595634953, -68(%rbp)  # imm = 0x5F1B7509
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_2
# %bb.1:                                # %if.then
	jmp	.LBB272_66
.LBB272_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_4
# %bb.3:                                # %if.then3
	jmp	.LBB272_66
.LBB272_4:                              # %if.end4
	jmp	.LBB272_5
.LBB272_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_9 Depth 2
                                        #     Child Loop BB272_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB272_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB272_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB272_8
.LBB272_7:                              # %if.then9
	jmp	.LBB272_62
.LBB272_8:                              # %if.end10
                                        #   in Loop: Header=BB272_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB272_9:                              # %while.cond11
                                        #   Parent Loop BB272_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB272_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB272_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB272_12
# %bb.11:                               # %if.then19
	jmp	.LBB272_49
.LBB272_12:                             # %if.end20
                                        #   in Loop: Header=BB272_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB272_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB272_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB272_16
.LBB272_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB272_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB272_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB272_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB272_16:                             # %if.end32
                                        #   in Loop: Header=BB272_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_18
# %bb.17:                               # %if.then35
	jmp	.LBB272_66
.LBB272_18:                             # %if.end36
                                        #   in Loop: Header=BB272_9 Depth=2
	jmp	.LBB272_9
.LBB272_19:                             # %while.end
                                        #   in Loop: Header=BB272_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB272_21
# %bb.20:                               # %if.then39
	jmp	.LBB272_62
.LBB272_21:                             # %if.end40
                                        #   in Loop: Header=BB272_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB272_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB272_23:                             # %if.end44
                                        #   in Loop: Header=BB272_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB272_24:                             # %for.cond
                                        #   Parent Loop BB272_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB272_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB272_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB272_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB272_24
.LBB272_27:                             # %for.end
                                        #   in Loop: Header=BB272_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB272_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB272_29:                             # %if.end53
                                        #   in Loop: Header=BB272_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB272_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB272_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB272_32
# %bb.31:                               # %if.then60
	jmp	.LBB272_33
.LBB272_32:                             # %if.end61
                                        #   in Loop: Header=BB272_5 Depth=1
	jmp	.LBB272_5
.LBB272_33:                             # %while.end62
	jmp	.LBB272_34
.LBB272_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_36
# %bb.35:                               # %if.then65
	jmp	.LBB272_66
.LBB272_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB272_38
# %bb.37:                               # %if.then70
	jmp	.LBB272_66
.LBB272_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_40
# %bb.39:                               # %if.then74
	jmp	.LBB272_66
.LBB272_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB272_42
# %bb.41:                               # %if.then79
	jmp	.LBB272_66
.LBB272_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB272_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB272_45
# %bb.44:                               # %if.then87
	jmp	.LBB272_66
.LBB272_45:                             # %if.end88
	jmp	.LBB272_46
.LBB272_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB272_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB272_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB272_80
.LBB272_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB272_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB272_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB272_53
# %bb.52:                               # %if.then100
	jmp	.LBB272_60
.LBB272_53:                             # %if.end101
                                        #   in Loop: Header=BB272_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_55
# %bb.54:                               # %if.then107
	jmp	.LBB272_66
.LBB272_55:                             # %if.end108
                                        #   in Loop: Header=BB272_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB272_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB272_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB272_57:                             # %if.end115
                                        #   in Loop: Header=BB272_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB272_59
# %bb.58:                               # %if.then118
	jmp	.LBB272_66
.LBB272_59:                             # %if.end119
                                        #   in Loop: Header=BB272_51 Depth=1
	jmp	.LBB272_51
.LBB272_60:                             # %while.end120
	jmp	.LBB272_34
.LBB272_61:                             # %if.end121
	jmp	.LBB272_62
.LBB272_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB272_79
# %bb.63:                               # %errhandler
	movq	.LJTI272_0(,%rax,8), %rax
	jmpq	*%rax
.LBB272_64:                             # %sw.bb
	callq	configError
.LBB272_65:                             # %sw.bb122
	jmp	.LBB272_66
.LBB272_66:                             # %errhandler_io
	callq	ioError
.LBB272_67:                             # %sw.bb123
	callq	crcError
.LBB272_68:                             # %sw.bb124
	callq	outOfMemory
.LBB272_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB272_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB272_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB272_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB272_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB272_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB272_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB272_80
.LBB272_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB272_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB272_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB272_80
.LBB272_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB272_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1595634953, -68(%rbp)  # imm = 0x5F1B7509
	jne	.LBB272_82
.LBB272_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_81
.Lfunc_end272:
	.size	uncompressStream.230, .Lfunc_end272-uncompressStream.230
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI272_0:
	.quad	.LBB272_64
	.quad	.LBB272_79
	.quad	.LBB272_69
	.quad	.LBB272_65
	.quad	.LBB272_70
	.quad	.LBB272_67
	.quad	.LBB272_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.231
	.type	uInt64_toAscii.231,@function
uInt64_toAscii.231:                     # @uInt64_toAscii.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1619765151, -12(%rbp)  # imm = 0x608BA79F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB273_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB273_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB273_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB273_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB273_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB273_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB273_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB273_4
.LBB273_7:                              # %for.end
	cmpl	$1619765151, -12(%rbp)  # imm = 0x608BA79F
	jne	.LBB273_9
.LBB273_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_8
.Lfunc_end273:
	.size	uInt64_toAscii.231, .Lfunc_end273-uInt64_toAscii.231
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.232
	.type	testf.232,@function
testf.232:                              # @testf.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1023299375, -44(%rbp)  # imm = 0x3CFE4F2F
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB274_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB274_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB274_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB274_6
	jmp	.LBB274_4
.LBB274_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB274_8
	jmp	.LBB274_5
.LBB274_5:                              # %if.end
	subl	$3, %eax
	je	.LBB274_7
	jmp	.LBB274_9
.LBB274_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB274_9
.LBB274_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB274_9
.LBB274_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB274_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB274_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB274_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB274_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB274_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB274_37
.LBB274_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB274_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB274_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB274_37
.LBB274_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB274_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB274_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB274_37
.LBB274_20:                             # %if.end30
	jmp	.LBB274_21
.LBB274_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB274_23
	jmp	.LBB274_22
.LBB274_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB274_26
	jmp	.LBB274_29
.LBB274_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB274_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB274_37
.LBB274_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB274_30
.LBB274_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB274_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB274_37
.LBB274_28:                             # %if.end48
	jmp	.LBB274_30
.LBB274_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB274_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB274_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB274_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB274_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB274_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB274_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB274_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB274_37:                             # %if.end67
	cmpl	$1023299375, -44(%rbp)  # imm = 0x3CFE4F2F
	jne	.LBB274_39
.LBB274_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_38
.Lfunc_end274:
	.size	testf.232, .Lfunc_end274-testf.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.233
	.type	uncompressStream.233,@function
uncompressStream.233:                   # @uncompressStream.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$111366650, -68(%rbp)   # imm = 0x6A351FA
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_2
# %bb.1:                                # %if.then
	jmp	.LBB275_66
.LBB275_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_4
# %bb.3:                                # %if.then3
	jmp	.LBB275_66
.LBB275_4:                              # %if.end4
	jmp	.LBB275_5
.LBB275_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_9 Depth 2
                                        #     Child Loop BB275_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB275_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB275_8
.LBB275_7:                              # %if.then9
	jmp	.LBB275_62
.LBB275_8:                              # %if.end10
                                        #   in Loop: Header=BB275_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB275_9:                              # %while.cond11
                                        #   Parent Loop BB275_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB275_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB275_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB275_12
# %bb.11:                               # %if.then19
	jmp	.LBB275_49
.LBB275_12:                             # %if.end20
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB275_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB275_16
.LBB275_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB275_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB275_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB275_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB275_16:                             # %if.end32
                                        #   in Loop: Header=BB275_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_18
# %bb.17:                               # %if.then35
	jmp	.LBB275_66
.LBB275_18:                             # %if.end36
                                        #   in Loop: Header=BB275_9 Depth=2
	jmp	.LBB275_9
.LBB275_19:                             # %while.end
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB275_21
# %bb.20:                               # %if.then39
	jmp	.LBB275_62
.LBB275_21:                             # %if.end40
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB275_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB275_23:                             # %if.end44
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -40(%rbp)
.LBB275_24:                             # %for.cond
                                        #   Parent Loop BB275_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB275_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB275_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-40(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB275_24 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB275_24
.LBB275_27:                             # %for.end
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB275_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB275_29:                             # %if.end53
                                        #   in Loop: Header=BB275_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB275_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB275_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB275_32
# %bb.31:                               # %if.then60
	jmp	.LBB275_33
.LBB275_32:                             # %if.end61
                                        #   in Loop: Header=BB275_5 Depth=1
	jmp	.LBB275_5
.LBB275_33:                             # %while.end62
	jmp	.LBB275_34
.LBB275_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_36
# %bb.35:                               # %if.then65
	jmp	.LBB275_66
.LBB275_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB275_38
# %bb.37:                               # %if.then70
	jmp	.LBB275_66
.LBB275_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_40
# %bb.39:                               # %if.then74
	jmp	.LBB275_66
.LBB275_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB275_42
# %bb.41:                               # %if.then79
	jmp	.LBB275_66
.LBB275_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB275_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB275_45
# %bb.44:                               # %if.then87
	jmp	.LBB275_66
.LBB275_45:                             # %if.end88
	jmp	.LBB275_46
.LBB275_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB275_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB275_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB275_80
.LBB275_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB275_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB275_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB275_53
# %bb.52:                               # %if.then100
	jmp	.LBB275_60
.LBB275_53:                             # %if.end101
                                        #   in Loop: Header=BB275_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_55
# %bb.54:                               # %if.then107
	jmp	.LBB275_66
.LBB275_55:                             # %if.end108
                                        #   in Loop: Header=BB275_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB275_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB275_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB275_57:                             # %if.end115
                                        #   in Loop: Header=BB275_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB275_59
# %bb.58:                               # %if.then118
	jmp	.LBB275_66
.LBB275_59:                             # %if.end119
                                        #   in Loop: Header=BB275_51 Depth=1
	jmp	.LBB275_51
.LBB275_60:                             # %while.end120
	jmp	.LBB275_34
.LBB275_61:                             # %if.end121
	jmp	.LBB275_62
.LBB275_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB275_79
# %bb.63:                               # %errhandler
	movq	.LJTI275_0(,%rax,8), %rax
	jmpq	*%rax
.LBB275_64:                             # %sw.bb
	callq	configError
.LBB275_65:                             # %sw.bb122
	jmp	.LBB275_66
.LBB275_66:                             # %errhandler_io
	callq	ioError
.LBB275_67:                             # %sw.bb123
	callq	crcError
.LBB275_68:                             # %sw.bb124
	callq	outOfMemory
.LBB275_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB275_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB275_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB275_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB275_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB275_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB275_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB275_80
.LBB275_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB275_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB275_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB275_80
.LBB275_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB275_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$111366650, -68(%rbp)   # imm = 0x6A351FA
	jne	.LBB275_82
.LBB275_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_81
.Lfunc_end275:
	.size	uncompressStream.233, .Lfunc_end275-uncompressStream.233
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI275_0:
	.quad	.LBB275_64
	.quad	.LBB275_79
	.quad	.LBB275_69
	.quad	.LBB275_65
	.quad	.LBB275_70
	.quad	.LBB275_67
	.quad	.LBB275_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.234
	.type	addFlagsFromEnvVar.234,@function
addFlagsFromEnvVar.234:                 # @addFlagsFromEnvVar.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$313300814, -24(%rbp)   # imm = 0x12AC974E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB276_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB276_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB276_5 Depth 2
                                        #     Child Loop BB276_8 Depth 2
                                        #     Child Loop BB276_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB276_4
# %bb.3:                                # %if.then3
	jmp	.LBB276_21
.LBB276_4:                              # %if.end
                                        #   in Loop: Header=BB276_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB276_5:                              # %while.cond4
                                        #   Parent Loop BB276_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB276_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB276_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB276_5
.LBB276_7:                              # %while.end
                                        #   in Loop: Header=BB276_2 Depth=1
	jmp	.LBB276_8
.LBB276_8:                              # %while.cond12
                                        #   Parent Loop BB276_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB276_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB276_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB276_10:                             # %land.end
                                        #   in Loop: Header=BB276_8 Depth=2
	testb	$1, %al
	jne	.LBB276_11
	jmp	.LBB276_12
.LBB276_11:                             # %while.body27
                                        #   in Loop: Header=BB276_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB276_8
.LBB276_12:                             # %while.end28
                                        #   in Loop: Header=BB276_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB276_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB276_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB276_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB276_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB276_15:                             # %if.end35
                                        #   in Loop: Header=BB276_2 Depth=1
	movl	$0, -8(%rbp)
.LBB276_16:                             # %for.cond
                                        #   Parent Loop BB276_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB276_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB276_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB276_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB276_16
.LBB276_19:                             # %for.end
                                        #   in Loop: Header=BB276_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB276_20:                             # %if.end46
                                        #   in Loop: Header=BB276_2 Depth=1
	jmp	.LBB276_2
.LBB276_21:                             # %while.end47
	jmp	.LBB276_22
.LBB276_22:                             # %if.end48
	cmpl	$313300814, -24(%rbp)   # imm = 0x12AC974E
	jne	.LBB276_24
.LBB276_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_23
.Lfunc_end276:
	.size	addFlagsFromEnvVar.234, .Lfunc_end276-addFlagsFromEnvVar.234
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.235
	.type	addFlagsFromEnvVar.235,@function
addFlagsFromEnvVar.235:                 # @addFlagsFromEnvVar.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$669901683, -24(%rbp)   # imm = 0x27EDE373
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB277_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB277_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_5 Depth 2
                                        #     Child Loop BB277_8 Depth 2
                                        #     Child Loop BB277_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB277_4
# %bb.3:                                # %if.then3
	jmp	.LBB277_21
.LBB277_4:                              # %if.end
                                        #   in Loop: Header=BB277_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB277_5:                              # %while.cond4
                                        #   Parent Loop BB277_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB277_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB277_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB277_5
.LBB277_7:                              # %while.end
                                        #   in Loop: Header=BB277_2 Depth=1
	jmp	.LBB277_8
.LBB277_8:                              # %while.cond12
                                        #   Parent Loop BB277_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB277_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB277_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB277_10:                             # %land.end
                                        #   in Loop: Header=BB277_8 Depth=2
	testb	$1, %al
	jne	.LBB277_11
	jmp	.LBB277_12
.LBB277_11:                             # %while.body27
                                        #   in Loop: Header=BB277_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB277_8
.LBB277_12:                             # %while.end28
                                        #   in Loop: Header=BB277_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB277_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB277_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB277_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB277_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB277_15:                             # %if.end35
                                        #   in Loop: Header=BB277_2 Depth=1
	movl	$0, -8(%rbp)
.LBB277_16:                             # %for.cond
                                        #   Parent Loop BB277_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB277_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB277_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB277_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB277_16
.LBB277_19:                             # %for.end
                                        #   in Loop: Header=BB277_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB277_20:                             # %if.end46
                                        #   in Loop: Header=BB277_2 Depth=1
	jmp	.LBB277_2
.LBB277_21:                             # %while.end47
	jmp	.LBB277_22
.LBB277_22:                             # %if.end48
	cmpl	$669901683, -24(%rbp)   # imm = 0x27EDE373
	jne	.LBB277_24
.LBB277_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_23
.Lfunc_end277:
	.size	addFlagsFromEnvVar.235, .Lfunc_end277-addFlagsFromEnvVar.235
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.236
	.type	uncompressStream.236,@function
uncompressStream.236:                   # @uncompressStream.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1809033342, -68(%rbp)  # imm = 0x6BD3A87E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_2
# %bb.1:                                # %if.then
	jmp	.LBB278_66
.LBB278_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_4
# %bb.3:                                # %if.then3
	jmp	.LBB278_66
.LBB278_4:                              # %if.end4
	jmp	.LBB278_5
.LBB278_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_9 Depth 2
                                        #     Child Loop BB278_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB278_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB278_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB278_8
.LBB278_7:                              # %if.then9
	jmp	.LBB278_62
.LBB278_8:                              # %if.end10
                                        #   in Loop: Header=BB278_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB278_9:                              # %while.cond11
                                        #   Parent Loop BB278_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB278_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB278_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB278_12
# %bb.11:                               # %if.then19
	jmp	.LBB278_49
.LBB278_12:                             # %if.end20
                                        #   in Loop: Header=BB278_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB278_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB278_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB278_16
.LBB278_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB278_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB278_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB278_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB278_16:                             # %if.end32
                                        #   in Loop: Header=BB278_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_18
# %bb.17:                               # %if.then35
	jmp	.LBB278_66
.LBB278_18:                             # %if.end36
                                        #   in Loop: Header=BB278_9 Depth=2
	jmp	.LBB278_9
.LBB278_19:                             # %while.end
                                        #   in Loop: Header=BB278_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB278_21
# %bb.20:                               # %if.then39
	jmp	.LBB278_62
.LBB278_21:                             # %if.end40
                                        #   in Loop: Header=BB278_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB278_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB278_23:                             # %if.end44
                                        #   in Loop: Header=BB278_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB278_24:                             # %for.cond
                                        #   Parent Loop BB278_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB278_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB278_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB278_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB278_24
.LBB278_27:                             # %for.end
                                        #   in Loop: Header=BB278_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB278_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB278_29:                             # %if.end53
                                        #   in Loop: Header=BB278_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB278_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB278_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB278_32
# %bb.31:                               # %if.then60
	jmp	.LBB278_33
.LBB278_32:                             # %if.end61
                                        #   in Loop: Header=BB278_5 Depth=1
	jmp	.LBB278_5
.LBB278_33:                             # %while.end62
	jmp	.LBB278_34
.LBB278_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_36
# %bb.35:                               # %if.then65
	jmp	.LBB278_66
.LBB278_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB278_38
# %bb.37:                               # %if.then70
	jmp	.LBB278_66
.LBB278_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_40
# %bb.39:                               # %if.then74
	jmp	.LBB278_66
.LBB278_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB278_42
# %bb.41:                               # %if.then79
	jmp	.LBB278_66
.LBB278_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB278_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB278_45
# %bb.44:                               # %if.then87
	jmp	.LBB278_66
.LBB278_45:                             # %if.end88
	jmp	.LBB278_46
.LBB278_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB278_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB278_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB278_80
.LBB278_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB278_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB278_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB278_53
# %bb.52:                               # %if.then100
	jmp	.LBB278_60
.LBB278_53:                             # %if.end101
                                        #   in Loop: Header=BB278_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_55
# %bb.54:                               # %if.then107
	jmp	.LBB278_66
.LBB278_55:                             # %if.end108
                                        #   in Loop: Header=BB278_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB278_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB278_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB278_57:                             # %if.end115
                                        #   in Loop: Header=BB278_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB278_59
# %bb.58:                               # %if.then118
	jmp	.LBB278_66
.LBB278_59:                             # %if.end119
                                        #   in Loop: Header=BB278_51 Depth=1
	jmp	.LBB278_51
.LBB278_60:                             # %while.end120
	jmp	.LBB278_34
.LBB278_61:                             # %if.end121
	jmp	.LBB278_62
.LBB278_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB278_79
# %bb.63:                               # %errhandler
	movq	.LJTI278_0(,%rax,8), %rax
	jmpq	*%rax
.LBB278_64:                             # %sw.bb
	callq	configError
.LBB278_65:                             # %sw.bb122
	jmp	.LBB278_66
.LBB278_66:                             # %errhandler_io
	callq	ioError
.LBB278_67:                             # %sw.bb123
	callq	crcError
.LBB278_68:                             # %sw.bb124
	callq	outOfMemory
.LBB278_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB278_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB278_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB278_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB278_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB278_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB278_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB278_80
.LBB278_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB278_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB278_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB278_80
.LBB278_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB278_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1809033342, -68(%rbp)  # imm = 0x6BD3A87E
	jne	.LBB278_82
.LBB278_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_81
.Lfunc_end278:
	.size	uncompressStream.236, .Lfunc_end278-uncompressStream.236
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI278_0:
	.quad	.LBB278_64
	.quad	.LBB278_79
	.quad	.LBB278_69
	.quad	.LBB278_65
	.quad	.LBB278_70
	.quad	.LBB278_67
	.quad	.LBB278_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.237
	.type	snocString.237,@function
snocString.237:                         # @snocString.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$761419257, -44(%rbp)   # imm = 0x2D6255F9
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB279_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB279_6
.LBB279_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB279_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB279_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB279_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB279_3
.LBB279_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB279_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$761419257, -44(%rbp)   # imm = 0x2D6255F9
	jne	.LBB279_8
.LBB279_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_7
.Lfunc_end279:
	.size	snocString.237, .Lfunc_end279-snocString.237
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.238
	.type	addFlagsFromEnvVar.238,@function
addFlagsFromEnvVar.238:                 # @addFlagsFromEnvVar.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1774526910, -24(%rbp)  # imm = 0x69C521BE
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB280_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB280_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB280_5 Depth 2
                                        #     Child Loop BB280_8 Depth 2
                                        #     Child Loop BB280_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB280_4
# %bb.3:                                # %if.then3
	jmp	.LBB280_21
.LBB280_4:                              # %if.end
                                        #   in Loop: Header=BB280_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB280_5:                              # %while.cond4
                                        #   Parent Loop BB280_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB280_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB280_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB280_5
.LBB280_7:                              # %while.end
                                        #   in Loop: Header=BB280_2 Depth=1
	jmp	.LBB280_8
.LBB280_8:                              # %while.cond12
                                        #   Parent Loop BB280_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB280_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB280_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB280_10:                             # %land.end
                                        #   in Loop: Header=BB280_8 Depth=2
	testb	$1, %al
	jne	.LBB280_11
	jmp	.LBB280_12
.LBB280_11:                             # %while.body27
                                        #   in Loop: Header=BB280_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB280_8
.LBB280_12:                             # %while.end28
                                        #   in Loop: Header=BB280_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB280_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB280_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB280_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB280_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB280_15:                             # %if.end35
                                        #   in Loop: Header=BB280_2 Depth=1
	movl	$0, -8(%rbp)
.LBB280_16:                             # %for.cond
                                        #   Parent Loop BB280_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB280_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB280_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB280_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB280_16
.LBB280_19:                             # %for.end
                                        #   in Loop: Header=BB280_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB280_20:                             # %if.end46
                                        #   in Loop: Header=BB280_2 Depth=1
	jmp	.LBB280_2
.LBB280_21:                             # %while.end47
	jmp	.LBB280_22
.LBB280_22:                             # %if.end48
	cmpl	$1774526910, -24(%rbp)  # imm = 0x69C521BE
	jne	.LBB280_24
.LBB280_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_23
.Lfunc_end280:
	.size	addFlagsFromEnvVar.238, .Lfunc_end280-addFlagsFromEnvVar.238
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.239
.LCPI281_0:
	.quad	4636737291354636288     # double 100
.LCPI281_1:
	.quad	4607182418800017408     # double 1
.LCPI281_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.239,@function
compressStream.239:                     # @compressStream.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$377086710, -76(%rbp)   # imm = 0x1679E2F6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_2
# %bb.1:                                # %if.then
	jmp	.LBB281_46
.LBB281_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_4
# %bb.3:                                # %if.then3
	jmp	.LBB281_46
.LBB281_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB281_6
# %bb.5:                                # %if.then6
	jmp	.LBB281_40
.LBB281_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB281_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB281_8:                              # %if.end11
	jmp	.LBB281_9
.LBB281_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB281_11
# %bb.10:                               # %if.then14
	jmp	.LBB281_18
.LBB281_11:                             # %if.end15
                                        #   in Loop: Header=BB281_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_13
# %bb.12:                               # %if.then19
	jmp	.LBB281_46
.LBB281_13:                             # %if.end20
                                        #   in Loop: Header=BB281_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB281_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB281_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB281_15:                             # %if.end25
                                        #   in Loop: Header=BB281_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB281_17
# %bb.16:                               # %if.then28
	jmp	.LBB281_40
.LBB281_17:                             # %if.end29
                                        #   in Loop: Header=BB281_9 Depth=1
	jmp	.LBB281_9
.LBB281_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB281_20
# %bb.19:                               # %if.then32
	jmp	.LBB281_40
.LBB281_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_22
# %bb.21:                               # %if.then36
	jmp	.LBB281_46
.LBB281_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_24
# %bb.23:                               # %if.then41
	jmp	.LBB281_46
.LBB281_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB281_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_27
# %bb.26:                               # %if.then49
	jmp	.LBB281_46
.LBB281_27:                             # %if.end50
	jmp	.LBB281_28
.LBB281_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB281_30
# %bb.29:                               # %if.then54
	jmp	.LBB281_46
.LBB281_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB281_32
# %bb.31:                               # %if.then59
	jmp	.LBB281_46
.LBB281_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB281_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB281_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB281_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB281_37
.LBB281_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI281_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI281_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI281_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB281_37:                             # %if.end80
	jmp	.LBB281_38
.LBB281_38:                             # %if.end81
	cmpl	$377086710, -76(%rbp)   # imm = 0x1679E2F6
	jne	.LBB281_48
.LBB281_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB281_43
	jmp	.LBB281_41
.LBB281_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB281_45
	jmp	.LBB281_42
.LBB281_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB281_44
	jmp	.LBB281_47
.LBB281_43:                             # %sw.bb
	callq	configError
.LBB281_44:                             # %sw.bb82
	callq	outOfMemory
.LBB281_45:                             # %sw.bb83
	jmp	.LBB281_46
.LBB281_46:                             # %errhandler_io
	callq	ioError
.LBB281_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB281_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB281_39
.Lfunc_end281:
	.size	compressStream.239, .Lfunc_end281-compressStream.239
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.240
.LCPI282_0:
	.quad	4607182418800017408     # double 1
.LCPI282_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.240,@function
uInt64_to_double.240:                   # @uInt64_to_double.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI282_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$727520448, -28(%rbp)   # imm = 0x2B5D14C0
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB282_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB282_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB282_1 Depth=1
	vmovsd	.LCPI282_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB282_1
.LBB282_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$727520448, -28(%rbp)   # imm = 0x2B5D14C0
	jne	.LBB282_6
.LBB282_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB282_5
.Lfunc_end282:
	.size	uInt64_to_double.240, .Lfunc_end282-uInt64_to_double.240
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.241
	.type	uInt64_toAscii.241,@function
uInt64_toAscii.241:                     # @uInt64_toAscii.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1694518142, -16(%rbp)  # imm = 0x65004B7E
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB283_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB283_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB283_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB283_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB283_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB283_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB283_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB283_4
.LBB283_7:                              # %for.end
	cmpl	$1694518142, -16(%rbp)  # imm = 0x65004B7E
	jne	.LBB283_9
.LBB283_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_8
.Lfunc_end283:
	.size	uInt64_toAscii.241, .Lfunc_end283-uInt64_toAscii.241
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.242
	.type	notAStandardFile.242,@function
notAStandardFile.242:                   # @notAStandardFile.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1202547461, -20(%rbp)  # imm = 0x47AD6B05
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB284_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB284_5
.LBB284_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB284_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB284_5
.LBB284_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB284_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1202547461, -20(%rbp)  # imm = 0x47AD6B05
	jne	.LBB284_7
.LBB284_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_6
.Lfunc_end284:
	.size	notAStandardFile.242, .Lfunc_end284-notAStandardFile.242
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.243
	.type	countHardLinks.243,@function
countHardLinks.243:                     # @countHardLinks.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$764737652, -20(%rbp)   # imm = 0x2D94F874
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB285_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB285_3
.LBB285_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB285_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$764737652, -20(%rbp)   # imm = 0x2D94F874
	jne	.LBB285_5
.LBB285_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_4
.Lfunc_end285:
	.size	countHardLinks.243, .Lfunc_end285-countHardLinks.243
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.244
	.type	snocString.244,@function
snocString.244:                         # @snocString.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$197848725, -44(%rbp)   # imm = 0xBCAEE95
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB286_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB286_6
.LBB286_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB286_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB286_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB286_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB286_3
.LBB286_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB286_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$197848725, -44(%rbp)   # imm = 0xBCAEE95
	jne	.LBB286_8
.LBB286_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_7
.Lfunc_end286:
	.size	snocString.244, .Lfunc_end286-snocString.244
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.245
	.type	notAStandardFile.245,@function
notAStandardFile.245:                   # @notAStandardFile.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1499302558, -20(%rbp)  # imm = 0x595D8A9E
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB287_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB287_5
.LBB287_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB287_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB287_5
.LBB287_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB287_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1499302558, -20(%rbp)  # imm = 0x595D8A9E
	jne	.LBB287_7
.LBB287_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_6
.Lfunc_end287:
	.size	notAStandardFile.245, .Lfunc_end287-notAStandardFile.245
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.246
	.type	addFlagsFromEnvVar.246,@function
addFlagsFromEnvVar.246:                 # @addFlagsFromEnvVar.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1163562299, -24(%rbp)  # imm = 0x455A8D3B
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB288_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB288_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_5 Depth 2
                                        #     Child Loop BB288_8 Depth 2
                                        #     Child Loop BB288_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB288_4
# %bb.3:                                # %if.then3
	jmp	.LBB288_21
.LBB288_4:                              # %if.end
                                        #   in Loop: Header=BB288_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB288_5:                              # %while.cond4
                                        #   Parent Loop BB288_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB288_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB288_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB288_5
.LBB288_7:                              # %while.end
                                        #   in Loop: Header=BB288_2 Depth=1
	jmp	.LBB288_8
.LBB288_8:                              # %while.cond12
                                        #   Parent Loop BB288_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB288_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB288_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB288_10:                             # %land.end
                                        #   in Loop: Header=BB288_8 Depth=2
	testb	$1, %al
	jne	.LBB288_11
	jmp	.LBB288_12
.LBB288_11:                             # %while.body27
                                        #   in Loop: Header=BB288_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB288_8
.LBB288_12:                             # %while.end28
                                        #   in Loop: Header=BB288_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB288_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB288_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB288_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB288_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB288_15:                             # %if.end35
                                        #   in Loop: Header=BB288_2 Depth=1
	movl	$0, -8(%rbp)
.LBB288_16:                             # %for.cond
                                        #   Parent Loop BB288_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB288_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB288_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB288_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB288_16
.LBB288_19:                             # %for.end
                                        #   in Loop: Header=BB288_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB288_20:                             # %if.end46
                                        #   in Loop: Header=BB288_2 Depth=1
	jmp	.LBB288_2
.LBB288_21:                             # %while.end47
	jmp	.LBB288_22
.LBB288_22:                             # %if.end48
	cmpl	$1163562299, -24(%rbp)  # imm = 0x455A8D3B
	jne	.LBB288_24
.LBB288_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_23
.Lfunc_end288:
	.size	addFlagsFromEnvVar.246, .Lfunc_end288-addFlagsFromEnvVar.246
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.247
	.type	uncompressStream.247,@function
uncompressStream.247:                   # @uncompressStream.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$97565684, -68(%rbp)    # imm = 0x5D0BBF4
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_2
# %bb.1:                                # %if.then
	jmp	.LBB289_66
.LBB289_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_4
# %bb.3:                                # %if.then3
	jmp	.LBB289_66
.LBB289_4:                              # %if.end4
	jmp	.LBB289_5
.LBB289_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_9 Depth 2
                                        #     Child Loop BB289_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-24(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB289_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB289_8
.LBB289_7:                              # %if.then9
	jmp	.LBB289_62
.LBB289_8:                              # %if.end10
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB289_9:                              # %while.cond11
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB289_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB289_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB289_12
# %bb.11:                               # %if.then19
	jmp	.LBB289_49
.LBB289_12:                             # %if.end20
                                        #   in Loop: Header=BB289_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB289_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB289_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB289_16
.LBB289_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB289_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB289_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB289_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB289_16:                             # %if.end32
                                        #   in Loop: Header=BB289_9 Depth=2
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_18
# %bb.17:                               # %if.then35
	jmp	.LBB289_66
.LBB289_18:                             # %if.end36
                                        #   in Loop: Header=BB289_9 Depth=2
	jmp	.LBB289_9
.LBB289_19:                             # %while.end
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB289_21
# %bb.20:                               # %if.then39
	jmp	.LBB289_62
.LBB289_21:                             # %if.end40
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB289_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB289_23:                             # %if.end44
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB289_24:                             # %for.cond
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB289_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB289_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB289_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB289_24
.LBB289_27:                             # %for.end
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB289_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB289_29:                             # %if.end53
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB289_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB289_32
# %bb.31:                               # %if.then60
	jmp	.LBB289_33
.LBB289_32:                             # %if.end61
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_5
.LBB289_33:                             # %while.end62
	jmp	.LBB289_34
.LBB289_34:                             # %closeok
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_36
# %bb.35:                               # %if.then65
	jmp	.LBB289_66
.LBB289_36:                             # %if.end66
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB289_38
# %bb.37:                               # %if.then70
	jmp	.LBB289_66
.LBB289_38:                             # %if.end71
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_40
# %bb.39:                               # %if.then74
	jmp	.LBB289_66
.LBB289_40:                             # %if.end75
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB289_42
# %bb.41:                               # %if.then79
	jmp	.LBB289_66
.LBB289_42:                             # %if.end80
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB289_46
# %bb.43:                               # %if.then83
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB289_45
# %bb.44:                               # %if.then87
	jmp	.LBB289_66
.LBB289_45:                             # %if.end88
	jmp	.LBB289_46
.LBB289_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB289_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB289_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB289_80
.LBB289_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB289_61
# %bb.50:                               # %if.then96
	movq	-24(%rbp), %rdi
	callq	rewind
.LBB289_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB289_53
# %bb.52:                               # %if.then100
	jmp	.LBB289_60
.LBB289_53:                             # %if.end101
                                        #   in Loop: Header=BB289_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_55
# %bb.54:                               # %if.then107
	jmp	.LBB289_66
.LBB289_55:                             # %if.end108
                                        #   in Loop: Header=BB289_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB289_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB289_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB289_57:                             # %if.end115
                                        #   in Loop: Header=BB289_51 Depth=1
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB289_59
# %bb.58:                               # %if.then118
	jmp	.LBB289_66
.LBB289_59:                             # %if.end119
                                        #   in Loop: Header=BB289_51 Depth=1
	jmp	.LBB289_51
.LBB289_60:                             # %while.end120
	jmp	.LBB289_34
.LBB289_61:                             # %if.end121
	jmp	.LBB289_62
.LBB289_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB289_79
# %bb.63:                               # %errhandler
	movq	.LJTI289_0(,%rax,8), %rax
	jmpq	*%rax
.LBB289_64:                             # %sw.bb
	callq	configError
.LBB289_65:                             # %sw.bb122
	jmp	.LBB289_66
.LBB289_66:                             # %errhandler_io
	callq	ioError
.LBB289_67:                             # %sw.bb123
	callq	crcError
.LBB289_68:                             # %sw.bb124
	callq	outOfMemory
.LBB289_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB289_70:                             # %sw.bb126
	movq	-24(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB289_72
# %bb.71:                               # %if.then129
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB289_72:                             # %if.end131
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB289_74
# %bb.73:                               # %if.then134
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB289_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB289_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB289_80
.LBB289_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB289_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB289_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB289_80
.LBB289_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB289_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$97565684, -68(%rbp)    # imm = 0x5D0BBF4
	jne	.LBB289_82
.LBB289_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_81
.Lfunc_end289:
	.size	uncompressStream.247, .Lfunc_end289-uncompressStream.247
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI289_0:
	.quad	.LBB289_64
	.quad	.LBB289_79
	.quad	.LBB289_69
	.quad	.LBB289_65
	.quad	.LBB289_70
	.quad	.LBB289_67
	.quad	.LBB289_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.248
	.type	addFlagsFromEnvVar.248,@function
addFlagsFromEnvVar.248:                 # @addFlagsFromEnvVar.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$582792251, -24(%rbp)   # imm = 0x22BCB43B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB290_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB290_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_5 Depth 2
                                        #     Child Loop BB290_8 Depth 2
                                        #     Child Loop BB290_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB290_4
# %bb.3:                                # %if.then3
	jmp	.LBB290_21
.LBB290_4:                              # %if.end
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB290_5:                              # %while.cond4
                                        #   Parent Loop BB290_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB290_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB290_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB290_5
.LBB290_7:                              # %while.end
                                        #   in Loop: Header=BB290_2 Depth=1
	jmp	.LBB290_8
.LBB290_8:                              # %while.cond12
                                        #   Parent Loop BB290_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB290_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB290_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB290_10:                             # %land.end
                                        #   in Loop: Header=BB290_8 Depth=2
	testb	$1, %al
	jne	.LBB290_11
	jmp	.LBB290_12
.LBB290_11:                             # %while.body27
                                        #   in Loop: Header=BB290_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_8
.LBB290_12:                             # %while.end28
                                        #   in Loop: Header=BB290_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB290_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB290_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB290_15:                             # %if.end35
                                        #   in Loop: Header=BB290_2 Depth=1
	movl	$0, -8(%rbp)
.LBB290_16:                             # %for.cond
                                        #   Parent Loop BB290_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB290_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB290_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB290_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_16
.LBB290_19:                             # %for.end
                                        #   in Loop: Header=BB290_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB290_20:                             # %if.end46
                                        #   in Loop: Header=BB290_2 Depth=1
	jmp	.LBB290_2
.LBB290_21:                             # %while.end47
	jmp	.LBB290_22
.LBB290_22:                             # %if.end48
	cmpl	$582792251, -24(%rbp)   # imm = 0x22BCB43B
	jne	.LBB290_24
.LBB290_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_23
.Lfunc_end290:
	.size	addFlagsFromEnvVar.248, .Lfunc_end290-addFlagsFromEnvVar.248
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_qrm10.249
	.type	uInt64_qrm10.249,@function
uInt64_qrm10.249:                       # @uInt64_qrm10.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1187500633, -24(%rbp)  # imm = 0x46C7D259
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$7, -12(%rbp)
.LBB291_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -12(%rbp)
	jl	.LBB291_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB291_1 Depth=1
	movl	-16(%rbp), %eax
	shll	$8, %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	movl	$10, %ecx
	divl	%ecx
	movq	-32(%rbp), %rdx
	movslq	-12(%rbp), %rsi
	movb	%al, (%rdx,%rsi)
	movl	-20(%rbp), %eax
	xorl	%edx, %edx
	divl	%ecx
	movl	%edx, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB291_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB291_1
.LBB291_4:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1187500633, -24(%rbp)  # imm = 0x46C7D259
	jne	.LBB291_6
.LBB291_5:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_5
.Lfunc_end291:
	.size	uInt64_qrm10.249, .Lfunc_end291-uInt64_qrm10.249
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.250
	.type	testf.250,@function
testf.250:                              # @testf.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1828702970, -44(%rbp)  # imm = 0x6CFFCAFA
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB292_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB292_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB292_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB292_6
	jmp	.LBB292_4
.LBB292_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB292_8
	jmp	.LBB292_5
.LBB292_5:                              # %if.end
	subl	$3, %eax
	je	.LBB292_7
	jmp	.LBB292_9
.LBB292_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB292_9
.LBB292_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB292_9
.LBB292_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB292_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB292_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB292_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB292_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB292_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB292_37
.LBB292_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB292_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB292_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB292_37
.LBB292_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB292_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB292_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB292_37
.LBB292_20:                             # %if.end30
	jmp	.LBB292_21
.LBB292_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB292_23
	jmp	.LBB292_22
.LBB292_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB292_26
	jmp	.LBB292_29
.LBB292_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB292_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB292_37
.LBB292_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB292_30
.LBB292_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB292_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB292_37
.LBB292_28:                             # %if.end48
	jmp	.LBB292_30
.LBB292_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB292_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB292_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB292_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB292_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB292_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB292_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB292_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB292_37:                             # %if.end67
	cmpl	$1828702970, -44(%rbp)  # imm = 0x6CFFCAFA
	jne	.LBB292_39
.LBB292_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_38
.Lfunc_end292:
	.size	testf.250, .Lfunc_end292-testf.250
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.251 # -- Begin function fopen_output_safely.251
	.p2align	4, 0x90
	.type	fopen_output_safely.251,@function
fopen_output_safely.251:                # @fopen_output_safely.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2067801934, -16(%rbp)  # imm = 0x7B40274E
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB293_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB293_5
.LBB293_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB293_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB293_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB293_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$2067801934, -16(%rbp)  # imm = 0x7B40274E
	jne	.LBB293_7
.LBB293_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_6
.Lfunc_end293:
	.size	fopen_output_safely.251, .Lfunc_end293-fopen_output_safely.251
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.252
	.type	uncompressStream.252,@function
uncompressStream.252:                   # @uncompressStream.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1803549850, -68(%rbp)  # imm = 0x6B7FFC9A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_2
# %bb.1:                                # %if.then
	jmp	.LBB294_66
.LBB294_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_4
# %bb.3:                                # %if.then3
	jmp	.LBB294_66
.LBB294_4:                              # %if.end4
	jmp	.LBB294_5
.LBB294_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_9 Depth 2
                                        #     Child Loop BB294_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB294_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB294_8
.LBB294_7:                              # %if.then9
	jmp	.LBB294_62
.LBB294_8:                              # %if.end10
                                        #   in Loop: Header=BB294_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB294_9:                              # %while.cond11
                                        #   Parent Loop BB294_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB294_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB294_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB294_12
# %bb.11:                               # %if.then19
	jmp	.LBB294_49
.LBB294_12:                             # %if.end20
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB294_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB294_16
.LBB294_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB294_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB294_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB294_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB294_16:                             # %if.end32
                                        #   in Loop: Header=BB294_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_18
# %bb.17:                               # %if.then35
	jmp	.LBB294_66
.LBB294_18:                             # %if.end36
                                        #   in Loop: Header=BB294_9 Depth=2
	jmp	.LBB294_9
.LBB294_19:                             # %while.end
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB294_21
# %bb.20:                               # %if.then39
	jmp	.LBB294_62
.LBB294_21:                             # %if.end40
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB294_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB294_23:                             # %if.end44
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB294_24:                             # %for.cond
                                        #   Parent Loop BB294_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB294_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB294_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB294_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB294_24
.LBB294_27:                             # %for.end
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB294_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB294_29:                             # %if.end53
                                        #   in Loop: Header=BB294_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB294_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB294_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB294_32
# %bb.31:                               # %if.then60
	jmp	.LBB294_33
.LBB294_32:                             # %if.end61
                                        #   in Loop: Header=BB294_5 Depth=1
	jmp	.LBB294_5
.LBB294_33:                             # %while.end62
	jmp	.LBB294_34
.LBB294_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_36
# %bb.35:                               # %if.then65
	jmp	.LBB294_66
.LBB294_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB294_38
# %bb.37:                               # %if.then70
	jmp	.LBB294_66
.LBB294_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_40
# %bb.39:                               # %if.then74
	jmp	.LBB294_66
.LBB294_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB294_42
# %bb.41:                               # %if.then79
	jmp	.LBB294_66
.LBB294_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB294_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB294_45
# %bb.44:                               # %if.then87
	jmp	.LBB294_66
.LBB294_45:                             # %if.end88
	jmp	.LBB294_46
.LBB294_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB294_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB294_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB294_80
.LBB294_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB294_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB294_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB294_53
# %bb.52:                               # %if.then100
	jmp	.LBB294_60
.LBB294_53:                             # %if.end101
                                        #   in Loop: Header=BB294_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_55
# %bb.54:                               # %if.then107
	jmp	.LBB294_66
.LBB294_55:                             # %if.end108
                                        #   in Loop: Header=BB294_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB294_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB294_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB294_57:                             # %if.end115
                                        #   in Loop: Header=BB294_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB294_59
# %bb.58:                               # %if.then118
	jmp	.LBB294_66
.LBB294_59:                             # %if.end119
                                        #   in Loop: Header=BB294_51 Depth=1
	jmp	.LBB294_51
.LBB294_60:                             # %while.end120
	jmp	.LBB294_34
.LBB294_61:                             # %if.end121
	jmp	.LBB294_62
.LBB294_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB294_79
# %bb.63:                               # %errhandler
	movq	.LJTI294_0(,%rax,8), %rax
	jmpq	*%rax
.LBB294_64:                             # %sw.bb
	callq	configError
.LBB294_65:                             # %sw.bb122
	jmp	.LBB294_66
.LBB294_66:                             # %errhandler_io
	callq	ioError
.LBB294_67:                             # %sw.bb123
	callq	crcError
.LBB294_68:                             # %sw.bb124
	callq	outOfMemory
.LBB294_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB294_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB294_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB294_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB294_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB294_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB294_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB294_80
.LBB294_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB294_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB294_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB294_80
.LBB294_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB294_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1803549850, -68(%rbp)  # imm = 0x6B7FFC9A
	jne	.LBB294_82
.LBB294_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_81
.Lfunc_end294:
	.size	uncompressStream.252, .Lfunc_end294-uncompressStream.252
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI294_0:
	.quad	.LBB294_64
	.quad	.LBB294_79
	.quad	.LBB294_69
	.quad	.LBB294_65
	.quad	.LBB294_70
	.quad	.LBB294_67
	.quad	.LBB294_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.253
	.type	snocString.253,@function
snocString.253:                         # @snocString.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1267220911, -44(%rbp)  # imm = 0x4B8841AF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB295_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB295_6
.LBB295_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB295_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB295_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB295_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB295_3
.LBB295_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB295_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1267220911, -44(%rbp)  # imm = 0x4B8841AF
	jne	.LBB295_8
.LBB295_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_7
.Lfunc_end295:
	.size	snocString.253, .Lfunc_end295-snocString.253
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.254
.LCPI296_0:
	.quad	4636737291354636288     # double 100
.LCPI296_1:
	.quad	4607182418800017408     # double 1
.LCPI296_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.254,@function
compressStream.254:                     # @compressStream.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1849638307, -76(%rbp)  # imm = 0x6E3F3DA3
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB296_2
# %bb.1:                                # %if.then
	jmp	.LBB296_46
.LBB296_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB296_4
# %bb.3:                                # %if.then3
	jmp	.LBB296_46
.LBB296_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB296_6
# %bb.5:                                # %if.then6
	jmp	.LBB296_40
.LBB296_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB296_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB296_8:                              # %if.end11
	jmp	.LBB296_9
.LBB296_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB296_11
# %bb.10:                               # %if.then14
	jmp	.LBB296_18
.LBB296_11:                             # %if.end15
                                        #   in Loop: Header=BB296_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB296_13
# %bb.12:                               # %if.then19
	jmp	.LBB296_46
.LBB296_13:                             # %if.end20
                                        #   in Loop: Header=BB296_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB296_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB296_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB296_15:                             # %if.end25
                                        #   in Loop: Header=BB296_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB296_17
# %bb.16:                               # %if.then28
	jmp	.LBB296_40
.LBB296_17:                             # %if.end29
                                        #   in Loop: Header=BB296_9 Depth=1
	jmp	.LBB296_9
.LBB296_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB296_20
# %bb.19:                               # %if.then32
	jmp	.LBB296_40
.LBB296_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB296_22
# %bb.21:                               # %if.then36
	jmp	.LBB296_46
.LBB296_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB296_24
# %bb.23:                               # %if.then41
	jmp	.LBB296_46
.LBB296_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB296_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB296_27
# %bb.26:                               # %if.then49
	jmp	.LBB296_46
.LBB296_27:                             # %if.end50
	jmp	.LBB296_28
.LBB296_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB296_30
# %bb.29:                               # %if.then54
	jmp	.LBB296_46
.LBB296_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB296_32
# %bb.31:                               # %if.then59
	jmp	.LBB296_46
.LBB296_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB296_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB296_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB296_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB296_37
.LBB296_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-40(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI296_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI296_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI296_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB296_37:                             # %if.end80
	jmp	.LBB296_38
.LBB296_38:                             # %if.end81
	cmpl	$1849638307, -76(%rbp)  # imm = 0x6E3F3DA3
	jne	.LBB296_48
.LBB296_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-44(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-40(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB296_43
	jmp	.LBB296_41
.LBB296_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB296_45
	jmp	.LBB296_42
.LBB296_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB296_44
	jmp	.LBB296_47
.LBB296_43:                             # %sw.bb
	callq	configError
.LBB296_44:                             # %sw.bb82
	callq	outOfMemory
.LBB296_45:                             # %sw.bb83
	jmp	.LBB296_46
.LBB296_46:                             # %errhandler_io
	callq	ioError
.LBB296_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB296_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB296_39
.Lfunc_end296:
	.size	compressStream.254, .Lfunc_end296-compressStream.254
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.255
.LCPI297_0:
	.quad	4636737291354636288     # double 100
.LCPI297_1:
	.quad	4607182418800017408     # double 1
.LCPI297_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.255,@function
compressStream.255:                     # @compressStream.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$1612998159, -76(%rbp)  # imm = 0x6024660F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -56(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB297_2
# %bb.1:                                # %if.then
	jmp	.LBB297_46
.LBB297_2:                              # %if.end
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB297_4
# %bb.3:                                # %if.then3
	jmp	.LBB297_46
.LBB297_4:                              # %if.end4
	movq	-24(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB297_6
# %bb.5:                                # %if.then6
	jmp	.LBB297_40
.LBB297_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB297_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB297_8:                              # %if.end11
	jmp	.LBB297_9
.LBB297_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB297_11
# %bb.10:                               # %if.then14
	jmp	.LBB297_18
.LBB297_11:                             # %if.end15
                                        #   in Loop: Header=BB297_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB297_13
# %bb.12:                               # %if.then19
	jmp	.LBB297_46
.LBB297_13:                             # %if.end20
                                        #   in Loop: Header=BB297_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB297_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB297_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB297_15:                             # %if.end25
                                        #   in Loop: Header=BB297_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB297_17
# %bb.16:                               # %if.then28
	jmp	.LBB297_40
.LBB297_17:                             # %if.end29
                                        #   in Loop: Header=BB297_9 Depth=1
	jmp	.LBB297_9
.LBB297_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB297_20
# %bb.19:                               # %if.then32
	jmp	.LBB297_40
.LBB297_20:                             # %if.end33
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB297_22
# %bb.21:                               # %if.then36
	jmp	.LBB297_46
.LBB297_22:                             # %if.end37
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB297_24
# %bb.23:                               # %if.then41
	jmp	.LBB297_46
.LBB297_24:                             # %if.end42
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB297_28
# %bb.25:                               # %if.then45
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB297_27
# %bb.26:                               # %if.then49
	jmp	.LBB297_46
.LBB297_27:                             # %if.end50
	jmp	.LBB297_28
.LBB297_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB297_30
# %bb.29:                               # %if.then54
	jmp	.LBB297_46
.LBB297_30:                             # %if.end55
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB297_32
# %bb.31:                               # %if.then59
	jmp	.LBB297_46
.LBB297_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB297_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB297_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB297_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB297_37
.LBB297_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-176(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-144(%rbp), %rcx
	leaq	-176(%rbp), %rdx
	vmovsd	.LCPI297_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI297_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI297_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB297_37:                             # %if.end80
	jmp	.LBB297_38
.LBB297_38:                             # %if.end81
	cmpl	$1612998159, -76(%rbp)  # imm = 0x6024660F
	jne	.LBB297_48
.LBB297_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB297_43
	jmp	.LBB297_41
.LBB297_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB297_45
	jmp	.LBB297_42
.LBB297_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB297_44
	jmp	.LBB297_47
.LBB297_43:                             # %sw.bb
	callq	configError
.LBB297_44:                             # %sw.bb82
	callq	outOfMemory
.LBB297_45:                             # %sw.bb83
	jmp	.LBB297_46
.LBB297_46:                             # %errhandler_io
	callq	ioError
.LBB297_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB297_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB297_39
.Lfunc_end297:
	.size	compressStream.255, .Lfunc_end297-compressStream.255
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.256
	.type	notAStandardFile.256,@function
notAStandardFile.256:                   # @notAStandardFile.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1888279510, -20(%rbp)  # imm = 0x708CDBD6
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB298_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB298_5
.LBB298_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB298_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB298_5
.LBB298_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB298_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1888279510, -20(%rbp)  # imm = 0x708CDBD6
	jne	.LBB298_7
.LBB298_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_6
.Lfunc_end298:
	.size	notAStandardFile.256, .Lfunc_end298-notAStandardFile.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.257
	.type	testf.257,@function
testf.257:                              # @testf.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$307610690, -44(%rbp)   # imm = 0x1255C442
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB299_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB299_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB299_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB299_6
	jmp	.LBB299_4
.LBB299_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB299_8
	jmp	.LBB299_5
.LBB299_5:                              # %if.end
	subl	$3, %eax
	je	.LBB299_7
	jmp	.LBB299_9
.LBB299_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB299_9
.LBB299_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB299_9
.LBB299_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB299_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB299_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB299_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB299_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB299_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB299_37
.LBB299_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB299_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB299_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB299_37
.LBB299_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB299_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB299_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB299_37
.LBB299_20:                             # %if.end30
	jmp	.LBB299_21
.LBB299_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB299_23
	jmp	.LBB299_22
.LBB299_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB299_26
	jmp	.LBB299_29
.LBB299_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB299_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB299_37
.LBB299_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB299_30
.LBB299_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB299_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB299_37
.LBB299_28:                             # %if.end48
	jmp	.LBB299_30
.LBB299_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB299_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB299_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB299_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB299_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB299_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB299_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB299_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB299_37:                             # %if.end67
	cmpl	$307610690, -44(%rbp)   # imm = 0x1255C442
	jne	.LBB299_39
.LBB299_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_38
.Lfunc_end299:
	.size	testf.257, .Lfunc_end299-testf.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.258
	.type	compress.258,@function
compress.258:                           # @compress.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1799788812, -64(%rbp)  # imm = 0x6B46990C
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB300_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB300_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB300_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB300_6
	jmp	.LBB300_4
.LBB300_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB300_8
	jmp	.LBB300_5
.LBB300_5:                              # %if.end
	subl	$3, %eax
	je	.LBB300_7
	jmp	.LBB300_9
.LBB300_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB300_9
.LBB300_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB300_9
.LBB300_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB300_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB300_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB300_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB300_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB300_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB300_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB300_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB300_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB300_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB300_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB300_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB300_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB300_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_23:                             # %if.end34
                                        #   in Loop: Header=BB300_18 Depth=1
	jmp	.LBB300_24
.LBB300_24:                             # %for.inc
                                        #   in Loop: Header=BB300_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB300_18
.LBB300_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB300_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB300_30
.LBB300_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB300_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_29:                             # %if.end45
	jmp	.LBB300_30
.LBB300_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB300_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB300_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB300_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB300_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB300_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB300_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB300_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB300_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB300_41
.LBB300_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_41:                             # %if.end72
	jmp	.LBB300_42
.LBB300_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB300_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB300_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB300_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB300_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB300_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB300_51
	jmp	.LBB300_49
.LBB300_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB300_54
	jmp	.LBB300_50
.LBB300_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB300_61
	jmp	.LBB300_70
.LBB300_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB300_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_53:                             # %if.end98
	jmp	.LBB300_71
.LBB300_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB300_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB300_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB300_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB300_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_60:                             # %if.end119
	jmp	.LBB300_71
.LBB300_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB300_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB300_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB300_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB300_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB300_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB300_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB300_80
.LBB300_69:                             # %if.end146
	jmp	.LBB300_71
.LBB300_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB300_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB300_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB300_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB300_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB300_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB300_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB300_77:                             # %if.end163
	jmp	.LBB300_78
.LBB300_78:                             # %if.end164
	jmp	.LBB300_79
.LBB300_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB300_80:                             # %return
	cmpl	$1799788812, -64(%rbp)  # imm = 0x6B46990C
	jne	.LBB300_82
.LBB300_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_81
.Lfunc_end300:
	.size	compress.258, .Lfunc_end300-compress.258
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.259
	.type	uInt64_toAscii.259,@function
uInt64_toAscii.259:                     # @uInt64_toAscii.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$40161228, -16(%rbp)    # imm = 0x264CFCC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB301_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB301_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB301_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB301_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB301_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB301_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB301_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB301_4
.LBB301_7:                              # %for.end
	cmpl	$40161228, -16(%rbp)    # imm = 0x264CFCC
	jne	.LBB301_9
.LBB301_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_8
.Lfunc_end301:
	.size	uInt64_toAscii.259, .Lfunc_end301-uInt64_toAscii.259
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.260
	.type	compress.260,@function
compress.260:                           # @compress.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1396582841, -64(%rbp)  # imm = 0x533E29B9
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB302_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB302_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB302_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB302_6
	jmp	.LBB302_4
.LBB302_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB302_8
	jmp	.LBB302_5
.LBB302_5:                              # %if.end
	subl	$3, %eax
	je	.LBB302_7
	jmp	.LBB302_9
.LBB302_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB302_9
.LBB302_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB302_9
.LBB302_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB302_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB302_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB302_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB302_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB302_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB302_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB302_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB302_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB302_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB302_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB302_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB302_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB302_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_23:                             # %if.end34
                                        #   in Loop: Header=BB302_18 Depth=1
	jmp	.LBB302_24
.LBB302_24:                             # %for.inc
                                        #   in Loop: Header=BB302_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB302_18
.LBB302_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB302_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB302_30
.LBB302_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB302_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_29:                             # %if.end45
	jmp	.LBB302_30
.LBB302_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB302_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB302_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB302_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB302_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB302_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB302_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB302_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB302_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB302_41
.LBB302_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_41:                             # %if.end72
	jmp	.LBB302_42
.LBB302_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB302_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB302_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB302_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB302_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB302_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB302_51
	jmp	.LBB302_49
.LBB302_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB302_54
	jmp	.LBB302_50
.LBB302_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB302_61
	jmp	.LBB302_70
.LBB302_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB302_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_53:                             # %if.end98
	jmp	.LBB302_71
.LBB302_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB302_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB302_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB302_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB302_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_60:                             # %if.end119
	jmp	.LBB302_71
.LBB302_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB302_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB302_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB302_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB302_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB302_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB302_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB302_80
.LBB302_69:                             # %if.end146
	jmp	.LBB302_71
.LBB302_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB302_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB302_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB302_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB302_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB302_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -60(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB302_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB302_77:                             # %if.end163
	jmp	.LBB302_78
.LBB302_78:                             # %if.end164
	jmp	.LBB302_79
.LBB302_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB302_80:                             # %return
	cmpl	$1396582841, -64(%rbp)  # imm = 0x533E29B9
	jne	.LBB302_82
.LBB302_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_81
.Lfunc_end302:
	.size	compress.260, .Lfunc_end302-compress.260
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.261
	.type	snocString.261,@function
snocString.261:                         # @snocString.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$273276459, -44(%rbp)   # imm = 0x1049DE2B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB303_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB303_6
.LBB303_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB303_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB303_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB303_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB303_3
.LBB303_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB303_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$273276459, -44(%rbp)   # imm = 0x1049DE2B
	jne	.LBB303_8
.LBB303_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_7
.Lfunc_end303:
	.size	snocString.261, .Lfunc_end303-snocString.261
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.262
	.type	notAStandardFile.262,@function
notAStandardFile.262:                   # @notAStandardFile.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$7953383, -20(%rbp)     # imm = 0x795BE7
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB304_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB304_5
.LBB304_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB304_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB304_5
.LBB304_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB304_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$7953383, -20(%rbp)     # imm = 0x795BE7
	jne	.LBB304_7
.LBB304_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_6
.Lfunc_end304:
	.size	notAStandardFile.262, .Lfunc_end304-notAStandardFile.262
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.263
.LCPI305_0:
	.quad	4607182418800017408     # double 1
.LCPI305_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.263,@function
uInt64_to_double.263:                   # @uInt64_to_double.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI305_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$316367428, -28(%rbp)   # imm = 0x12DB6244
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB305_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB305_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB305_1 Depth=1
	vmovsd	.LCPI305_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_1
.LBB305_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$316367428, -28(%rbp)   # imm = 0x12DB6244
	jne	.LBB305_6
.LBB305_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB305_5
.Lfunc_end305:
	.size	uInt64_to_double.263, .Lfunc_end305-uInt64_to_double.263
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.264
.LCPI306_0:
	.quad	4607182418800017408     # double 1
.LCPI306_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.264,@function
uInt64_to_double.264:                   # @uInt64_to_double.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI306_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$849322040, -28(%rbp)   # imm = 0x329FA038
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB306_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB306_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB306_1 Depth=1
	vmovsd	.LCPI306_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB306_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB306_1
.LBB306_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$849322040, -28(%rbp)   # imm = 0x329FA038
	jne	.LBB306_6
.LBB306_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB306_5
.Lfunc_end306:
	.size	uInt64_to_double.264, .Lfunc_end306-uInt64_to_double.264
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.265
	.type	notAStandardFile.265,@function
notAStandardFile.265:                   # @notAStandardFile.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1821049994, -20(%rbp)  # imm = 0x6C8B048A
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB307_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB307_5
.LBB307_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB307_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB307_5
.LBB307_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB307_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$1821049994, -20(%rbp)  # imm = 0x6C8B048A
	jne	.LBB307_7
.LBB307_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_6
.Lfunc_end307:
	.size	notAStandardFile.265, .Lfunc_end307-notAStandardFile.265
	.cfi_endproc
                                        # -- End function
	.globl	fopen_output_safely.266 # -- Begin function fopen_output_safely.266
	.p2align	4, 0x90
	.type	fopen_output_safely.266,@function
fopen_output_safely.266:                # @fopen_output_safely.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$726433621, -16(%rbp)   # imm = 0x2B4C7F55
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-40(%rbp), %rdi
	movl	$193, %esi
	movl	$384, %edx              # imm = 0x180
	movb	$0, %al
	callq	open
	movl	%eax, -12(%rbp)
	cmpl	$-1, -12(%rbp)
	jne	.LBB308_2
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	jmp	.LBB308_5
.LBB308_2:                              # %if.end
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	fdopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB308_4
# %bb.3:                                # %if.then3
	movl	-12(%rbp), %edi
	callq	close
.LBB308_4:                              # %if.end5
	movq	-32(%rbp), %rax
	movq	%rax, -24(%rbp)
.LBB308_5:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$726433621, -16(%rbp)   # imm = 0x2B4C7F55
	jne	.LBB308_7
.LBB308_6:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_6
.Lfunc_end308:
	.size	fopen_output_safely.266, .Lfunc_end308-fopen_output_safely.266
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.267
.LCPI309_0:
	.quad	4636737291354636288     # double 100
.LCPI309_1:
	.quad	4607182418800017408     # double 1
.LCPI309_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.267,@function
compressStream.267:                     # @compressStream.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$164596876, -76(%rbp)   # imm = 0x9CF8C8C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_2
# %bb.1:                                # %if.then
	jmp	.LBB309_46
.LBB309_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_4
# %bb.3:                                # %if.then3
	jmp	.LBB309_46
.LBB309_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB309_6
# %bb.5:                                # %if.then6
	jmp	.LBB309_40
.LBB309_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB309_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB309_8:                              # %if.end11
	jmp	.LBB309_9
.LBB309_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB309_11
# %bb.10:                               # %if.then14
	jmp	.LBB309_18
.LBB309_11:                             # %if.end15
                                        #   in Loop: Header=BB309_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_13
# %bb.12:                               # %if.then19
	jmp	.LBB309_46
.LBB309_13:                             # %if.end20
                                        #   in Loop: Header=BB309_9 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB309_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB309_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-36(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB309_15:                             # %if.end25
                                        #   in Loop: Header=BB309_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB309_17
# %bb.16:                               # %if.then28
	jmp	.LBB309_40
.LBB309_17:                             # %if.end29
                                        #   in Loop: Header=BB309_9 Depth=1
	jmp	.LBB309_9
.LBB309_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB309_20
# %bb.19:                               # %if.then32
	jmp	.LBB309_40
.LBB309_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_22
# %bb.21:                               # %if.then36
	jmp	.LBB309_46
.LBB309_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB309_24
# %bb.23:                               # %if.then41
	jmp	.LBB309_46
.LBB309_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB309_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB309_27
# %bb.26:                               # %if.then49
	jmp	.LBB309_46
.LBB309_27:                             # %if.end50
	jmp	.LBB309_28
.LBB309_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB309_30
# %bb.29:                               # %if.then54
	jmp	.LBB309_46
.LBB309_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB309_32
# %bb.31:                               # %if.then59
	jmp	.LBB309_46
.LBB309_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB309_38
# %bb.33:                               # %if.then63
	cmpl	$0, -16(%rbp)
	jne	.LBB309_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -12(%rbp)
	jne	.LBB309_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB309_37
.LBB309_36:                             # %if.else
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-44(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI309_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI309_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI309_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB309_37:                             # %if.end80
	jmp	.LBB309_38
.LBB309_38:                             # %if.end81
	cmpl	$164596876, -76(%rbp)   # imm = 0x9CF8C8C
	jne	.LBB309_48
.LBB309_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-16(%rbp), %rcx
	leaq	-12(%rbp), %r8
	leaq	-44(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB309_43
	jmp	.LBB309_41
.LBB309_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB309_45
	jmp	.LBB309_42
.LBB309_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB309_44
	jmp	.LBB309_47
.LBB309_43:                             # %sw.bb
	callq	configError
.LBB309_44:                             # %sw.bb82
	callq	outOfMemory
.LBB309_45:                             # %sw.bb83
	jmp	.LBB309_46
.LBB309_46:                             # %errhandler_io
	callq	ioError
.LBB309_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB309_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB309_39
.Lfunc_end309:
	.size	compressStream.267, .Lfunc_end309-compressStream.267
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.268
	.type	testf.268,@function
testf.268:                              # @testf.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1391043668, -44(%rbp)  # imm = 0x52E9A454
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB310_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB310_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB310_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB310_6
	jmp	.LBB310_4
.LBB310_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB310_8
	jmp	.LBB310_5
.LBB310_5:                              # %if.end
	subl	$3, %eax
	je	.LBB310_7
	jmp	.LBB310_9
.LBB310_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB310_9
.LBB310_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB310_9
.LBB310_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB310_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB310_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB310_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB310_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB310_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB310_37
.LBB310_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB310_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB310_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB310_37
.LBB310_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB310_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB310_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB310_37
.LBB310_20:                             # %if.end30
	jmp	.LBB310_21
.LBB310_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB310_23
	jmp	.LBB310_22
.LBB310_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB310_26
	jmp	.LBB310_29
.LBB310_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB310_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB310_37
.LBB310_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB310_30
.LBB310_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB310_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB310_37
.LBB310_28:                             # %if.end48
	jmp	.LBB310_30
.LBB310_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB310_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB310_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB310_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB310_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB310_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB310_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB310_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB310_37:                             # %if.end67
	cmpl	$1391043668, -44(%rbp)  # imm = 0x52E9A454
	jne	.LBB310_39
.LBB310_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_38
.Lfunc_end310:
	.size	testf.268, .Lfunc_end310-testf.268
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.269
.LCPI311_0:
	.quad	4607182418800017408     # double 1
.LCPI311_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.269,@function
uInt64_to_double.269:                   # @uInt64_to_double.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI311_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$726558286, -28(%rbp)   # imm = 0x2B4E664E
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB311_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB311_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB311_1 Depth=1
	vmovsd	.LCPI311_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB311_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_1
.LBB311_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$726558286, -28(%rbp)   # imm = 0x2B4E664E
	jne	.LBB311_6
.LBB311_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB311_5
.Lfunc_end311:
	.size	uInt64_to_double.269, .Lfunc_end311-uInt64_to_double.269
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.270
	.type	uncompressStream.270,@function
uncompressStream.270:                   # @uncompressStream.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1549484480, -68(%rbp)  # imm = 0x5C5B41C0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_2
# %bb.1:                                # %if.then
	jmp	.LBB312_66
.LBB312_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_4
# %bb.3:                                # %if.then3
	jmp	.LBB312_66
.LBB312_4:                              # %if.end4
	jmp	.LBB312_5
.LBB312_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB312_9 Depth 2
                                        #     Child Loop BB312_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB312_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB312_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB312_8
.LBB312_7:                              # %if.then9
	jmp	.LBB312_62
.LBB312_8:                              # %if.end10
                                        #   in Loop: Header=BB312_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB312_9:                              # %while.cond11
                                        #   Parent Loop BB312_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB312_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB312_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB312_12
# %bb.11:                               # %if.then19
	jmp	.LBB312_49
.LBB312_12:                             # %if.end20
                                        #   in Loop: Header=BB312_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB312_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB312_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB312_16
.LBB312_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB312_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB312_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB312_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB312_16:                             # %if.end32
                                        #   in Loop: Header=BB312_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_18
# %bb.17:                               # %if.then35
	jmp	.LBB312_66
.LBB312_18:                             # %if.end36
                                        #   in Loop: Header=BB312_9 Depth=2
	jmp	.LBB312_9
.LBB312_19:                             # %while.end
                                        #   in Loop: Header=BB312_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB312_21
# %bb.20:                               # %if.then39
	jmp	.LBB312_62
.LBB312_21:                             # %if.end40
                                        #   in Loop: Header=BB312_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB312_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB312_23:                             # %if.end44
                                        #   in Loop: Header=BB312_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -36(%rbp)
.LBB312_24:                             # %for.cond
                                        #   Parent Loop BB312_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB312_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB312_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB312_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB312_24
.LBB312_27:                             # %for.end
                                        #   in Loop: Header=BB312_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB312_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB312_29:                             # %if.end53
                                        #   in Loop: Header=BB312_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB312_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB312_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB312_32
# %bb.31:                               # %if.then60
	jmp	.LBB312_33
.LBB312_32:                             # %if.end61
                                        #   in Loop: Header=BB312_5 Depth=1
	jmp	.LBB312_5
.LBB312_33:                             # %while.end62
	jmp	.LBB312_34
.LBB312_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_36
# %bb.35:                               # %if.then65
	jmp	.LBB312_66
.LBB312_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB312_38
# %bb.37:                               # %if.then70
	jmp	.LBB312_66
.LBB312_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_40
# %bb.39:                               # %if.then74
	jmp	.LBB312_66
.LBB312_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB312_42
# %bb.41:                               # %if.then79
	jmp	.LBB312_66
.LBB312_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB312_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB312_45
# %bb.44:                               # %if.then87
	jmp	.LBB312_66
.LBB312_45:                             # %if.end88
	jmp	.LBB312_46
.LBB312_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB312_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB312_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB312_80
.LBB312_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB312_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB312_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB312_53
# %bb.52:                               # %if.then100
	jmp	.LBB312_60
.LBB312_53:                             # %if.end101
                                        #   in Loop: Header=BB312_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_55
# %bb.54:                               # %if.then107
	jmp	.LBB312_66
.LBB312_55:                             # %if.end108
                                        #   in Loop: Header=BB312_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB312_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB312_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB312_57:                             # %if.end115
                                        #   in Loop: Header=BB312_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB312_59
# %bb.58:                               # %if.then118
	jmp	.LBB312_66
.LBB312_59:                             # %if.end119
                                        #   in Loop: Header=BB312_51 Depth=1
	jmp	.LBB312_51
.LBB312_60:                             # %while.end120
	jmp	.LBB312_34
.LBB312_61:                             # %if.end121
	jmp	.LBB312_62
.LBB312_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB312_79
# %bb.63:                               # %errhandler
	movq	.LJTI312_0(,%rax,8), %rax
	jmpq	*%rax
.LBB312_64:                             # %sw.bb
	callq	configError
.LBB312_65:                             # %sw.bb122
	jmp	.LBB312_66
.LBB312_66:                             # %errhandler_io
	callq	ioError
.LBB312_67:                             # %sw.bb123
	callq	crcError
.LBB312_68:                             # %sw.bb124
	callq	outOfMemory
.LBB312_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB312_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB312_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB312_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB312_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB312_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB312_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB312_80
.LBB312_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB312_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB312_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB312_80
.LBB312_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB312_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1549484480, -68(%rbp)  # imm = 0x5C5B41C0
	jne	.LBB312_82
.LBB312_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_81
.Lfunc_end312:
	.size	uncompressStream.270, .Lfunc_end312-uncompressStream.270
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI312_0:
	.quad	.LBB312_64
	.quad	.LBB312_79
	.quad	.LBB312_69
	.quad	.LBB312_65
	.quad	.LBB312_70
	.quad	.LBB312_67
	.quad	.LBB312_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function countHardLinks.271
	.type	countHardLinks.271,@function
countHardLinks.271:                     # @countHardLinks.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$1021861426, -16(%rbp)  # imm = 0x3CE85E32
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB313_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB313_3
.LBB313_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB313_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1021861426, -16(%rbp)  # imm = 0x3CE85E32
	jne	.LBB313_5
.LBB313_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_4
.Lfunc_end313:
	.size	countHardLinks.271, .Lfunc_end313-countHardLinks.271
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.272
	.type	testf.272,@function
testf.272:                              # @testf.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$659794978, -44(%rbp)   # imm = 0x2753AC22
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB314_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB314_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB314_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB314_6
	jmp	.LBB314_4
.LBB314_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB314_8
	jmp	.LBB314_5
.LBB314_5:                              # %if.end
	subl	$3, %eax
	je	.LBB314_7
	jmp	.LBB314_9
.LBB314_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB314_9
.LBB314_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB314_9
.LBB314_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB314_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB314_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB314_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB314_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB314_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB314_37
.LBB314_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB314_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB314_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB314_37
.LBB314_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB314_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB314_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB314_37
.LBB314_20:                             # %if.end30
	jmp	.LBB314_21
.LBB314_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB314_23
	jmp	.LBB314_22
.LBB314_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB314_26
	jmp	.LBB314_29
.LBB314_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB314_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB314_37
.LBB314_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB314_30
.LBB314_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB314_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB314_37
.LBB314_28:                             # %if.end48
	jmp	.LBB314_30
.LBB314_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB314_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB314_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB314_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB314_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB314_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB314_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB314_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB314_37:                             # %if.end67
	cmpl	$659794978, -44(%rbp)   # imm = 0x2753AC22
	jne	.LBB314_39
.LBB314_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_38
.Lfunc_end314:
	.size	testf.272, .Lfunc_end314-testf.272
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.273
	.type	testf.273,@function
testf.273:                              # @testf.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$1044235993, -44(%rbp)  # imm = 0x3E3DC6D9
	movq	%rdi, -40(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -40(%rbp)
	jne	.LBB315_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB315_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB315_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB315_6
	jmp	.LBB315_4
.LBB315_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB315_8
	jmp	.LBB315_5
.LBB315_5:                              # %if.end
	subl	$3, %eax
	je	.LBB315_7
	jmp	.LBB315_9
.LBB315_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB315_9
.LBB315_7:                              # %sw.bb2
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB315_9
.LBB315_8:                              # %sw.bb3
	movq	-40(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB315_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB315_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB315_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB315_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB315_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB315_37
.LBB315_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB315_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB315_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB315_37
.LBB315_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB315_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB315_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB315_37
.LBB315_20:                             # %if.end30
	jmp	.LBB315_21
.LBB315_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB315_23
	jmp	.LBB315_22
.LBB315_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB315_26
	jmp	.LBB315_29
.LBB315_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB315_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB315_37
.LBB315_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	jmp	.LBB315_30
.LBB315_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	jne	.LBB315_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB315_37
.LBB315_28:                             # %if.end48
	jmp	.LBB315_30
.LBB315_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB315_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB315_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB315_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-32(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB315_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB315_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB315_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB315_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB315_37:                             # %if.end67
	cmpl	$1044235993, -44(%rbp)  # imm = 0x3E3DC6D9
	jne	.LBB315_39
.LBB315_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_38
.Lfunc_end315:
	.size	testf.273, .Lfunc_end315-testf.273
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compress.274
	.type	compress.274,@function
compress.274:                           # @compress.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$192, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$651101451, -60(%rbp)   # imm = 0x26CF050B
	movq	%rdi, -56(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -56(%rbp)
	jne	.LBB316_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB316_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.53, %rdi
	callq	panic
.LBB316_3:                              # %if.end
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB316_6
	jmp	.LBB316_4
.LBB316_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB316_8
	jmp	.LBB316_5
.LBB316_5:                              # %if.end
	subl	$3, %eax
	je	.LBB316_7
	jmp	.LBB316_9
.LBB316_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
	jmp	.LBB316_9
.LBB316_7:                              # %sw.bb2
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movq	-56(%rbp), %rsi
	movabsq	$outName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.30, %rsi
	callq	strcat
	jmp	.LBB316_9
.LBB316_8:                              # %sw.bb3
	movq	-56(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	movabsq	$outName, %rdi
	movabsq	$.L.str.55, %rsi
	callq	copyFileName
.LBB316_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB316_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB316_14
# %bb.11:                               # %if.then7
	cmpb	$0, noisy
	je	.LBB316_13
# %bb.12:                               # %if.then9
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB316_13:                             # %if.end11
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_14:                             # %if.end12
	cmpl	$1, srcMode
	je	.LBB316_17
# %bb.15:                               # %land.lhs.true15
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB316_17
# %bb.16:                               # %if.then18
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_17:                             # %if.end22
	movl	$0, -20(%rbp)
.LBB316_18:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB316_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB316_18 Depth=1
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %rsi
	movabsq	$inName, %rdi
	callq	hasSuffix
	cmpb	$0, %al
	je	.LBB316_23
# %bb.20:                               # %if.then27
	cmpb	$0, noisy
	je	.LBB316_22
# %bb.21:                               # %if.then29
	movq	stderr, %rdi
	movq	progName, %rdx
	movslq	-20(%rbp), %rax
	movq	zSuffix(,%rax,8), %r8
	movabsq	$.L.str.58, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB316_22:                             # %if.end33
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_23:                             # %if.end34
                                        #   in Loop: Header=BB316_18 Depth=1
	jmp	.LBB316_24
.LBB316_24:                             # %for.inc
                                        #   in Loop: Header=BB316_18 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB316_18
.LBB316_25:                             # %for.end
	cmpl	$3, srcMode
	je	.LBB316_27
# %bb.26:                               # %lor.lhs.false
	cmpl	$2, srcMode
	jne	.LBB316_30
.LBB316_27:                             # %if.then39
	movabsq	$inName, %rdi
	leaq	-208(%rbp), %rsi
	callq	stat
	movl	-184(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB316_29
# %bb.28:                               # %if.then43
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_29:                             # %if.end45
	jmp	.LBB316_30
.LBB316_30:                             # %if.end46
	cmpl	$3, srcMode
	jne	.LBB316_36
# %bb.31:                               # %land.lhs.true49
	cmpb	$0, forceOverwrite
	jne	.LBB316_36
# %bb.32:                               # %land.lhs.true51
	movabsq	$inName, %rdi
	callq	notAStandardFile
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB316_36
# %bb.33:                               # %if.then55
	cmpb	$0, noisy
	je	.LBB316_35
# %bb.34:                               # %if.then57
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.60, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB316_35:                             # %if.end59
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_36:                             # %if.end60
	cmpl	$3, srcMode
	jne	.LBB316_42
# %bb.37:                               # %land.lhs.true63
	movabsq	$outName, %rdi
	callq	fileExists
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB316_42
# %bb.38:                               # %if.then67
	cmpb	$0, forceOverwrite
	je	.LBB316_40
# %bb.39:                               # %if.then69
	movabsq	$outName, %rdi
	callq	remove
	jmp	.LBB316_41
.LBB316_40:                             # %if.else
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.61, %rsi
	movabsq	$outName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_41:                             # %if.end72
	jmp	.LBB316_42
.LBB316_42:                             # %if.end73
	cmpl	$3, srcMode
	jne	.LBB316_46
# %bb.43:                               # %land.lhs.true76
	cmpb	$0, forceOverwrite
	jne	.LBB316_46
# %bb.44:                               # %land.lhs.true78
	movabsq	$inName, %rdi
	callq	countHardLinks
	movl	%eax, -44(%rbp)
	cmpl	$0, %eax
	jle	.LBB316_46
# %bb.45:                               # %if.then82
	movq	stderr, %rdi
	movq	progName, %rdx
	movl	-44(%rbp), %r8d
	movl	-44(%rbp), %eax
	cmpl	$1, %eax
	movabsq	$.L.str.63, %rax
	movabsq	$.L.str.34, %r9
	cmovgq	%rax, %r9
	movabsq	$.L.str.62, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_46:                             # %if.end86
	cmpl	$3, srcMode
	jne	.LBB316_48
# %bb.47:                               # %if.then89
	movabsq	$inName, %rdi
	callq	saveInputFileMetaInfo
.LBB316_48:                             # %if.end90
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB316_51
	jmp	.LBB316_49
.LBB316_49:                             # %if.end90
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB316_54
	jmp	.LBB316_50
.LBB316_50:                             # %if.end90
	subl	$3, %eax
	je	.LBB316_61
	jmp	.LBB316_70
.LBB316_51:                             # %sw.bb91
	movq	stdin, %rax
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB316_53
# %bb.52:                               # %if.then95
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_53:                             # %if.end98
	jmp	.LBB316_71
.LBB316_54:                             # %sw.bb99
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movq	stdout, %rax
	movq	%rax, -40(%rbp)
	movq	stdout, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB316_58
# %bb.55:                               # %if.then104
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.64, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB316_57
# %bb.56:                               # %if.then109
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB316_57:                             # %if.end111
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_58:                             # %if.end112
	cmpq	$0, -32(%rbp)
	jne	.LBB316_60
# %bb.59:                               # %if.then115
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_60:                             # %if.end119
	jmp	.LBB316_71
.LBB316_61:                             # %sw.bb120
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -32(%rbp)
	movabsq	$outName, %rdi
	movabsq	$.L.str.67, %rsi
	callq	fopen_output_safely
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB316_65
# %bb.62:                               # %if.then125
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.68, %rsi
	movq	%r14, %rdx
	movabsq	$outName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -32(%rbp)
	je	.LBB316_64
# %bb.63:                               # %if.then131
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB316_64:                             # %if.end133
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_65:                             # %if.end134
	cmpq	$0, -32(%rbp)
	jne	.LBB316_69
# %bb.66:                               # %if.then137
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.57, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	cmpq	$0, -40(%rbp)
	je	.LBB316_68
# %bb.67:                               # %if.then143
	movq	-40(%rbp), %rdi
	callq	fclose
.LBB316_68:                             # %if.end145
	movl	$1, %edi
	callq	setExit
	jmp	.LBB316_80
.LBB316_69:                             # %if.end146
	jmp	.LBB316_71
.LBB316_70:                             # %sw.default
	movabsq	$.L.str.69, %rdi
	callq	panic
.LBB316_71:                             # %sw.epilog147
	cmpl	$1, verbosity
	jl	.LBB316_73
# %bb.72:                               # %if.then150
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB316_73:                             # %if.end153
	movq	-40(%rbp), %rax
	movq	%rax, outputHandleJustInCase
	movb	$1, deleteOutputOnInterrupt
	movq	-32(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	compressStream
	movq	$0, outputHandleJustInCase
	cmpl	$3, srcMode
	jne	.LBB316_79
# %bb.74:                               # %if.then156
	movabsq	$outName, %rdi
	callq	applySavedMetaInfoToOutputFile
	movb	$0, deleteOutputOnInterrupt
	cmpb	$0, keepInputFiles
	jne	.LBB316_78
# %bb.75:                               # %if.then158
	movabsq	$inName, %rdi
	callq	remove
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB316_77
# %bb.76:                               # %if.then162
	callq	ioError
.LBB316_77:                             # %if.end163
	jmp	.LBB316_78
.LBB316_78:                             # %if.end164
	jmp	.LBB316_79
.LBB316_79:                             # %if.end165
	movb	$0, deleteOutputOnInterrupt
.LBB316_80:                             # %return
	cmpl	$651101451, -60(%rbp)   # imm = 0x26CF050B
	jne	.LBB316_82
.LBB316_81:
	addq	$192, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_81
.Lfunc_end316:
	.size	compress.274, .Lfunc_end316-compress.274
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.275
	.type	addFlagsFromEnvVar.275,@function
addFlagsFromEnvVar.275:                 # @addFlagsFromEnvVar.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1470813359, -24(%rbp)  # imm = 0x57AAD4AF
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	je	.LBB317_22
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB317_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_5 Depth 2
                                        #     Child Loop BB317_8 Depth 2
                                        #     Child Loop BB317_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB317_4
# %bb.3:                                # %if.then3
	jmp	.LBB317_21
.LBB317_4:                              # %if.end
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB317_5:                              # %while.cond4
                                        #   Parent Loop BB317_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB317_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB317_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB317_5
.LBB317_7:                              # %while.end
                                        #   in Loop: Header=BB317_2 Depth=1
	jmp	.LBB317_8
.LBB317_8:                              # %while.cond12
                                        #   Parent Loop BB317_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB317_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB317_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB317_10:                             # %land.end
                                        #   in Loop: Header=BB317_8 Depth=2
	testb	$1, %al
	jne	.LBB317_11
	jmp	.LBB317_12
.LBB317_11:                             # %while.body27
                                        #   in Loop: Header=BB317_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_8
.LBB317_12:                             # %while.end28
                                        #   in Loop: Header=BB317_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB317_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB317_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB317_15:                             # %if.end35
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	$0, -8(%rbp)
.LBB317_16:                             # %for.cond
                                        #   Parent Loop BB317_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB317_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB317_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB317_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB317_16
.LBB317_19:                             # %for.end
                                        #   in Loop: Header=BB317_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB317_20:                             # %if.end46
                                        #   in Loop: Header=BB317_2 Depth=1
	jmp	.LBB317_2
.LBB317_21:                             # %while.end47
	jmp	.LBB317_22
.LBB317_22:                             # %if.end48
	cmpl	$1470813359, -24(%rbp)  # imm = 0x57AAD4AF
	jne	.LBB317_24
.LBB317_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_23
.Lfunc_end317:
	.size	addFlagsFromEnvVar.275, .Lfunc_end317-addFlagsFromEnvVar.275
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.276
	.type	notAStandardFile.276,@function
notAStandardFile.276:                   # @notAStandardFile.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$357653417, -16(%rbp)   # imm = 0x15515BA9
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	je	.LBB318_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB318_5
.LBB318_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB318_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB318_5
.LBB318_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB318_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$357653417, -16(%rbp)   # imm = 0x15515BA9
	jne	.LBB318_7
.LBB318_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_6
.Lfunc_end318:
	.size	notAStandardFile.276, .Lfunc_end318-notAStandardFile.276
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.277
	.type	snocString.277,@function
snocString.277:                         # @snocString.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1360642663, -44(%rbp)  # imm = 0x5119C267
	movq	%rdi, -40(%rbp)
	movq	%rsi, -24(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB319_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB319_6
.LBB319_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB319_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB319_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB319_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB319_3
.LBB319_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB319_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1360642663, -44(%rbp)  # imm = 0x5119C267
	jne	.LBB319_8
.LBB319_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_7
.Lfunc_end319:
	.size	snocString.277, .Lfunc_end319-snocString.277
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.278
	.type	notAStandardFile.278,@function
notAStandardFile.278:                   # @notAStandardFile.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$858542149, -20(%rbp)   # imm = 0x332C5045
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB320_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB320_5
.LBB320_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB320_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB320_5
.LBB320_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB320_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$858542149, -20(%rbp)   # imm = 0x332C5045
	jne	.LBB320_7
.LBB320_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_6
.Lfunc_end320:
	.size	notAStandardFile.278, .Lfunc_end320-notAStandardFile.278
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.279
	.type	uncompressStream.279,@function
uncompressStream.279:                   # @uncompressStream.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$723519012, -68(%rbp)   # imm = 0x2B200624
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_2
# %bb.1:                                # %if.then
	jmp	.LBB321_66
.LBB321_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_4
# %bb.3:                                # %if.then3
	jmp	.LBB321_66
.LBB321_4:                              # %if.end4
	jmp	.LBB321_5
.LBB321_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB321_9 Depth 2
                                        #     Child Loop BB321_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB321_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB321_8
.LBB321_7:                              # %if.then9
	jmp	.LBB321_62
.LBB321_8:                              # %if.end10
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB321_9:                              # %while.cond11
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB321_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB321_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -40(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB321_12
# %bb.11:                               # %if.then19
	jmp	.LBB321_49
.LBB321_12:                             # %if.end20
                                        #   in Loop: Header=BB321_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB321_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB321_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB321_16
.LBB321_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB321_9 Depth=2
	cmpl	$0, -40(%rbp)
	jle	.LBB321_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB321_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB321_16:                             # %if.end32
                                        #   in Loop: Header=BB321_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_18
# %bb.17:                               # %if.then35
	jmp	.LBB321_66
.LBB321_18:                             # %if.end36
                                        #   in Loop: Header=BB321_9 Depth=2
	jmp	.LBB321_9
.LBB321_19:                             # %while.end
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB321_21
# %bb.20:                               # %if.then39
	jmp	.LBB321_62
.LBB321_21:                             # %if.end40
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-80(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB321_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB321_23:                             # %if.end44
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-80(%rbp), %rax
	movq	%rax, -88(%rbp)
	movl	$0, -44(%rbp)
.LBB321_24:                             # %for.cond
                                        #   Parent Loop BB321_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB321_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB321_24 Depth=2
	movq	-88(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB321_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB321_24
.LBB321_27:                             # %for.end
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB321_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB321_29:                             # %if.end53
                                        #   in Loop: Header=BB321_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB321_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB321_32
# %bb.31:                               # %if.then60
	jmp	.LBB321_33
.LBB321_32:                             # %if.end61
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_5
.LBB321_33:                             # %while.end62
	jmp	.LBB321_34
.LBB321_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_36
# %bb.35:                               # %if.then65
	jmp	.LBB321_66
.LBB321_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	cmpl	$-1, -36(%rbp)
	jne	.LBB321_38
# %bb.37:                               # %if.then70
	jmp	.LBB321_66
.LBB321_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_40
# %bb.39:                               # %if.then74
	jmp	.LBB321_66
.LBB321_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -36(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB321_42
# %bb.41:                               # %if.then79
	jmp	.LBB321_66
.LBB321_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB321_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -36(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -36(%rbp)
	jne	.LBB321_45
# %bb.44:                               # %if.then87
	jmp	.LBB321_66
.LBB321_45:                             # %if.end88
	jmp	.LBB321_46
.LBB321_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB321_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB321_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB321_80
.LBB321_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB321_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB321_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB321_53
# %bb.52:                               # %if.then100
	jmp	.LBB321_60
.LBB321_53:                             # %if.end101
                                        #   in Loop: Header=BB321_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_55
# %bb.54:                               # %if.then107
	jmp	.LBB321_66
.LBB321_55:                             # %if.end108
                                        #   in Loop: Header=BB321_51 Depth=1
	cmpl	$0, -40(%rbp)
	jle	.LBB321_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB321_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-40(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB321_57:                             # %if.end115
                                        #   in Loop: Header=BB321_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB321_59
# %bb.58:                               # %if.then118
	jmp	.LBB321_66
.LBB321_59:                             # %if.end119
                                        #   in Loop: Header=BB321_51 Depth=1
	jmp	.LBB321_51
.LBB321_60:                             # %while.end120
	jmp	.LBB321_34
.LBB321_61:                             # %if.end121
	jmp	.LBB321_62
.LBB321_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB321_79
# %bb.63:                               # %errhandler
	movq	.LJTI321_0(,%rax,8), %rax
	jmpq	*%rax
.LBB321_64:                             # %sw.bb
	callq	configError
.LBB321_65:                             # %sw.bb122
	jmp	.LBB321_66
.LBB321_66:                             # %errhandler_io
	callq	ioError
.LBB321_67:                             # %sw.bb123
	callq	crcError
.LBB321_68:                             # %sw.bb124
	callq	outOfMemory
.LBB321_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB321_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB321_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB321_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB321_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB321_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB321_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB321_80
.LBB321_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB321_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB321_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB321_80
.LBB321_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB321_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$723519012, -68(%rbp)   # imm = 0x2B200624
	jne	.LBB321_82
.LBB321_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_81
.Lfunc_end321:
	.size	uncompressStream.279, .Lfunc_end321-uncompressStream.279
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI321_0:
	.quad	.LBB321_64
	.quad	.LBB321_79
	.quad	.LBB321_69
	.quad	.LBB321_65
	.quad	.LBB321_70
	.quad	.LBB321_67
	.quad	.LBB321_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.280
	.type	uInt64_toAscii.280,@function
uInt64_toAscii.280:                     # @uInt64_toAscii.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$818559947, -12(%rbp)   # imm = 0x30CA3BCB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB322_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB322_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB322_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB322_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB322_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB322_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB322_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB322_4
.LBB322_7:                              # %for.end
	cmpl	$818559947, -12(%rbp)   # imm = 0x30CA3BCB
	jne	.LBB322_9
.LBB322_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_8
.Lfunc_end322:
	.size	uInt64_toAscii.280, .Lfunc_end322-uInt64_toAscii.280
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.281
	.type	uInt64_toAscii.281,@function
uInt64_toAscii.281:                     # @uInt64_toAscii.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$795896811, -12(%rbp)   # imm = 0x2F706BEB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB323_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB323_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB323_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB323_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB323_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB323_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB323_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB323_4
.LBB323_7:                              # %for.end
	cmpl	$795896811, -12(%rbp)   # imm = 0x2F706BEB
	jne	.LBB323_9
.LBB323_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_8
.Lfunc_end323:
	.size	uInt64_toAscii.281, .Lfunc_end323-uInt64_toAscii.281
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function testf.282
	.type	testf.282,@function
testf.282:                              # @testf.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$176, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$14072045, -44(%rbp)    # imm = 0xD6B8ED
	movq	%rdi, -32(%rbp)
	movb	$0, deleteOutputOnInterrupt
	cmpq	$0, -32(%rbp)
	jne	.LBB324_3
# %bb.1:                                # %land.lhs.true
	cmpl	$1, srcMode
	je	.LBB324_3
# %bb.2:                                # %if.then
	movabsq	$.L.str.94, %rdi
	callq	panic
.LBB324_3:                              # %if.end
	movl	$outName, %edi
	movl	$.L.str, %esi
	callq	copyFileName
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB324_6
	jmp	.LBB324_4
.LBB324_4:                              # %if.end
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB324_8
	jmp	.LBB324_5
.LBB324_5:                              # %if.end
	subl	$3, %eax
	je	.LBB324_7
	jmp	.LBB324_9
.LBB324_6:                              # %sw.bb
	movabsq	$inName, %rdi
	movabsq	$.L.str.54, %rsi
	callq	copyFileName
	jmp	.LBB324_9
.LBB324_7:                              # %sw.bb2
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
	jmp	.LBB324_9
.LBB324_8:                              # %sw.bb3
	movq	-32(%rbp), %rsi
	movabsq	$inName, %rdi
	callq	copyFileName
.LBB324_9:                              # %sw.epilog
	cmpl	$1, srcMode
	je	.LBB324_14
# %bb.10:                               # %land.lhs.true5
	movabsq	$inName, %rdi
	callq	containsDubiousChars
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB324_14
# %bb.11:                               # %if.then6
	cmpb	$0, noisy
	je	.LBB324_13
# %bb.12:                               # %if.then8
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.56, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB324_13:                             # %if.end10
	movl	$1, %edi
	callq	setExit
	jmp	.LBB324_37
.LBB324_14:                             # %if.end11
	cmpl	$1, srcMode
	je	.LBB324_17
# %bb.15:                               # %land.lhs.true14
	movabsq	$inName, %rdi
	callq	fileExists
	cmpb	$0, %al
	jne	.LBB324_17
# %bb.16:                               # %if.then17
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.95, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB324_37
.LBB324_17:                             # %if.end21
	cmpl	$1, srcMode
	je	.LBB324_21
# %bb.18:                               # %if.then24
	movabsq	$inName, %rdi
	leaq	-192(%rbp), %rsi
	callq	stat
	movl	-168(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$16384, %eax            # imm = 0x4000
	jne	.LBB324_20
# %bb.19:                               # %if.then28
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.59, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB324_37
.LBB324_20:                             # %if.end30
	jmp	.LBB324_21
.LBB324_21:                             # %if.end31
	movl	srcMode(%rip), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB324_23
	jmp	.LBB324_22
.LBB324_22:                             # %if.end31
	addl	$-2, %eax
	subl	$2, %eax
	jb	.LBB324_26
	jmp	.LBB324_29
.LBB324_23:                             # %sw.bb32
	movq	stdin, %rdi
	callq	fileno
	movl	%eax, %edi
	callq	isatty
	cmpl	$0, %eax
	je	.LBB324_25
# %bb.24:                               # %if.then36
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.82, %rsi
	movb	$0, %al
	callq	fprintf
	movq	stderr, %rdi
	movq	progName, %rdx
	movq	progName, %rcx
	movabsq	$.L.str.65, %rsi
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB324_37
.LBB324_25:                             # %if.end39
	movq	stdin, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB324_30
.LBB324_26:                             # %sw.bb40
	movabsq	$inName, %rdi
	movabsq	$.L.str.66, %rsi
	callq	fopen
	movq	%rax, -40(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB324_28
# %bb.27:                               # %if.then44
	movq	stderr, %rbx
	movq	progName, %r14
	callq	__errno_location
	movl	(%rax), %edi
	callq	strerror
	movq	%rbx, %rdi
	movabsq	$.L.str.83, %rsi
	movq	%r14, %rdx
	movabsq	$inName, %rcx
	movq	%rax, %r8
	movb	$0, %al
	callq	fprintf
	movl	$1, %edi
	callq	setExit
	jmp	.LBB324_37
.LBB324_28:                             # %if.end48
	jmp	.LBB324_30
.LBB324_29:                             # %sw.default
	movabsq	$.L.str.96, %rdi
	callq	panic
.LBB324_30:                             # %sw.epilog49
	cmpl	$1, verbosity
	jl	.LBB324_32
# %bb.31:                               # %if.then52
	movq	stderr, %rdi
	movabsq	$.L.str.70, %rsi
	movabsq	$inName, %rdx
	movb	$0, %al
	callq	fprintf
	movabsq	$inName, %rdi
	callq	pad
	movq	stderr, %rdi
	callq	fflush
.LBB324_32:                             # %if.end55
	movq	$0, outputHandleJustInCase
	movq	-40(%rbp), %rdi
	callq	testStream
	movb	%al, -17(%rbp)
	movzbl	-17(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB324_35
# %bb.33:                               # %land.lhs.true59
	cmpl	$1, verbosity
	jl	.LBB324_35
# %bb.34:                               # %if.then62
	movq	stderr, %rdi
	movabsq	$.L.str.97, %rsi
	movb	$0, %al
	callq	fprintf
.LBB324_35:                             # %if.end64
	cmpb	$0, -17(%rbp)
	jne	.LBB324_37
# %bb.36:                               # %if.then66
	movb	$1, testFailsExist
.LBB324_37:                             # %if.end67
	cmpl	$14072045, -44(%rbp)    # imm = 0xD6B8ED
	jne	.LBB324_39
.LBB324_38:
	addq	$176, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_39:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_38
.Lfunc_end324:
	.size	testf.282, .Lfunc_end324-testf.282
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.283
.LCPI325_0:
	.quad	4607182418800017408     # double 1
.LCPI325_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.283,@function
uInt64_to_double.283:                   # @uInt64_to_double.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI325_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1453237534, -28(%rbp)  # imm = 0x569EA51E
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB325_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB325_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB325_1 Depth=1
	vmovsd	.LCPI325_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-16(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -16(%rbp)
	vmulsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB325_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_1
.LBB325_4:                              # %for.end
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1453237534, -28(%rbp)  # imm = 0x569EA51E
	jne	.LBB325_6
.LBB325_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB325_5
.Lfunc_end325:
	.size	uInt64_to_double.283, .Lfunc_end325-uInt64_to_double.283
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function compressStream.284
.LCPI326_0:
	.quad	4636737291354636288     # double 100
.LCPI326_1:
	.quad	4607182418800017408     # double 1
.LCPI326_2:
	.quad	4620693217682128896     # double 8
	.text
	.p2align	4, 0x90
	.type	compressStream.284,@function
compressStream.284:                     # @compressStream.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$5200, %rsp             # imm = 0x1450
	movl	$509727975, -76(%rbp)   # imm = 0x1E61D4E7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	$0, -56(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB326_2
# %bb.1:                                # %if.then
	jmp	.LBB326_46
.LBB326_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB326_4
# %bb.3:                                # %if.then3
	jmp	.LBB326_46
.LBB326_4:                              # %if.end4
	movq	-32(%rbp), %rsi
	movl	blockSize100k, %edx
	movl	verbosity, %ecx
	movl	workFactor, %r8d
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWriteOpen
	movq	%rax, -56(%rbp)
	cmpl	$0, -4(%rbp)
	je	.LBB326_6
# %bb.5:                                # %if.then6
	jmp	.LBB326_40
.LBB326_6:                              # %if.end7
	cmpl	$2, verbosity
	jl	.LBB326_8
# %bb.7:                                # %if.then9
	movq	stderr, %rdi
	movabsq	$.L.str.73, %rsi
	movb	$0, %al
	callq	fprintf
.LBB326_8:                              # %if.end11
	jmp	.LBB326_9
.LBB326_9:                              # %while.body
                                        # =>This Inner Loop Header: Depth=1
	movq	-24(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB326_11
# %bb.10:                               # %if.then14
	jmp	.LBB326_18
.LBB326_11:                             # %if.end15
                                        #   in Loop: Header=BB326_9 Depth=1
	leaq	-5184(%rbp), %rdi
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB326_13
# %bb.12:                               # %if.then19
	jmp	.LBB326_46
.LBB326_13:                             # %if.end20
                                        #   in Loop: Header=BB326_9 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB326_15
# %bb.14:                               # %if.then23
                                        #   in Loop: Header=BB326_9 Depth=1
	leaq	-5184(%rbp), %rdx
	movq	-56(%rbp), %rsi
	movl	-44(%rbp), %ecx
	leaq	-4(%rbp), %rdi
	callq	BZ2_bzWrite
.LBB326_15:                             # %if.end25
                                        #   in Loop: Header=BB326_9 Depth=1
	cmpl	$0, -4(%rbp)
	je	.LBB326_17
# %bb.16:                               # %if.then28
	jmp	.LBB326_40
.LBB326_17:                             # %if.end29
                                        #   in Loop: Header=BB326_9 Depth=1
	jmp	.LBB326_9
.LBB326_18:                             # %while.end
	movq	-56(%rbp), %rsi
	leaq	-4(%rbp), %rdi
	movl	$0, %edx
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	callq	BZ2_bzWriteClose64
	cmpl	$0, -4(%rbp)
	je	.LBB326_20
# %bb.19:                               # %if.then32
	jmp	.LBB326_40
.LBB326_20:                             # %if.end33
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB326_22
# %bb.21:                               # %if.then36
	jmp	.LBB326_46
.LBB326_22:                             # %if.end37
	movq	-32(%rbp), %rdi
	callq	fflush
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB326_24
# %bb.23:                               # %if.then41
	jmp	.LBB326_46
.LBB326_24:                             # %if.end42
	movq	-32(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB326_28
# %bb.25:                               # %if.then45
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -8(%rbp)
	jne	.LBB326_27
# %bb.26:                               # %if.then49
	jmp	.LBB326_46
.LBB326_27:                             # %if.end50
	jmp	.LBB326_28
.LBB326_28:                             # %if.end51
	movq	$0, outputHandleJustInCase
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB326_30
# %bb.29:                               # %if.then54
	jmp	.LBB326_46
.LBB326_30:                             # %if.end55
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -8(%rbp)
	cmpl	$-1, -8(%rbp)
	jne	.LBB326_32
# %bb.31:                               # %if.then59
	jmp	.LBB326_46
.LBB326_32:                             # %if.end60
	cmpl	$1, verbosity
	jl	.LBB326_38
# %bb.33:                               # %if.then63
	cmpl	$0, -12(%rbp)
	jne	.LBB326_36
# %bb.34:                               # %land.lhs.true
	cmpl	$0, -16(%rbp)
	jne	.LBB326_36
# %bb.35:                               # %if.then68
	movq	stderr, %rdi
	movabsq	$.L.str.74, %rsi
	movb	$0, %al
	callq	fprintf
	jmp	.LBB326_37
.LBB326_36:                             # %if.else
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	leaq	-96(%rbp), %rdi
	callq	uInt64_from_UInt32s
	movl	-36(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-88(%rbp), %rdi
	callq	uInt64_from_UInt32s
	leaq	-96(%rbp), %rdi
	callq	uInt64_to_double
	vmovsd	%xmm0, -72(%rbp)
	leaq	-88(%rbp), %rdi
	callq	uInt64_to_double
	leaq	-144(%rbp), %rdi
	vmovsd	%xmm0, -64(%rbp)
	leaq	-96(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rdi
	leaq	-88(%rbp), %rsi
	callq	uInt64_toAscii
	leaq	-176(%rbp), %rcx
	leaq	-144(%rbp), %rdx
	vmovsd	.LCPI326_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	.LCPI326_1(%rip), %xmm3 # xmm3 = mem[0],zero
	vmovsd	.LCPI326_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	stderr, %rdi
	vmovsd	-72(%rbp), %xmm0        # xmm0 = mem[0],zero
	vdivsd	-64(%rbp), %xmm0, %xmm0
	vmulsd	-64(%rbp), %xmm1, %xmm1
	vdivsd	-72(%rbp), %xmm1, %xmm1
	vmovsd	-64(%rbp), %xmm4        # xmm4 = mem[0],zero
	vdivsd	-72(%rbp), %xmm4, %xmm4
	vsubsd	%xmm4, %xmm3, %xmm3
	vmulsd	%xmm3, %xmm2, %xmm2
	movabsq	$.L.str.75, %rsi
	movb	$3, %al
	callq	fprintf
.LBB326_37:                             # %if.end80
	jmp	.LBB326_38
.LBB326_38:                             # %if.end81
	cmpl	$509727975, -76(%rbp)   # imm = 0x1E61D4E7
	jne	.LBB326_48
.LBB326_39:
	addq	$5200, %rsp             # imm = 0x1450
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_40:                             # %errhandler
	.cfi_def_cfa %rbp, 16
	movq	-56(%rbp), %rsi
	leaq	-40(%rbp), %rax
	movq	%rax, (%rsp)
	leaq	-100(%rbp), %rdi
	leaq	-12(%rbp), %rcx
	leaq	-16(%rbp), %r8
	leaq	-36(%rbp), %r9
	movl	$1, %edx
	callq	BZ2_bzWriteClose64
	movl	-4(%rbp), %eax
	movl	%eax, %ecx
	subl	$-9, %ecx
	je	.LBB326_43
	jmp	.LBB326_41
.LBB326_41:                             # %errhandler
	movl	%eax, %ecx
	subl	$-6, %ecx
	je	.LBB326_45
	jmp	.LBB326_42
.LBB326_42:                             # %errhandler
	subl	$-3, %eax
	je	.LBB326_44
	jmp	.LBB326_47
.LBB326_43:                             # %sw.bb
	callq	configError
.LBB326_44:                             # %sw.bb82
	callq	outOfMemory
.LBB326_45:                             # %sw.bb83
	jmp	.LBB326_46
.LBB326_46:                             # %errhandler_io
	callq	ioError
.LBB326_47:                             # %sw.default
	movabsq	$.L.str.76, %rdi
	callq	panic
.LBB326_48:                             # %func_exit
	callq	detect_breach
	jmp	.LBB326_39
.Lfunc_end326:
	.size	compressStream.284, .Lfunc_end326-compressStream.284
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.285
	.type	uncompressStream.285,@function
uncompressStream.285:                   # @uncompressStream.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$1057107336, -68(%rbp)  # imm = 0x3F022D88
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_2
# %bb.1:                                # %if.then
	jmp	.LBB327_66
.LBB327_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_4
# %bb.3:                                # %if.then3
	jmp	.LBB327_66
.LBB327_4:                              # %if.end4
	jmp	.LBB327_5
.LBB327_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_9 Depth 2
                                        #     Child Loop BB327_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB327_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB327_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB327_8
.LBB327_7:                              # %if.then9
	jmp	.LBB327_62
.LBB327_8:                              # %if.end10
                                        #   in Loop: Header=BB327_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB327_9:                              # %while.cond11
                                        #   Parent Loop BB327_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB327_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB327_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -44(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB327_12
# %bb.11:                               # %if.then19
	jmp	.LBB327_49
.LBB327_12:                             # %if.end20
                                        #   in Loop: Header=BB327_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB327_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB327_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB327_16
.LBB327_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB327_9 Depth=2
	cmpl	$0, -44(%rbp)
	jle	.LBB327_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB327_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB327_16:                             # %if.end32
                                        #   in Loop: Header=BB327_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_18
# %bb.17:                               # %if.then35
	jmp	.LBB327_66
.LBB327_18:                             # %if.end36
                                        #   in Loop: Header=BB327_9 Depth=2
	jmp	.LBB327_9
.LBB327_19:                             # %while.end
                                        #   in Loop: Header=BB327_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB327_21
# %bb.20:                               # %if.then39
	jmp	.LBB327_62
.LBB327_21:                             # %if.end40
                                        #   in Loop: Header=BB327_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB327_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB327_23:                             # %if.end44
                                        #   in Loop: Header=BB327_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -36(%rbp)
.LBB327_24:                             # %for.cond
                                        #   Parent Loop BB327_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB327_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB327_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-36(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB327_24 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB327_24
.LBB327_27:                             # %for.end
                                        #   in Loop: Header=BB327_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB327_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB327_29:                             # %if.end53
                                        #   in Loop: Header=BB327_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB327_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB327_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB327_32
# %bb.31:                               # %if.then60
	jmp	.LBB327_33
.LBB327_32:                             # %if.end61
                                        #   in Loop: Header=BB327_5 Depth=1
	jmp	.LBB327_5
.LBB327_33:                             # %while.end62
	jmp	.LBB327_34
.LBB327_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_36
# %bb.35:                               # %if.then65
	jmp	.LBB327_66
.LBB327_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB327_38
# %bb.37:                               # %if.then70
	jmp	.LBB327_66
.LBB327_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_40
# %bb.39:                               # %if.then74
	jmp	.LBB327_66
.LBB327_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB327_42
# %bb.41:                               # %if.then79
	jmp	.LBB327_66
.LBB327_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB327_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB327_45
# %bb.44:                               # %if.then87
	jmp	.LBB327_66
.LBB327_45:                             # %if.end88
	jmp	.LBB327_46
.LBB327_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB327_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB327_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB327_80
.LBB327_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB327_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB327_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB327_53
# %bb.52:                               # %if.then100
	jmp	.LBB327_60
.LBB327_53:                             # %if.end101
                                        #   in Loop: Header=BB327_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_55
# %bb.54:                               # %if.then107
	jmp	.LBB327_66
.LBB327_55:                             # %if.end108
                                        #   in Loop: Header=BB327_51 Depth=1
	cmpl	$0, -44(%rbp)
	jle	.LBB327_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB327_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-44(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB327_57:                             # %if.end115
                                        #   in Loop: Header=BB327_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB327_59
# %bb.58:                               # %if.then118
	jmp	.LBB327_66
.LBB327_59:                             # %if.end119
                                        #   in Loop: Header=BB327_51 Depth=1
	jmp	.LBB327_51
.LBB327_60:                             # %while.end120
	jmp	.LBB327_34
.LBB327_61:                             # %if.end121
	jmp	.LBB327_62
.LBB327_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB327_79
# %bb.63:                               # %errhandler
	movq	.LJTI327_0(,%rax,8), %rax
	jmpq	*%rax
.LBB327_64:                             # %sw.bb
	callq	configError
.LBB327_65:                             # %sw.bb122
	jmp	.LBB327_66
.LBB327_66:                             # %errhandler_io
	callq	ioError
.LBB327_67:                             # %sw.bb123
	callq	crcError
.LBB327_68:                             # %sw.bb124
	callq	outOfMemory
.LBB327_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB327_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB327_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB327_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB327_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB327_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB327_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB327_80
.LBB327_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB327_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB327_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB327_80
.LBB327_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB327_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$1057107336, -68(%rbp)  # imm = 0x3F022D88
	jne	.LBB327_82
.LBB327_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_81
.Lfunc_end327:
	.size	uncompressStream.285, .Lfunc_end327-uncompressStream.285
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI327_0:
	.quad	.LBB327_64
	.quad	.LBB327_79
	.quad	.LBB327_69
	.quad	.LBB327_65
	.quad	.LBB327_70
	.quad	.LBB327_67
	.quad	.LBB327_68
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function snocString.286
	.type	snocString.286,@function
snocString.286:                         # @snocString.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1553201397, -44(%rbp)  # imm = 0x5C93F8F5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB328_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -40(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB328_6
.LBB328_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB328_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB328_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB328_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB328_3
.LBB328_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB328_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$1553201397, -44(%rbp)  # imm = 0x5C93F8F5
	jne	.LBB328_8
.LBB328_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_7
.Lfunc_end328:
	.size	snocString.286, .Lfunc_end328-snocString.286
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.287
	.type	snocString.287,@function
snocString.287:                         # @snocString.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2017467449, -44(%rbp)  # imm = 0x78401C39
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	cmpq	$0, -40(%rbp)
	jne	.LBB329_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-24(%rbp), %rax
	movq	(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	strcpy
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB329_6
.LBB329_2:                              # %if.else
	movq	-40(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB329_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB329_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB329_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB329_3
.LBB329_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-32(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-40(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB329_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$2017467449, -44(%rbp)  # imm = 0x78401C39
	jne	.LBB329_8
.LBB329_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_7
.Lfunc_end329:
	.size	snocString.287, .Lfunc_end329-snocString.287
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.288
	.type	addFlagsFromEnvVar.288,@function
addFlagsFromEnvVar.288:                 # @addFlagsFromEnvVar.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1041478949, -24(%rbp)  # imm = 0x3E13B525
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB330_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB330_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB330_5 Depth 2
                                        #     Child Loop BB330_8 Depth 2
                                        #     Child Loop BB330_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB330_4
# %bb.3:                                # %if.then3
	jmp	.LBB330_21
.LBB330_4:                              # %if.end
                                        #   in Loop: Header=BB330_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB330_5:                              # %while.cond4
                                        #   Parent Loop BB330_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB330_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB330_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB330_5
.LBB330_7:                              # %while.end
                                        #   in Loop: Header=BB330_2 Depth=1
	jmp	.LBB330_8
.LBB330_8:                              # %while.cond12
                                        #   Parent Loop BB330_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB330_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB330_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB330_10:                             # %land.end
                                        #   in Loop: Header=BB330_8 Depth=2
	testb	$1, %al
	jne	.LBB330_11
	jmp	.LBB330_12
.LBB330_11:                             # %while.body27
                                        #   in Loop: Header=BB330_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB330_8
.LBB330_12:                             # %while.end28
                                        #   in Loop: Header=BB330_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB330_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB330_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB330_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB330_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB330_15:                             # %if.end35
                                        #   in Loop: Header=BB330_2 Depth=1
	movl	$0, -8(%rbp)
.LBB330_16:                             # %for.cond
                                        #   Parent Loop BB330_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB330_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB330_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB330_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB330_16
.LBB330_19:                             # %for.end
                                        #   in Loop: Header=BB330_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB330_20:                             # %if.end46
                                        #   in Loop: Header=BB330_2 Depth=1
	jmp	.LBB330_2
.LBB330_21:                             # %while.end47
	jmp	.LBB330_22
.LBB330_22:                             # %if.end48
	cmpl	$1041478949, -24(%rbp)  # imm = 0x3E13B525
	jne	.LBB330_24
.LBB330_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB330_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB330_23
.Lfunc_end330:
	.size	addFlagsFromEnvVar.288, .Lfunc_end330-addFlagsFromEnvVar.288
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function addFlagsFromEnvVar.289
	.type	addFlagsFromEnvVar.289,@function
addFlagsFromEnvVar.289:                 # @addFlagsFromEnvVar.289
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1253179112, -24(%rbp)  # imm = 0x4AB1FEE8
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rdi
	callq	getenv
	movq	%rax, -32(%rbp)
	cmpq	$0, -32(%rbp)
	je	.LBB331_22
# %bb.1:                                # %if.then
	movq	-32(%rbp), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB331_2:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB331_5 Depth 2
                                        #     Child Loop BB331_8 Depth 2
                                        #     Child Loop BB331_16 Depth 2
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movsbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB331_4
# %bb.3:                                # %if.then3
	jmp	.LBB331_21
.LBB331_4:                              # %if.end
                                        #   in Loop: Header=BB331_2 Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cltq
	addq	%rax, %rcx
	movq	%rcx, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB331_5:                              # %while.cond4
                                        #   Parent Loop BB331_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movsbl	(%rcx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	je	.LBB331_7
# %bb.6:                                # %while.body11
                                        #   in Loop: Header=BB331_5 Depth=2
	movq	-16(%rbp), %rax
	addq	$1, %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB331_5
.LBB331_7:                              # %while.end
                                        #   in Loop: Header=BB331_2 Depth=1
	jmp	.LBB331_8
.LBB331_8:                              # %while.cond12
                                        #   Parent Loop BB331_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	cmpl	$0, %ecx
	je	.LBB331_10
# %bb.9:                                # %land.rhs
                                        #   in Loop: Header=BB331_8 Depth=2
	callq	__ctype_b_loc
	movq	(%rax), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movsbl	(%rcx,%rdx), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	andl	$8192, %eax             # imm = 0x2000
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
.LBB331_10:                             # %land.end
                                        #   in Loop: Header=BB331_8 Depth=2
	testb	$1, %al
	jne	.LBB331_11
	jmp	.LBB331_12
.LBB331_11:                             # %while.body27
                                        #   in Loop: Header=BB331_8 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB331_8
.LBB331_12:                             # %while.end28
                                        #   in Loop: Header=BB331_2 Depth=1
	cmpl	$0, -4(%rbp)
	jle	.LBB331_20
# %bb.13:                               # %if.then31
                                        #   in Loop: Header=BB331_2 Depth=1
	movl	-4(%rbp), %eax
	movl	%eax, -20(%rbp)
	cmpl	$1024, -20(%rbp)        # imm = 0x400
	jle	.LBB331_15
# %bb.14:                               # %if.then34
                                        #   in Loop: Header=BB331_2 Depth=1
	movl	$1024, -20(%rbp)        # imm = 0x400
.LBB331_15:                             # %if.end35
                                        #   in Loop: Header=BB331_2 Depth=1
	movl	$0, -8(%rbp)
.LBB331_16:                             # %for.cond
                                        #   Parent Loop BB331_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB331_19
# %bb.17:                               # %for.body
                                        #   in Loop: Header=BB331_16 Depth=2
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-8(%rbp), %rcx
	movb	%al, tmpName(,%rcx)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB331_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB331_16
.LBB331_19:                             # %for.end
                                        #   in Loop: Header=BB331_2 Depth=1
	movslq	-20(%rbp), %rax
	movb	$0, tmpName(,%rax)
	movq	-40(%rbp), %rax
	movq	(%rax), %rdi
	movabsq	$tmpName, %rsi
	callq	snocString
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
.LBB331_20:                             # %if.end46
                                        #   in Loop: Header=BB331_2 Depth=1
	jmp	.LBB331_2
.LBB331_21:                             # %while.end47
	jmp	.LBB331_22
.LBB331_22:                             # %if.end48
	cmpl	$1253179112, -24(%rbp)  # imm = 0x4AB1FEE8
	jne	.LBB331_24
.LBB331_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB331_24:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB331_23
.Lfunc_end331:
	.size	addFlagsFromEnvVar.289, .Lfunc_end331-addFlagsFromEnvVar.289
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function snocString.290
	.type	snocString.290,@function
snocString.290:                         # @snocString.290
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$385654450, -44(%rbp)   # imm = 0x16FC9EB2
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	cmpq	$0, -24(%rbp)
	jne	.LBB332_2
# %bb.1:                                # %if.then
	callq	mkCell
	movq	%rax, -32(%rbp)
	movq	-40(%rbp), %rdi
	callq	strlen
	addq	$5, %rax
	movl	%eax, %edi
	callq	myMalloc
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	movq	-32(%rbp), %rax
	movq	(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	strcpy
	movq	-32(%rbp), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB332_6
.LBB332_2:                              # %if.else
	movq	-24(%rbp), %rax
	movq	%rax, -16(%rbp)
.LBB332_3:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-16(%rbp), %rax
	cmpq	$0, 8(%rax)
	je	.LBB332_5
# %bb.4:                                # %while.body
                                        #   in Loop: Header=BB332_3 Depth=1
	movq	-16(%rbp), %rax
	movq	8(%rax), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB332_3
.LBB332_5:                              # %while.end
	movq	-16(%rbp), %rax
	movq	8(%rax), %rdi
	movq	-40(%rbp), %rsi
	callq	snocString
	movq	-16(%rbp), %rcx
	movq	%rax, 8(%rcx)
	movq	-24(%rbp), %rax
	movq	%rax, -56(%rbp)
.LBB332_6:                              # %return
	movq	-56(%rbp), %rbx
	cmpl	$385654450, -44(%rbp)   # imm = 0x16FC9EB2
	jne	.LBB332_8
.LBB332_7:
	movq	%rbx, %rax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB332_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB332_7
.Lfunc_end332:
	.size	snocString.290, .Lfunc_end332-snocString.290
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.291
	.type	uInt64_toAscii.291,@function
uInt64_toAscii.291:                     # @uInt64_toAscii.291
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1871264360, -12(%rbp)  # imm = 0x6F893A68
	movq	%rdi, -32(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -24(%rbp)
.LBB333_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB333_1 Depth=1
	leaq	-24(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB333_1
# %bb.3:                                # %do.end
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB333_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB333_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB333_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB333_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB333_4
.LBB333_7:                              # %for.end
	cmpl	$1871264360, -12(%rbp)  # imm = 0x6F893A68
	jne	.LBB333_9
.LBB333_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB333_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB333_8
.Lfunc_end333:
	.size	uInt64_toAscii.291, .Lfunc_end333-uInt64_toAscii.291
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uncompressStream.292
	.type	uncompressStream.292,@function
uncompressStream.292:                   # @uncompressStream.292
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$10104, %rsp            # imm = 0x2778
	.cfi_offset %rbx, -24
	movl	$878452872, -68(%rbp)   # imm = 0x345C2088
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -52(%rbp)
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_2
# %bb.1:                                # %if.then
	jmp	.LBB334_66
.LBB334_2:                              # %if.end
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_4
# %bb.3:                                # %if.then3
	jmp	.LBB334_66
.LBB334_4:                              # %if.end4
	jmp	.LBB334_5
.LBB334_5:                              # %while.body
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB334_9 Depth 2
                                        #     Child Loop BB334_24 Depth 2
	leaq	-10112(%rbp), %r8
	movq	-32(%rbp), %rsi
	movl	verbosity, %edx
	movzbl	smallMode, %ecx
	movl	-48(%rbp), %r9d
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadOpen
	movq	%rax, -64(%rbp)
	cmpq	$0, -64(%rbp)
	je	.LBB334_7
# %bb.6:                                # %lor.lhs.false
                                        #   in Loop: Header=BB334_5 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB334_8
.LBB334_7:                              # %if.then9
	jmp	.LBB334_62
.LBB334_8:                              # %if.end10
                                        #   in Loop: Header=BB334_5 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
.LBB334_9:                              # %while.cond11
                                        #   Parent Loop BB334_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$0, -16(%rbp)
	jne	.LBB334_19
# %bb.10:                               # %while.body14
                                        #   in Loop: Header=BB334_9 Depth=2
	leaq	-5104(%rbp), %rdx
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	movl	$5000, %ecx             # imm = 0x1388
	callq	BZ2_bzRead
	movl	%eax, -36(%rbp)
	cmpl	$-5, -16(%rbp)
	jne	.LBB334_12
# %bb.11:                               # %if.then19
	jmp	.LBB334_49
.LBB334_12:                             # %if.end20
                                        #   in Loop: Header=BB334_9 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB334_14
# %bb.13:                               # %lor.lhs.false23
                                        #   in Loop: Header=BB334_9 Depth=2
	cmpl	$4, -16(%rbp)
	jne	.LBB334_16
.LBB334_14:                             # %land.lhs.true
                                        #   in Loop: Header=BB334_9 Depth=2
	cmpl	$0, -36(%rbp)
	jle	.LBB334_16
# %bb.15:                               # %if.then28
                                        #   in Loop: Header=BB334_9 Depth=2
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB334_16:                             # %if.end32
                                        #   in Loop: Header=BB334_9 Depth=2
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_18
# %bb.17:                               # %if.then35
	jmp	.LBB334_66
.LBB334_18:                             # %if.end36
                                        #   in Loop: Header=BB334_9 Depth=2
	jmp	.LBB334_9
.LBB334_19:                             # %while.end
                                        #   in Loop: Header=BB334_5 Depth=1
	cmpl	$4, -16(%rbp)
	je	.LBB334_21
# %bb.20:                               # %if.then39
	jmp	.LBB334_62
.LBB334_21:                             # %if.end40
                                        #   in Loop: Header=BB334_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	leaq	-88(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	callq	BZ2_bzReadGetUnused
	cmpl	$0, -16(%rbp)
	je	.LBB334_23
# %bb.22:                               # %if.then43
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB334_23:                             # %if.end44
                                        #   in Loop: Header=BB334_5 Depth=1
	movq	-88(%rbp), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB334_24:                             # %for.cond
                                        #   Parent Loop BB334_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB334_27
# %bb.25:                               # %for.body
                                        #   in Loop: Header=BB334_24 Depth=2
	movq	-80(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movb	(%rax,%rcx), %al
	movslq	-44(%rbp), %rcx
	movb	%al, -10112(%rbp,%rcx)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB334_24 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB334_24
.LBB334_27:                             # %for.end
                                        #   in Loop: Header=BB334_5 Depth=1
	movq	-64(%rbp), %rsi
	leaq	-16(%rbp), %rdi
	callq	BZ2_bzReadClose
	cmpl	$0, -16(%rbp)
	je	.LBB334_29
# %bb.28:                               # %if.then52
	movabsq	$.L.str.88, %rdi
	callq	panic
.LBB334_29:                             # %if.end53
                                        #   in Loop: Header=BB334_5 Depth=1
	cmpl	$0, -48(%rbp)
	jne	.LBB334_32
# %bb.30:                               # %land.lhs.true56
                                        #   in Loop: Header=BB334_5 Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	movzbl	%al, %eax
	cmpl	$0, %eax
	je	.LBB334_32
# %bb.31:                               # %if.then60
	jmp	.LBB334_33
.LBB334_32:                             # %if.end61
                                        #   in Loop: Header=BB334_5 Depth=1
	jmp	.LBB334_5
.LBB334_33:                             # %while.end62
	jmp	.LBB334_34
.LBB334_34:                             # %closeok
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_36
# %bb.35:                               # %if.then65
	jmp	.LBB334_66
.LBB334_36:                             # %if.end66
	movq	-32(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	cmpl	$-1, -40(%rbp)
	jne	.LBB334_38
# %bb.37:                               # %if.then70
	jmp	.LBB334_66
.LBB334_38:                             # %if.end71
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_40
# %bb.39:                               # %if.then74
	jmp	.LBB334_66
.LBB334_40:                             # %if.end75
	movq	-24(%rbp), %rdi
	callq	fflush
	movl	%eax, -40(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB334_42
# %bb.41:                               # %if.then79
	jmp	.LBB334_66
.LBB334_42:                             # %if.end80
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB334_46
# %bb.43:                               # %if.then83
	movq	-24(%rbp), %rdi
	callq	fclose
	movl	%eax, -40(%rbp)
	movq	$0, outputHandleJustInCase
	cmpl	$-1, -40(%rbp)
	jne	.LBB334_45
# %bb.44:                               # %if.then87
	jmp	.LBB334_66
.LBB334_45:                             # %if.end88
	jmp	.LBB334_46
.LBB334_46:                             # %if.end89
	movq	$0, outputHandleJustInCase
	cmpl	$2, verbosity
	jl	.LBB334_48
# %bb.47:                               # %if.then92
	movq	stderr, %rdi
	movabsq	$.L.str.89, %rsi
	movb	$0, %al
	callq	fprintf
.LBB334_48:                             # %if.end94
	movb	$1, -9(%rbp)
	jmp	.LBB334_80
.LBB334_49:                             # %trycat
	cmpb	$0, forceOverwrite
	je	.LBB334_61
# %bb.50:                               # %if.then96
	movq	-32(%rbp), %rdi
	callq	rewind
.LBB334_51:                             # %while.body97
                                        # =>This Inner Loop Header: Depth=1
	movq	-32(%rbp), %rdi
	callq	myfeof
	cmpb	$0, %al
	je	.LBB334_53
# %bb.52:                               # %if.then100
	jmp	.LBB334_60
.LBB334_53:                             # %if.end101
                                        #   in Loop: Header=BB334_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movq	-32(%rbp), %rcx
	movl	$1, %esi
	movl	$5000, %edx             # imm = 0x1388
	callq	fread
	movl	%eax, -36(%rbp)
	movq	-32(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_55
# %bb.54:                               # %if.then107
	jmp	.LBB334_66
.LBB334_55:                             # %if.end108
                                        #   in Loop: Header=BB334_51 Depth=1
	cmpl	$0, -36(%rbp)
	jle	.LBB334_57
# %bb.56:                               # %if.then111
                                        #   in Loop: Header=BB334_51 Depth=1
	leaq	-5104(%rbp), %rdi
	movslq	-36(%rbp), %rdx
	movq	-24(%rbp), %rcx
	movl	$1, %esi
	callq	fwrite
.LBB334_57:                             # %if.end115
                                        #   in Loop: Header=BB334_51 Depth=1
	movq	-24(%rbp), %rdi
	callq	ferror
	cmpl	$0, %eax
	je	.LBB334_59
# %bb.58:                               # %if.then118
	jmp	.LBB334_66
.LBB334_59:                             # %if.end119
                                        #   in Loop: Header=BB334_51 Depth=1
	jmp	.LBB334_51
.LBB334_60:                             # %while.end120
	jmp	.LBB334_34
.LBB334_61:                             # %if.end121
	jmp	.LBB334_62
.LBB334_62:                             # %errhandler
	movq	-64(%rbp), %rsi
	leaq	-92(%rbp), %rdi
	callq	BZ2_bzReadClose
	movl	-16(%rbp), %eax
	addl	$9, %eax
	movl	%eax, %ecx
	subl	$6, %ecx
	ja	.LBB334_79
# %bb.63:                               # %errhandler
	movq	.LJTI334_0(,%rax,8), %rax
	jmpq	*%rax
.LBB334_64:                             # %sw.bb
	callq	configError
.LBB334_65:                             # %sw.bb122
	jmp	.LBB334_66
.LBB334_66:                             # %errhandler_io
	callq	ioError
.LBB334_67:                             # %sw.bb123
	callq	crcError
.LBB334_68:                             # %sw.bb124
	callq	outOfMemory
.LBB334_69:                             # %sw.bb125
	callq	compressedStreamEOF
.LBB334_70:                             # %sw.bb126
	movq	-32(%rbp), %rax
	cmpq	stdin, %rax
	je	.LBB334_72
# %bb.71:                               # %if.then129
	movq	-32(%rbp), %rdi
	callq	fclose
.LBB334_72:                             # %if.end131
	movq	-24(%rbp), %rax
	cmpq	stdout, %rax
	je	.LBB334_74
# %bb.73:                               # %if.then134
	movq	-24(%rbp), %rdi
	callq	fclose
.LBB334_74:                             # %if.end136
	cmpl	$1, -52(%rbp)
	jne	.LBB334_76
# %bb.75:                               # %if.then139
	movb	$0, -9(%rbp)
	jmp	.LBB334_80
.LBB334_76:                             # %if.else
	cmpb	$0, noisy
	je	.LBB334_78
# %bb.77:                               # %if.then141
	movq	stderr, %rdi
	movq	progName, %rdx
	movabsq	$.L.str.90, %rsi
	movabsq	$inName, %rcx
	movb	$0, %al
	callq	fprintf
.LBB334_78:                             # %if.end143
	movb	$1, -9(%rbp)
	jmp	.LBB334_80
.LBB334_79:                             # %sw.default
	movabsq	$.L.str.91, %rdi
	callq	panic
.LBB334_80:                             # %return
	movb	-9(%rbp), %bl
	cmpl	$878452872, -68(%rbp)   # imm = 0x345C2088
	jne	.LBB334_82
.LBB334_81:
	movzbl	%bl, %eax
	addq	$10104, %rsp            # imm = 0x2778
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB334_82:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB334_81
.Lfunc_end334:
	.size	uncompressStream.292, .Lfunc_end334-uncompressStream.292
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI334_0:
	.quad	.LBB334_64
	.quad	.LBB334_79
	.quad	.LBB334_69
	.quad	.LBB334_65
	.quad	.LBB334_70
	.quad	.LBB334_67
	.quad	.LBB334_68
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function uInt64_to_double.293
.LCPI335_0:
	.quad	4607182418800017408     # double 1
.LCPI335_1:
	.quad	4643211215818981376     # double 256
	.text
	.p2align	4, 0x90
	.type	uInt64_to_double.293,@function
uInt64_to_double.293:                   # @uInt64_to_double.293
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	vmovsd	.LCPI335_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$69779201, -28(%rbp)    # imm = 0x428BF01
	movq	%rdi, -48(%rbp)
	vmovsd	%xmm0, -16(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB335_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$8, -4(%rbp)
	jge	.LBB335_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB335_1 Depth=1
	vmovsd	.LCPI335_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	-24(%rbp), %xmm1, %xmm1
	vmovsd	%xmm1, -24(%rbp)
	vmulsd	-16(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB335_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB335_1
.LBB335_4:                              # %for.end
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$69779201, -28(%rbp)    # imm = 0x428BF01
	jne	.LBB335_6
.LBB335_5:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB335_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-40(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB335_5
.Lfunc_end335:
	.size	uInt64_to_double.293, .Lfunc_end335-uInt64_to_double.293
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function notAStandardFile.294
	.type	notAStandardFile.294,@function
notAStandardFile.294:                   # @notAStandardFile.294
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$641894931, -20(%rbp)   # imm = 0x26428A13
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB336_2
# %bb.1:                                # %if.then
	movb	$1, -9(%rbp)
	jmp	.LBB336_5
.LBB336_2:                              # %if.end
	movl	-152(%rbp), %eax
	andl	$61440, %eax            # imm = 0xF000
	cmpl	$32768, %eax            # imm = 0x8000
	jne	.LBB336_4
# %bb.3:                                # %if.then2
	movb	$0, -9(%rbp)
	jmp	.LBB336_5
.LBB336_4:                              # %if.end3
	movb	$1, -9(%rbp)
.LBB336_5:                              # %return
	movb	-9(%rbp), %bl
	cmpl	$641894931, -20(%rbp)   # imm = 0x26428A13
	jne	.LBB336_7
.LBB336_6:
	movzbl	%bl, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB336_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB336_6
.Lfunc_end336:
	.size	notAStandardFile.294, .Lfunc_end336-notAStandardFile.294
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.295
	.type	countHardLinks.295,@function
countHardLinks.295:                     # @countHardLinks.295
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$699978534, -20(%rbp)   # imm = 0x29B8D326
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB337_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB337_3
.LBB337_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB337_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$699978534, -20(%rbp)   # imm = 0x29B8D326
	jne	.LBB337_5
.LBB337_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB337_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB337_4
.Lfunc_end337:
	.size	countHardLinks.295, .Lfunc_end337-countHardLinks.295
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function countHardLinks.296
	.type	countHardLinks.296,@function
countHardLinks.296:                     # @countHardLinks.296
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$168, %rsp
	.cfi_offset %rbx, -24
	movl	$26224260, -20(%rbp)    # imm = 0x1902684
	movq	%rdi, -32(%rbp)
	movq	-32(%rbp), %rdi
	leaq	-176(%rbp), %rsi
	callq	lstat
	movl	%eax, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB338_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB338_3
.LBB338_2:                              # %if.end
	movq	-160(%rbp), %rax
	subq	$1, %rax
	movl	%eax, -12(%rbp)
.LBB338_3:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$26224260, -20(%rbp)    # imm = 0x1902684
	jne	.LBB338_5
.LBB338_4:
	movl	%ebx, %eax
	addq	$168, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB338_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB338_4
.Lfunc_end338:
	.size	countHardLinks.296, .Lfunc_end338-countHardLinks.296
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.297
	.type	mapSuffix.297,@function
mapSuffix.297:                          # @mapSuffix.297
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$2103493084, -36(%rbp)  # imm = 0x7D60C1DC
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB339_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB339_3
.LBB339_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB339_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$2103493084, -36(%rbp)  # imm = 0x7D60C1DC
	jne	.LBB339_5
.LBB339_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB339_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB339_4
.Lfunc_end339:
	.size	mapSuffix.297, .Lfunc_end339-mapSuffix.297
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function uInt64_toAscii.298
	.type	uInt64_toAscii.298,@function
uInt64_toAscii.298:                     # @uInt64_toAscii.298
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1251455086, -16(%rbp)  # imm = 0x4A97B06E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -4(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
.LBB340_1:                              # %do.body
                                        # =>This Inner Loop Header: Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_qrm10
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$48, %eax
	movslq	-4(%rbp), %rcx
	movb	%al, -80(%rbp,%rcx)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
# %bb.2:                                # %do.cond
                                        #   in Loop: Header=BB340_1 Depth=1
	leaq	-32(%rbp), %rdi
	callq	uInt64_isZero
	cmpb	$0, %al
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB340_1
# %bb.3:                                # %do.end
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movl	$0, -8(%rbp)
.LBB340_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	-4(%rbp), %eax
	jge	.LBB340_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB340_4 Depth=1
	movl	-4(%rbp), %eax
	subl	-8(%rbp), %eax
	subl	$1, %eax
	cltq
	movb	-80(%rbp,%rax), %al
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB340_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB340_4
.LBB340_7:                              # %for.end
	cmpl	$1251455086, -16(%rbp)  # imm = 0x4A97B06E
	jne	.LBB340_9
.LBB340_8:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB340_9:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB340_8
.Lfunc_end340:
	.size	uInt64_toAscii.298, .Lfunc_end340-uInt64_toAscii.298
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.299
	.type	mapSuffix.299,@function
mapSuffix.299:                          # @mapSuffix.299
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$123809435, -36(%rbp)   # imm = 0x7612E9B
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB341_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB341_3
.LBB341_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB341_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$123809435, -36(%rbp)   # imm = 0x7612E9B
	jne	.LBB341_5
.LBB341_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB341_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB341_4
.Lfunc_end341:
	.size	mapSuffix.299, .Lfunc_end341-mapSuffix.299
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mapSuffix.300
	.type	mapSuffix.300,@function
mapSuffix.300:                          # @mapSuffix.300
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$48, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	$705923877, -36(%rbp)   # imm = 0x2A138B25
	movq	%rdi, -32(%rbp)
	movq	%rsi, -48(%rbp)
	movq	%rdx, -56(%rbp)
	movq	-32(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	hasSuffix
	cmpb	$0, %al
	jne	.LBB342_2
# %bb.1:                                # %if.then
	movb	$0, -17(%rbp)
	jmp	.LBB342_3
.LBB342_2:                              # %if.end
	movq	-32(%rbp), %r14
	movq	-32(%rbp), %rdi
	callq	strlen
	movq	%rax, %rbx
	movq	-48(%rbp), %rdi
	callq	strlen
	subq	%rax, %rbx
	movb	$0, (%r14,%rbx)
	movq	-32(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	strcat
	movb	$1, -17(%rbp)
.LBB342_3:                              # %return
	movb	-17(%rbp), %bl
	cmpl	$705923877, -36(%rbp)   # imm = 0x2A138B25
	jne	.LBB342_5
.LBB342_4:
	movzbl	%bl, %eax
	addq	$48, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB342_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB342_4
.Lfunc_end342:
	.size	mapSuffix.300, .Lfunc_end342-mapSuffix.300
	.cfi_endproc
                                        # -- End function
	.type	outputHandleJustInCase,@object # @outputHandleJustInCase
	.comm	outputHandleJustInCase,8,8
	.type	smallMode,@object       # @smallMode
	.comm	smallMode,1,1
	.type	keepInputFiles,@object  # @keepInputFiles
	.comm	keepInputFiles,1,1
	.type	forceOverwrite,@object  # @forceOverwrite
	.comm	forceOverwrite,1,1
	.type	noisy,@object           # @noisy
	.comm	noisy,1,1
	.type	verbosity,@object       # @verbosity
	.comm	verbosity,4,4
	.type	blockSize100k,@object   # @blockSize100k
	.comm	blockSize100k,4,4
	.type	testFailsExist,@object  # @testFailsExist
	.comm	testFailsExist,1,1
	.type	unzFailsExist,@object   # @unzFailsExist
	.comm	unzFailsExist,1,1
	.type	numFileNames,@object    # @numFileNames
	.comm	numFileNames,4,4
	.type	numFilesProcessed,@object # @numFilesProcessed
	.comm	numFilesProcessed,4,4
	.type	workFactor,@object      # @workFactor
	.comm	workFactor,4,4
	.type	deleteOutputOnInterrupt,@object # @deleteOutputOnInterrupt
	.comm	deleteOutputOnInterrupt,1,1
	.type	exitValue,@object       # @exitValue
	.comm	exitValue,4,4
	.type	inName,@object          # @inName
	.comm	inName,1034,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"(none)"
	.size	.L.str, 7

	.type	outName,@object         # @outName
	.comm	outName,1034,16
	.type	progNameReally,@object  # @progNameReally
	.comm	progNameReally,1034,16
	.type	progName,@object        # @progName
	.comm	progName,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"BZIP2"
	.size	.L.str.1, 6

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"BZIP"
	.size	.L.str.2, 5

	.type	longestFileName,@object # @longestFileName
	.comm	longestFileName,4,4
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"--"
	.size	.L.str.3, 3

	.type	srcMode,@object         # @srcMode
	.comm	srcMode,4,4
	.type	opMode,@object          # @opMode
	.comm	opMode,4,4
	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"unzip"
	.size	.L.str.4, 6

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"UNZIP"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"z2cat"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"Z2CAT"
	.size	.L.str.7, 6

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"zcat"
	.size	.L.str.8, 5

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"ZCAT"
	.size	.L.str.9, 5

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%s: Bad flag `%s'\n"
	.size	.L.str.10, 19

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"--stdout"
	.size	.L.str.11, 9

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"--decompress"
	.size	.L.str.12, 13

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"--compress"
	.size	.L.str.13, 11

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"--force"
	.size	.L.str.14, 8

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"--test"
	.size	.L.str.15, 7

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"--keep"
	.size	.L.str.16, 7

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"--small"
	.size	.L.str.17, 8

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"--quiet"
	.size	.L.str.18, 8

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"--version"
	.size	.L.str.19, 10

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"--license"
	.size	.L.str.20, 10

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"--exponential"
	.size	.L.str.21, 14

	.type	.L.str.22,@object       # @.str.22
.L.str.22:
	.asciz	"--repetitive-best"
	.size	.L.str.22, 18

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"--repetitive-fast"
	.size	.L.str.23, 18

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"--fast"
	.size	.L.str.24, 7

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"--best"
	.size	.L.str.25, 7

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"--verbose"
	.size	.L.str.26, 10

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"--help"
	.size	.L.str.27, 7

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"%s: -c and -t cannot be used together.\n"
	.size	.L.str.28, 40

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.29, 113

	.type	tmpName,@object         # @tmpName
	.comm	tmpName,1034,16
	.type	zSuffix,@object         # @zSuffix
	.data
	.globl	zSuffix
	.p2align	4
zSuffix:
	.quad	.L.str.30
	.quad	.L.str.31
	.quad	.L.str.32
	.quad	.L.str.33
	.size	zSuffix, 32

	.type	.L.str.30,@object       # @.str.30
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.30:
	.asciz	".bz2"
	.size	.L.str.30, 5

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	".bz"
	.size	.L.str.31, 4

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	".tbz2"
	.size	.L.str.32, 6

	.type	.L.str.33,@object       # @.str.33
.L.str.33:
	.asciz	".tbz"
	.size	.L.str.33, 5

	.type	unzSuffix,@object       # @unzSuffix
	.data
	.globl	unzSuffix
	.p2align	4
unzSuffix:
	.quad	.L.str.34
	.quad	.L.str.34
	.quad	.L.str.35
	.quad	.L.str.35
	.size	unzSuffix, 32

	.type	.L.str.34,@object       # @.str.34
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.34:
	.zero	1
	.size	.L.str.34, 1

	.type	.L.str.35,@object       # @.str.35
.L.str.35:
	.asciz	".tar"
	.size	.L.str.35, 5

	.type	.L.str.36,@object       # @.str.36
.L.str.36:
	.asciz	"\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n\n   Possible causes are (most likely first):\n   (1) This computer has unreliable memory or cache hardware\n       (a surprisingly common problem; try a different machine.)\n   (2) A bug in the compiler used to create this executable\n       (unlikely, if you didn't compile bzip2 yourself.)\n   (3) A real bug in bzip2 -- I hope this should never be the case.\n   The user's manual, Section 4.3, has more info on (1) and (2).\n   \n   If you suspect this is a bug in bzip2, or are unsure about (1)\n   or (2), feel free to report it to me at: jseward@bzip.org.\n   Section 4.3 of the user's manual describes the info a useful\n   bug report should have.  If the manual is available on your\n   system, please try and read it before mailing me.  If you don't\n   have the manual or can't be bothered to read it, mail me anyway.\n\n"
	.size	.L.str.36, 869

	.type	.L.str.37,@object       # @.str.37
.L.str.37:
	.asciz	"\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n\n   Possible causes are (most likely first):\n   (1) The compressed data is corrupted, and bzip2's usual checks\n       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n   (2) This computer has unreliable memory or cache hardware\n       (a surprisingly common problem; try a different machine.)\n   (3) A bug in the compiler used to create this executable\n       (unlikely, if you didn't compile bzip2 yourself.)\n   (4) A real bug in bzip2 -- I hope this should never be the case.\n   The user's manual, Section 4.3, has more info on (2) and (3).\n   \n   If you suspect this is a bug in bzip2, or are unsure about (2)\n   or (3), feel free to report it to me at: jseward@bzip.org.\n   Section 4.3 of the user's manual describes the info a useful\n   bug report should have.  If the manual is available on your\n   system, please try and read it before mailing me.  If you don't\n   have the manual or can't be bothered to read it, mail me anyway.\n\n"
	.size	.L.str.37, 996

	.type	.L.str.38,@object       # @.str.38
.L.str.38:
	.asciz	"\tInput file = %s, output file = %s\n"
	.size	.L.str.38, 36

	.type	.L.str.39,@object       # @.str.39
.L.str.39:
	.asciz	"%s: Deleting output file %s, if it exists.\n"
	.size	.L.str.39, 44

	.type	.L.str.40,@object       # @.str.40
.L.str.40:
	.asciz	"%s: WARNING: deletion of output file (apparently) failed.\n"
	.size	.L.str.40, 59

	.type	.L.str.41,@object       # @.str.41
.L.str.41:
	.asciz	"%s: WARNING: deletion of output file suppressed\n"
	.size	.L.str.41, 49

	.type	.L.str.42,@object       # @.str.42
.L.str.42:
	.asciz	"%s:    since input file no longer exists.  Output file\n"
	.size	.L.str.42, 56

	.type	.L.str.43,@object       # @.str.43
.L.str.43:
	.asciz	"%s:    `%s' may be incomplete.\n"
	.size	.L.str.43, 32

	.type	.L.str.44,@object       # @.str.44
.L.str.44:
	.asciz	"%s:    I suggest doing an integrity test (bzip2 -tv) of it.\n"
	.size	.L.str.44, 61

	.type	.L.str.45,@object       # @.str.45
.L.str.45:
	.asciz	"%s: WARNING: some files have not been processed:\n%s:    %d specified on command line, %d not processed yet.\n\n"
	.size	.L.str.45, 110

	.type	.L.str.46,@object       # @.str.46
.L.str.46:
	.asciz	"\nIt is possible that the compressed file(s) have become corrupted.\nYou can use the -tvv option to test integrity of such files.\n\nYou can use the `bzip2recover' program to attempt to recover\ndata from undamaged sections of corrupted files.\n\n"
	.size	.L.str.46, 241

	.type	.L.str.47,@object       # @.str.47
.L.str.47:
	.asciz	"bzip2: file name\n`%s'\nis suspiciously (more than %d chars) long.\nTry using a reasonable file name instead.  Sorry! :-)\n"
	.size	.L.str.47, 120

	.type	.L.str.48,@object       # @.str.48
.L.str.48:
	.asciz	"\n%s: couldn't allocate enough memory\n"
	.size	.L.str.48, 38

	.type	.L.str.49,@object       # @.str.49
.L.str.49:
	.asciz	"bzip2, a block-sorting file compressor.  Version %s.\n   \n   Copyright (C) 1996-2005 by Julian Seward.\n   \n   This program is free software; you can redistribute it and/or modify\n   it under the terms set out in the LICENSE file, which is included\n   in the bzip2-1.0 source distribution.\n   \n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   LICENSE file for more details.\n   \n"
	.size	.L.str.49, 529

	.type	.L.str.50,@object       # @.str.50
.L.str.50:
	.asciz	"bzip2, a block-sorting file compressor.  Version %s.\n\n   usage: %s [flags and input files in any order]\n\n   -h --help           print this message\n   -d --decompress     force decompression\n   -z --compress       force compression\n   -k --keep           keep (don't delete) input files\n   -f --force          overwrite existing output files\n   -t --test           test compressed file integrity\n   -c --stdout         output to standard out\n   -q --quiet          suppress noncritical error messages\n   -v --verbose        be verbose (a 2nd -v gives more)\n   -L --license        display software version & license\n   -V --version        display software version & license\n   -s --small          use less memory (at most 2500k)\n   -1 .. -9            set block size to 100k .. 900k\n   --fast              alias for -1\n   --best              alias for -9\n\n   If invoked as `bzip2', default action is to compress.\n              as `bunzip2',  default action is to decompress.\n              as `bzcat', default action is to decompress to stdout.\n\n   If no file names are given, bzip2 compresses or decompresses\n   from standard input to standard output.  You can combine\n   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n\n"
	.size	.L.str.50, 1230

	.type	.L.str.51,@object       # @.str.51
.L.str.51:
	.asciz	"%s: %s is redundant in versions 0.9.5 and above\n"
	.size	.L.str.51, 49

	.type	.L.str.52,@object       # @.str.52
.L.str.52:
	.asciz	"\n%s: Control-C or similar caught, quitting.\n"
	.size	.L.str.52, 45

	.type	.L.str.53,@object       # @.str.53
.L.str.53:
	.asciz	"compress: bad modes\n"
	.size	.L.str.53, 21

	.type	.L.str.54,@object       # @.str.54
.L.str.54:
	.asciz	"(stdin)"
	.size	.L.str.54, 8

	.type	.L.str.55,@object       # @.str.55
.L.str.55:
	.asciz	"(stdout)"
	.size	.L.str.55, 9

	.type	.L.str.56,@object       # @.str.56
.L.str.56:
	.asciz	"%s: There are no files matching `%s'.\n"
	.size	.L.str.56, 39

	.type	.L.str.57,@object       # @.str.57
.L.str.57:
	.asciz	"%s: Can't open input file %s: %s.\n"
	.size	.L.str.57, 35

	.type	.L.str.58,@object       # @.str.58
.L.str.58:
	.asciz	"%s: Input file %s already has %s suffix.\n"
	.size	.L.str.58, 42

	.type	.L.str.59,@object       # @.str.59
.L.str.59:
	.asciz	"%s: Input file %s is a directory.\n"
	.size	.L.str.59, 35

	.type	.L.str.60,@object       # @.str.60
.L.str.60:
	.asciz	"%s: Input file %s is not a normal file.\n"
	.size	.L.str.60, 41

	.type	.L.str.61,@object       # @.str.61
.L.str.61:
	.asciz	"%s: Output file %s already exists.\n"
	.size	.L.str.61, 36

	.type	.L.str.62,@object       # @.str.62
.L.str.62:
	.asciz	"%s: Input file %s has %d other link%s.\n"
	.size	.L.str.62, 40

	.type	.L.str.63,@object       # @.str.63
.L.str.63:
	.asciz	"s"
	.size	.L.str.63, 2

	.type	.L.str.64,@object       # @.str.64
.L.str.64:
	.asciz	"%s: I won't write compressed data to a terminal.\n"
	.size	.L.str.64, 50

	.type	.L.str.65,@object       # @.str.65
.L.str.65:
	.asciz	"%s: For help, type: `%s --help'.\n"
	.size	.L.str.65, 34

	.type	.L.str.66,@object       # @.str.66
.L.str.66:
	.asciz	"rb"
	.size	.L.str.66, 3

	.type	.L.str.67,@object       # @.str.67
.L.str.67:
	.asciz	"wb"
	.size	.L.str.67, 3

	.type	.L.str.68,@object       # @.str.68
.L.str.68:
	.asciz	"%s: Can't create output file %s: %s.\n"
	.size	.L.str.68, 38

	.type	.L.str.69,@object       # @.str.69
.L.str.69:
	.asciz	"compress: bad srcMode"
	.size	.L.str.69, 22

	.type	.L.str.70,@object       # @.str.70
.L.str.70:
	.asciz	"  %s: "
	.size	.L.str.70, 7

	.type	.L.str.71,@object       # @.str.71
.L.str.71:
	.asciz	"\n%s: PANIC -- internal consistency error:\n\t%s\n\tThis is a BUG.  Please report it to me at:\n\tjseward@bzip.org\n"
	.size	.L.str.71, 109

	.type	fileMetaInfo,@object    # @fileMetaInfo
	.local	fileMetaInfo
	.comm	fileMetaInfo,144,8
	.type	.L.str.72,@object       # @.str.72
.L.str.72:
	.asciz	" "
	.size	.L.str.72, 2

	.type	.L.str.73,@object       # @.str.73
.L.str.73:
	.asciz	"\n"
	.size	.L.str.73, 2

	.type	.L.str.74,@object       # @.str.74
.L.str.74:
	.asciz	" no data compressed.\n"
	.size	.L.str.74, 22

	.type	.L.str.75,@object       # @.str.75
.L.str.75:
	.asciz	"%6.3f:1, %6.3f bits/byte, %5.2f%% saved, %s in, %s out.\n"
	.size	.L.str.75, 57

	.type	.L.str.76,@object       # @.str.76
.L.str.76:
	.asciz	"compress:unexpected error"
	.size	.L.str.76, 26

	.type	.L.str.77,@object       # @.str.77
.L.str.77:
	.asciz	"bzip2: I'm not configured correctly for this platform!\n\tI require Int32, Int16 and Char to have sizes\n\tof 4, 2 and 1 bytes to run properly, and they don't.\n\tProbably you can fix this by defining them correctly,\n\tand recompiling.  Bye!\n"
	.size	.L.str.77, 236

	.type	.L.str.78,@object       # @.str.78
.L.str.78:
	.asciz	"\n%s: I/O or other error, bailing out.  Possible reason follows.\n"
	.size	.L.str.78, 65

	.type	.L.str.79,@object       # @.str.79
.L.str.79:
	.asciz	"uncompress: bad modes\n"
	.size	.L.str.79, 23

	.type	.L.str.80,@object       # @.str.80
.L.str.80:
	.asciz	".out"
	.size	.L.str.80, 5

	.type	.L.str.81,@object       # @.str.81
.L.str.81:
	.asciz	"%s: Can't guess original name for %s -- using %s\n"
	.size	.L.str.81, 50

	.type	.L.str.82,@object       # @.str.82
.L.str.82:
	.asciz	"%s: I won't read compressed data from a terminal.\n"
	.size	.L.str.82, 51

	.type	.L.str.83,@object       # @.str.83
.L.str.83:
	.asciz	"%s: Can't open input file %s:%s.\n"
	.size	.L.str.83, 34

	.type	.L.str.84,@object       # @.str.84
.L.str.84:
	.asciz	"uncompress: bad srcMode"
	.size	.L.str.84, 24

	.type	.L.str.85,@object       # @.str.85
.L.str.85:
	.asciz	"done\n"
	.size	.L.str.85, 6

	.type	.L.str.86,@object       # @.str.86
.L.str.86:
	.asciz	"not a bzip2 file.\n"
	.size	.L.str.86, 19

	.type	.L.str.87,@object       # @.str.87
.L.str.87:
	.asciz	"%s: %s is not a bzip2 file.\n"
	.size	.L.str.87, 29

	.type	.L.str.88,@object       # @.str.88
.L.str.88:
	.asciz	"decompress:bzReadGetUnused"
	.size	.L.str.88, 27

	.type	.L.str.89,@object       # @.str.89
.L.str.89:
	.asciz	"\n    "
	.size	.L.str.89, 6

	.type	.L.str.90,@object       # @.str.90
.L.str.90:
	.asciz	"\n%s: %s: trailing garbage after EOF ignored\n"
	.size	.L.str.90, 45

	.type	.L.str.91,@object       # @.str.91
.L.str.91:
	.asciz	"decompress:unexpected error"
	.size	.L.str.91, 28

	.type	.L.str.92,@object       # @.str.92
.L.str.92:
	.asciz	"\n%s: Data integrity error when decompressing.\n"
	.size	.L.str.92, 47

	.type	.L.str.93,@object       # @.str.93
.L.str.93:
	.asciz	"\n%s: Compressed file ends unexpectedly;\n\tperhaps it is corrupted?  *Possible* reason follows.\n"
	.size	.L.str.93, 95

	.type	.L.str.94,@object       # @.str.94
.L.str.94:
	.asciz	"testf: bad modes\n"
	.size	.L.str.94, 18

	.type	.L.str.95,@object       # @.str.95
.L.str.95:
	.asciz	"%s: Can't open input %s: %s.\n"
	.size	.L.str.95, 30

	.type	.L.str.96,@object       # @.str.96
.L.str.96:
	.asciz	"testf: bad srcMode"
	.size	.L.str.96, 19

	.type	.L.str.97,@object       # @.str.97
.L.str.97:
	.asciz	"ok\n"
	.size	.L.str.97, 4

	.type	.L.str.98,@object       # @.str.98
.L.str.98:
	.asciz	"test:bzReadGetUnused"
	.size	.L.str.98, 21

	.type	.L.str.99,@object       # @.str.99
.L.str.99:
	.asciz	"%s: %s: "
	.size	.L.str.99, 9

	.type	.L.str.100,@object      # @.str.100
.L.str.100:
	.asciz	"data integrity (CRC) error in data\n"
	.size	.L.str.100, 36

	.type	.L.str.101,@object      # @.str.101
.L.str.101:
	.asciz	"file ends unexpectedly\n"
	.size	.L.str.101, 24

	.type	.L.str.102,@object      # @.str.102
.L.str.102:
	.asciz	"bad magic number (file not created by bzip2)\n"
	.size	.L.str.102, 46

	.type	.L.str.103,@object      # @.str.103
.L.str.103:
	.asciz	"trailing garbage after EOF ignored\n"
	.size	.L.str.103, 36

	.type	.L.str.104,@object      # @.str.104
.L.str.104:
	.asciz	"test:unexpected error"
	.size	.L.str.104, 22


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
